[
    {
        "prompt": "\nclass Solution:\n    def subarraysWithKDistinct(self, A: List[int], K: int) -> int:\n            \"\"\"Given an array A of positive integers, call a (contiguous, not necessarily distinct) subarray of A good if the number of different integers in that subarray is exactly K.\n(For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.)\nReturn the number of good subarrays of A.\n \nExample 1:\nInput: A = [1,2,1,2,3], K = 2\nOutput: 7\nExplanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].\n\nExample 2:\nInput: A = [1,2,1,3,4], K = 3\nOutput: 3\nExplanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].\n\n \nNote:\n\n1 <= A.length <= 20000\n1 <= A[i] <= A.length\n1 <= K <= A.length\n    \"\"\"\n",
        "canonical_solution": "from collections import defaultdict\nclass Solution:\n    def subarraysWithKDistinct(self, A: List[int], K: int) -> int:\n        \n        start_k = 0\n        start = 0\n        elem_dict = defaultdict(int)\n        \n        ans = 0\n        \n        for elem in A:\n            elem_dict[elem] += 1\n            \n            if len(elem_dict) > K:\n                del elem_dict[A[start_k]]\n                start_k+=1\n                start = start_k\n                \n                \n            if len(elem_dict) == K:\n                while elem_dict[A[start_k]] > 1:\n                    elem_dict[A[start_k]]-=1\n                    start_k+=1\n                    \n                ans = ans + start_k - start + 1\n                \n        return ans\n                \n                \n                \n",
        "inputs": [
            [
                [
                    1,
                    2,
                    1,
                    2,
                    3
                ],
                2
            ]
        ],
        "outputs": [
            [
                7
            ]
        ],
        "starter_code": "\nclass Solution:\n    def subarraysWithKDistinct(self, A: List[int], K: int) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                2,
                27
            ],
            [
                "Function Body",
                3,
                27
            ],
            [
                "For Loop Body",
                11,
                25
            ],
            [
                "If Statement Body",
                14,
                17
            ],
            [
                "If Statement Body",
                20,
                25
            ],
            [
                "While Loop Body",
                21,
                23
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n            \"\"\"Given the string croakOfFrogs, which represents a combination of the string \"croak\" from different frogs, that is, multiple frogs can croak at the same time, so multiple “croak” are mixed. Return the minimum number of different frogs to finish all the croak in the given string.\nA valid \"croak\" means a frog is printing 5 letters ‘c’, ’r’, ’o’, ’a’, ’k’ sequentially. The frogs have to print all five letters to finish a croak. If the given string is not a combination of valid \"croak\" return -1.\n \nExample 1:\nInput: croakOfFrogs = \"croakcroak\"\nOutput: 1 \nExplanation: One frog yelling \"croak\" twice.\n\nExample 2:\nInput: croakOfFrogs = \"crcoakroak\"\nOutput: 2 \nExplanation: The minimum number of frogs is two. \nThe first frog could yell \"crcoakroak\".\nThe second frog could yell later \"crcoakroak\".\n\nExample 3:\nInput: croakOfFrogs = \"croakcrook\"\nOutput: -1\nExplanation: The given string is an invalid combination of \"croak\" from different frogs.\n\nExample 4:\nInput: croakOfFrogs = \"croakcroa\"\nOutput: -1\n\n \nConstraints:\n\n1 <= croakOfFrogs.length <= 10^5\nAll characters in the string are: 'c', 'r', 'o', 'a' or 'k'.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        # valid string? can be seperated into full croaks:\n        ### dict of letters. c, r, o, a, k should all be equal, nothing else in\n        if len(croakOfFrogs)%5!=0 or croakOfFrogs[0]!='c' or croakOfFrogs[-1]!='k':\n            return -1\n        \n        letters = {\n            'c': 0,\n            'r': 0,\n            'o': 0,\n            'a': 0,\n            'k': 0\n        }\n        \n        frogs = 0\n        temp = 0\n        \n        for l in croakOfFrogs:\n            letters[l] += 1\n            temp = letters['c'] - letters['k']\n            if temp > frogs:\n                frogs = temp\n                \n               \n        c_count = letters['c']\n        for letter in letters:\n            if letters[letter] != c_count:\n                return -1\n            \n        return frogs",
        "inputs": [
            [
                "\"croakcroak\""
            ]
        ],
        "outputs": [
            [
                1
            ]
        ],
        "starter_code": "\nclass Solution:\n    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                31
            ],
            [
                "Function Body",
                2,
                31
            ],
            [
                "If Statement Body",
                5,
                6
            ],
            [
                "For Loop Body",
                19,
                23
            ],
            [
                "If Statement Body",
                22,
                23
            ],
            [
                "For Loop Body",
                27,
                29
            ],
            [
                "If Statement Body",
                28,
                29
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def nextGreaterElement(self, n: int) -> int:\n            \"\"\"Given a positive 32-bit integer n, you need to find the smallest 32-bit integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive 32-bit integer exists, you need to return -1.\n\nExample 1:\n\n\nInput: 12\nOutput: 21\n\n\n \n\nExample 2:\n\n\nInput: 21\nOutput: -1\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def nextGreaterElement(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         s=[i for i in str(n)]\n         exist=-1\n         for i in range(len(s)-1,0,-1):\n             if s[i-1]<s[i]:\n                 temp=sorted(s[i-1:])\n                 pivot=temp.index(s[i-1])\n                 for j in range(pivot+1,len(temp)):\n                     if temp[j]>s[i-1]:\n                         pivot=j\n                         break\n                 \n                 s[i-1]=temp[pivot]\n                 del temp[pivot]\n                 s[i:]=temp\n                 exist=1\n                 break\n         ret=int(''.join(s))\n         if exist==1 and ret<2147483647 :\n             return ret\n         else:\n             return -1",
        "inputs": [
            [
                12
            ]
        ],
        "outputs": [
            [
                21
            ]
        ],
        "starter_code": "\nclass Solution:\n    def nextGreaterElement(self, n: int) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                27
            ],
            [
                "Function Body",
                2,
                27
            ],
            [
                "List Comprehension",
                7,
                7
            ],
            [
                "For Loop Body",
                9,
                22
            ],
            [
                "If Statement Body",
                10,
                22
            ],
            [
                "For Loop Body",
                13,
                16
            ],
            [
                "If Statement Body",
                14,
                16
            ],
            [
                "If Statement Body",
                24,
                27
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def numTimesAllBlue(self, light: List[int]) -> int:\n            \"\"\"There is a room with n bulbs, numbered from 1 to n, arranged in a row from left to right. Initially, all the bulbs are turned off.\nAt moment k (for k from 0 to n - 1), we turn on the light[k] bulb. A bulb change color to blue only if it is on and all the previous bulbs (to the left) are turned on too.\nReturn the number of moments in which all turned on bulbs are blue.\n \nExample 1:\n\nInput: light = [2,1,3,5,4]\nOutput: 3\nExplanation: All bulbs turned on, are blue at the moment 1, 2 and 4.\n\nExample 2:\nInput: light = [3,2,4,1,5]\nOutput: 2\nExplanation: All bulbs turned on, are blue at the moment 3, and 4 (index-0).\n\nExample 3:\nInput: light = [4,1,2,3]\nOutput: 1\nExplanation: All bulbs turned on, are blue at the moment 3 (index-0).\nBulb 4th changes to blue at the moment 3.\n\nExample 4:\nInput: light = [2,1,4,3,6,5]\nOutput: 3\n\nExample 5:\nInput: light = [1,2,3,4,5,6]\nOutput: 6\n\n \nConstraints:\n\nn == light.length\n1 <= n <= 5 * 10^4\nlight is a permutation of  [1, 2, ..., n]\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def numTimesAllBlue(self, light: List[int]) -> int:\n        right = 0\n        ans = 0\n        for i in range(len(light)):\n            if (light[i] > right):\n                right = light[i]\n            \n            if (i + 1 == right):\n                ans += 1\n                \n        return ans",
        "inputs": [
            [
                [
                    2,
                    1,
                    3,
                    5,
                    4
                ]
            ]
        ],
        "outputs": [
            [
                3
            ]
        ],
        "starter_code": "\nclass Solution:\n    def numTimesAllBlue(self, light: List[int]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                12
            ],
            [
                "Function Body",
                2,
                12
            ],
            [
                "For Loop Body",
                5,
                10
            ],
            [
                "If Statement Body",
                6,
                7
            ],
            [
                "If Statement Body",
                9,
                10
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def maxSizeSlices(self, slices: List[int]) -> int:\n            \"\"\"There is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows:\n\nYou will pick any pizza slice.\nYour friend Alice will pick next slice in anti clockwise direction of your pick. \nYour friend Bob will pick next slice in clockwise direction of your pick.\nRepeat until there are no more slices of pizzas.\n\nSizes of Pizza slices is represented by circular array slices in clockwise direction.\nReturn the maximum possible sum of slice sizes which you can have.\n \nExample 1:\n\nInput: slices = [1,2,3,4,5,6]\nOutput: 10\nExplanation: Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.\n\nExample 2:\n\nInput: slices = [8,9,8,6,1,1]\nOutput: 16\nOutput: Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.\n\nExample 3:\nInput: slices = [4,1,2,5,8,3,1,9,7]\nOutput: 21\n\nExample 4:\nInput: slices = [3,1,2]\nOutput: 3\n\n \nConstraints:\n\n1 <= slices.length <= 500\nslices.length % 3 == 0\n1 <= slices[i] <= 1000\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def maxSizeSlices(self, slices: List[int]) -> int:\n        a,b,n=[slices[0]],[0],len(slices)\n        for i in range(1,n):\n            a.append(max(a[-1],slices[i]))\n            b.append(max(b[-1],slices[i]))\n        for i in range(2,2*n//3,2):\n            aa,bb=[0]*(n-1),[0]*n\n            for j in range(i,n-1): aa[j]=max(aa[j-1],a[j-2]+slices[j])\n            for j in range(i+1,n): bb[j]=max(bb[j-1],b[j-2]+slices[j])\n            a,b=aa,bb\n        return max(a[-1],b[-1])",
        "inputs": [
            [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6
                ]
            ]
        ],
        "outputs": [
            [
                10
            ]
        ],
        "starter_code": "\nclass Solution:\n    def maxSizeSlices(self, slices: List[int]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                12
            ],
            [
                "Function Body",
                2,
                12
            ],
            [
                "For Loop Body",
                4,
                6
            ],
            [
                "For Loop Body",
                7,
                11
            ],
            [
                "For Loop Body",
                9,
                9
            ],
            [
                "For Loop Body",
                10,
                10
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def distinctSubseqII(self, S: str) -> int:\n            \"\"\"Given a string S, count the number of distinct, non-empty subsequences of S .\nSince the result may be large, return the answer modulo 10^9 + 7.\n \nExample 1:\nInput: \"abc\"\nOutput: 7\nExplanation: The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\".\n\n\nExample 2:\nInput: \"aba\"\nOutput: 6\nExplanation: The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"ba\", \"aa\" and \"aba\".\n\n\nExample 3:\nInput: \"aaa\"\nOutput: 3\nExplanation: The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\".\n\n\n\n \n \nNote:\n\nS contains only lowercase letters.\n1 <= S.length <= 2000\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def distinctSubseqII(self, s: str) -> int:\n        n = len(s)\n        MOD = 10**9 + 7\n        seen = dict()\n        \n        a = 1\n        for i in range(n):\n            char = s[i]\n            b = 2 * a\n            if char in seen:\n                b -= seen[char]\n            \n            b %= MOD\n            seen[char] = a\n            a = b\n        return a - 1\n                \n",
        "inputs": [
            [
                "\"abc\""
            ]
        ],
        "outputs": [
            [
                7
            ]
        ],
        "starter_code": "\nclass Solution:\n    def distinctSubseqII(self, S: str) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                17
            ],
            [
                "Function Body",
                2,
                17
            ],
            [
                "For Loop Body",
                8,
                16
            ],
            [
                "If Statement Body",
                11,
                12
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def movesToMakeZigzag(self, nums: List[int]) -> int:\n            \"\"\"Given an array nums of integers, a move consists of choosing any element and decreasing it by 1.\nAn array A is a zigzag array if either:\n\nEvery even-indexed element is greater than adjacent elements, ie. A[0] > A[1] < A[2] > A[3] < A[4] > ...\nOR, every odd-indexed element is greater than adjacent elements, ie. A[0] < A[1] > A[2] < A[3] > A[4] < ...\n\nReturn the minimum number of moves to transform the given array nums into a zigzag array.\n \nExample 1:\nInput: nums = [1,2,3]\nOutput: 2\nExplanation: We can decrease 2 to 0 or 3 to 1.\n\nExample 2:\nInput: nums = [9,6,1,6,2]\nOutput: 4\n\n \nConstraints:\n\n1 <= nums.length <= 1000\n1 <= nums[i] <= 1000\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def movesToMakeZigzag(self, nums):\n        n = len(nums)\n        res0 = 0\n        for i in range(0, n, 2):\n            nei = min(nums[j] for j in [i - 1, i + 1] if 0 <= j <= n-1)\n            if nums[i] >= nei:\n                res0 += nums[i] - nei + 1\n        res1 = 0\n        for i in range(1, n, 2):\n            nei = min(nums[j] for j in [i - 1, i + 1] if 0 <= j <= n-1)\n            if nums[i] >= nei:\n                res1 += nums[i] - nei + 1\n        return min(res0, res1)",
        "inputs": [
            [
                [
                    1,
                    2,
                    3
                ]
            ]
        ],
        "outputs": [
            [
                2
            ]
        ],
        "starter_code": "\nclass Solution:\n    def movesToMakeZigzag(self, nums: List[int]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                14
            ],
            [
                "Function Body",
                2,
                14
            ],
            [
                "For Loop Body",
                5,
                8
            ],
            [
                "Generator Expression",
                6,
                6
            ],
            [
                "If Statement Body",
                7,
                8
            ],
            [
                "For Loop Body",
                10,
                13
            ],
            [
                "Generator Expression",
                11,
                11
            ],
            [
                "If Statement Body",
                12,
                13
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def longestWPI(self, hours: List[int]) -> int:\n            \"\"\"We are given hours, a list of the number of hours worked per day for a given employee.\nA day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than 8.\nA well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.\nReturn the length of the longest well-performing interval.\n \nExample 1:\nInput: hours = [9,9,6,0,6,6,9]\nOutput: 3\nExplanation: The longest well-performing interval is [9,9,6].\n\n \nConstraints:\n\n1 <= hours.length <= 10000\n0 <= hours[i] <= 16\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def longestWPI(self, hours: List[int]) -> int:\n        ans, count, seen = 0, 0, {}\n        for i, hour in enumerate(hours):\n            count = count + 1 if hour > 8 else count - 1\n            if count > 0:\n                ans = i + 1\n            else:\n                if count not in seen:\n                    seen[count] = i\n                if count - 1 in seen:\n                    ans = max(ans, i - seen[count - 1])\n        return ans\n\n        \n",
        "inputs": [
            [
                [
                    9,
                    9,
                    6,
                    0,
                    6,
                    6,
                    9
                ]
            ]
        ],
        "outputs": [
            [
                3
            ]
        ],
        "starter_code": "\nclass Solution:\n    def longestWPI(self, hours: List[int]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                13
            ],
            [
                "Function Body",
                2,
                13
            ],
            [
                "For Loop Body",
                4,
                12
            ],
            [
                "If Statement Body",
                6,
                12
            ],
            [
                "If Statement Body",
                9,
                10
            ],
            [
                "If Statement Body",
                11,
                12
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\n            \"\"\"In LOL world, there is a hero called Teemo and his attacking can make his enemy Ashe be in poisoned condition. Now, given the Teemo's attacking ascending time series towards Ashe and the poisoning time duration per Teemo's attacking, you need to output the total time that Ashe is in poisoned condition.\n\n\nYou may assume that Teemo attacks at the very beginning of a specific time point, and makes Ashe be in poisoned condition immediately.\n\nExample 1:\n\nInput: [1,4], 2\nOutput: 4\nExplanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned immediately. This poisoned status will last 2 seconds until the end of time point 2. And at time point 4, Teemo attacks Ashe again, and causes Ashe to be in poisoned status for another 2 seconds. So you finally need to output 4.\n\n\n\n\nExample 2:\n\nInput: [1,2], 2\nOutput: 3\nExplanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned. This poisoned status will last 2 seconds until the end of time point 2. However, at the beginning of time point 2, Teemo attacks Ashe again who is already in poisoned status. Since the poisoned status won't add up together, though the second poisoning attack will still work at time point 2, it will stop at the end of time point 3. So you finally need to output 3.\n\n\n\n\nNote:\n\nYou may assume the length of given time series array won't exceed 10000.\nYou may assume the numbers in the Teemo's attacking time series and his poisoning time duration per attacking are non-negative integers, which won't exceed 10,000,000.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def findPoisonedDuration(self, timeSeries, duration):\n         \"\"\"\n         :type timeSeries: List[int]\n         :type duration: int\n         :rtype: int\n         \"\"\"\n         if not timeSeries:\n             return 0\n         prev = timeSeries[0]\n         ret = 0\n         count = 0\n         for t in timeSeries[1:]:\n             diff = t - prev\n             if diff > duration:\n                 count += 1\n             else:\n                 ret += diff \n             prev = t;\n         ret += (count+1)*duration \n         return ret\n",
        "inputs": [
            [
                [
                    1,
                    4
                ],
                2
            ]
        ],
        "outputs": [
            [
                4
            ]
        ],
        "starter_code": "\nclass Solution:\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                21
            ],
            [
                "Function Body",
                2,
                21
            ],
            [
                "If Statement Body",
                8,
                9
            ],
            [
                "For Loop Body",
                13,
                19
            ],
            [
                "If Statement Body",
                15,
                18
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def canConstruct(self, s: str, k: int) -> bool:\n            \"\"\"Given a string s and an integer k. You should construct k non-empty palindrome strings using all the characters in s.\nReturn True if you can use all the characters in s to construct k palindrome strings or False otherwise.\n \nExample 1:\nInput: s = \"annabelle\", k = 2\nOutput: true\nExplanation: You can construct two palindromes using all characters in s.\nSome possible constructions \"anna\" + \"elble\", \"anbna\" + \"elle\", \"anellena\" + \"b\"\n\nExample 2:\nInput: s = \"leetcode\", k = 3\nOutput: false\nExplanation: It is impossible to construct 3 palindromes using all the characters of s.\n\nExample 3:\nInput: s = \"true\", k = 4\nOutput: true\nExplanation: The only possible solution is to put each character in a separate string.\n\nExample 4:\nInput: s = \"yzyzyzyzyzyzyzy\", k = 2\nOutput: true\nExplanation: Simply you can put all z's in one string and all y's in the other string. Both strings will be palindrome.\n\nExample 5:\nInput: s = \"cr\", k = 7\nOutput: false\nExplanation: We don't have enough characters in s to construct 7 palindromes.\n\n \nConstraints:\n\n1 <= s.length <= 10^5\nAll characters in s are lower-case English letters.\n1 <= k <= 10^5\n    \"\"\"\n",
        "canonical_solution": "from collections import Counter\nclass Solution:\n    def canConstruct(self, s: str, k: int) -> bool:\n        if k > len(s): #return False\n            return False\n        counter = Counter(s)\n        odd_counts = 0\n        \n        for char in counter:\n            if counter[char] % 2 == 1:\n                odd_counts += 1\n        \n        return odd_counts <= k",
        "inputs": [
            [
                "\"annabelle\"",
                2
            ]
        ],
        "outputs": [
            [
                true
            ]
        ],
        "starter_code": "\nclass Solution:\n    def canConstruct(self, s: str, k: int) -> bool:\n        ",
        "scope": [
            [
                "Class Body",
                2,
                13
            ],
            [
                "Function Body",
                3,
                13
            ],
            [
                "If Statement Body",
                4,
                5
            ],
            [
                "For Loop Body",
                9,
                11
            ],
            [
                "If Statement Body",
                10,
                11
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def leastBricks(self, wall: List[List[int]]) -> int:\n            \"\"\"There is a brick wall in front of you. The wall is rectangular and has several rows of bricks. The bricks have the same height but different width. You want to draw a vertical line from the top to the bottom and cross the least bricks. \n\n\nThe brick wall is represented by a list of rows. Each row is a list of integers representing the width of each brick in this row from left to right. \n\n\nIf your line go through the edge of a brick, then the brick is not considered as crossed. You need to find out how to draw the line to cross the least bricks and return the number of crossed bricks. \n\nYou cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks. \n\nExample:\n\nInput: \n[[1,2,2,1],\n [3,1,2],\n [1,3,2],\n [2,4],\n [3,1,2],\n [1,3,1,1]]\nOutput: 2\nExplanation: \n\n\n\n\nNote:\n\nThe width sum of bricks in different rows are the same and won't exceed INT_MAX.\nThe number of bricks in each row is in range [1,10,000]. The height of wall is in range [1,10,000]. Total number of bricks of the wall won't exceed 20,000.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def leastBricks(self, wall):\n         \"\"\"\n         :type wall: List[List[int]]\n         :rtype: int\n         \"\"\"\n         d = {}\n         for i in wall:\n             suma = 0\n             for j in range(len(i)-1):\n                 suma += i[j]\n                 if suma in d:\n                     d[suma] += 1\n                 else:\n                     d[suma] = 1\n         if len(d) == 0:\n             return len(wall)\n         return len(wall) - max(d.values())\n",
        "inputs": [
            [
                [
                    [
                        1,
                        2,
                        2,
                        1
                    ],
                    [
                        3,
                        1,
                        2
                    ],
                    [
                        1,
                        3,
                        2
                    ],
                    [
                        2,
                        4
                    ],
                    [
                        3,
                        1,
                        2
                    ],
                    [
                        1,
                        3,
                        1,
                        1
                    ],
                    [],
                    []
                ]
            ]
        ],
        "outputs": [
            [
                4
            ]
        ],
        "starter_code": "\nclass Solution:\n    def leastBricks(self, wall: List[List[int]]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                18
            ],
            [
                "Function Body",
                2,
                18
            ],
            [
                "For Loop Body",
                8,
                15
            ],
            [
                "For Loop Body",
                10,
                15
            ],
            [
                "If Statement Body",
                12,
                15
            ],
            [
                "If Statement Body",
                16,
                17
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\ndef mix(s1, s2):\n\t    \"\"\"Given two strings s1 and s2, we want to visualize how different the two strings are.\nWe will only take into account the *lowercase* letters (a to z).\nFirst let us count the frequency of each *lowercase* letters in s1 and s2.\n\n`s1 = \"A aaaa bb c\"`\n\n`s2 = \"& aaa bbb c d\"`\n\n`s1 has 4 'a', 2 'b', 1 'c'`\n\n`s2 has 3 'a', 3 'b', 1 'c', 1 'd'`\n\nSo the maximum for 'a' in s1 and s2 is 4 from s1; the maximum for 'b' is 3 from s2.\nIn the following we will not consider letters when the maximum of their occurrences\nis less than or equal to 1.\n\nWe can resume the differences between s1 and s2 in the following string:\n`\"1:aaaa/2:bbb\"`\nwhere `1` in `1:aaaa` stands for string s1 and `aaaa` because the maximum for `a` is 4.\nIn the same manner `2:bbb` stands for string s2 and `bbb` because the maximum for `b` is 3.\n\nThe task is to produce a string in which each *lowercase* letters of s1 or s2 appears as many times as\nits maximum if this maximum is *strictly greater than 1*; these letters will be prefixed by the \nnumber of the string where they appear with their maximum value and `:`. \nIf the maximum is in s1 as well as in s2 the prefix is `=:`.\n\nIn the result, substrings (a substring is for example 2:nnnnn or 1:hhh; it contains the prefix) will be in decreasing order of their length and when they have the same length sorted in ascending lexicographic order (letters and digits - more precisely sorted by codepoint); the different groups will be separated by '/'. See examples and \"Example Tests\".\n\nHopefully other examples can make this clearer.\n\n```\ns1 = \"my&friend&Paul has heavy hats! &\"\ns2 = \"my friend John has many many friends &\"\nmix(s1, s2) --> \"2:nnnnn/1:aaaa/1:hhh/2:mmm/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss\"\n\ns1 = \"mmmmm m nnnnn y&friend&Paul has heavy hats! &\"\ns2 = \"my frie n d Joh n has ma n y ma n y frie n ds n&\"\nmix(s1, s2) --> \"1:mmmmmm/=:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/=:ee/=:ss\"\n\ns1=\"Are the kids at home? aaaaa fffff\"\ns2=\"Yes they are here! aaaaa fffff\"\nmix(s1, s2) --> \"=:aaaaaa/2:eeeee/=:fffff/1:tt/2:rr/=:hh\"\n```\n# Note for Swift, R, PowerShell\nThe prefix `=:` is replaced by `E:`\n``` \ns1 = \"mmmmm m nnnnn y&friend&Paul has heavy hats! &\"\ns2 = \"my frie n d Joh n has ma n y ma n y frie n ds n&\"\nmix(s1, s2) --> \"1:mmmmmm/E:nnnnnn/1:aaaa/1:hhh/2:yyy/2:dd/2:ff/2:ii/2:rr/E:ee/E:ss\"\n```\n    \"\"\"\n",
        "canonical_solution": "\ndef mix(s1, s2):\n    hist = {}\n    for ch in \"abcdefghijklmnopqrstuvwxyz\":\n        val1, val2 = s1.count(ch), s2.count(ch)\n        if max(val1, val2) > 1:\n            which = \"1\" if val1 > val2 else \"2\" if val2 > val1 else \"=\"\n            hist[ch] = (-max(val1, val2), which + \":\" + ch * max(val1, val2))\n    return \"/\".join(hist[ch][1] for ch in sorted(hist, key=lambda x: hist[x]))\n",
        "inputs": [
            [
                "\"looping is fun but dangerous\"",
                "\"less dangerous than coding\""
            ],
            [
                "\"Are they here\"",
                "\"yes, they are here\""
            ],
            [
                "\"Lords of the Fallen\"",
                "\"gamekult\""
            ]
        ],
        "outputs": [
            [
                "\"1:ooo/1:uuu/2:sss/=:nnn/1:ii/2:aa/2:dd/2:ee/=:gg\""
            ],
            [
                "\"2:eeeee/2:yy/=:hh/=:rr\""
            ],
            [
                "\"1:ee/1:ll/1:oo\""
            ]
        ],
        "starter_code": "\ndef mix(s1, s2):\n\t",
        "scope": [
            [
                "Function Body",
                2,
                9
            ],
            [
                "For Loop Body",
                4,
                8
            ],
            [
                "If Statement Body",
                6,
                8
            ],
            [
                "Generator Expression",
                9,
                9
            ],
            [
                "Lambda Expression",
                9,
                9
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def containsCycle(self, grid: List[List[str]]) -> bool:\n            \"\"\"Given a 2D array of characters grid of size m x n, you need to find if there exists any cycle consisting of the same value in grid.\nA cycle is a path of length 4 or more in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell.\nAlso, you cannot move to the cell that you visited in your last move. For example, the cycle (1, 1) -> (1, 2) -> (1, 1) is invalid because from (1, 2) we visited (1, 1) which was the last visited cell.\nReturn true if any cycle of the same value exists in grid, otherwise, return false.\n \nExample 1:\n\nInput: grid = [[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]\nOutput: true\nExplanation: There are two valid cycles shown in different colors in the image below:\n\n\nExample 2:\n\nInput: grid = [[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\",\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]]\nOutput: true\nExplanation: There is only one valid cycle highlighted in the image below:\n\n\nExample 3:\n\nInput: grid = [[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]]\nOutput: false\n\n \nConstraints:\n\nm == grid.length\nn == grid[i].length\n1 <= m <= 500\n1 <= n <= 500\ngrid consists only of lowercase English letters.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def containsCycle(self, grid: List[List[str]]) -> bool:\n        n = len(grid)\n        m = len(grid[0])\n        \n        F = [i for i in range(m * n)]\n        def find(x):\n            if x == F[x]:\n                return x\n            else:\n                F[x] = find(F[x])\n                return F[x]\n            \n        for i in range(n):\n            for j in range(m):\n                if i > 0 and grid[i-1][j] == grid[i][j]:\n                    f1 = find((i-1)*m+j)\n                    f2 = find((i)*m+j)\n                    if f1 == f2:\n                        return True\n                    F[f1] = f2\n                if j > 0 and grid[i][j-1] == grid[i][j]:\n                    f1 = find((i)*m+j-1)\n                    f2 = find((i)*m+j)\n                    if f1 == f2:\n                        return True\n                    F[f1] = f2\n        return False\n",
        "inputs": [
            [
                [
                    [
                        "\"a\"",
                        "\"a\"",
                        "\"a\"",
                        "\"a\""
                    ],
                    [
                        "\"a\"",
                        "\"b\"",
                        "\"b\"",
                        "\"a\""
                    ],
                    [
                        "\"a\"",
                        "\"b\"",
                        "\"b\"",
                        "\"a\""
                    ],
                    [
                        "\"a\"",
                        "\"a\"",
                        "\"a\"",
                        "\"a\""
                    ],
                    [],
                    []
                ]
            ]
        ],
        "outputs": [
            [
                true
            ]
        ],
        "starter_code": "\nclass Solution:\n    def containsCycle(self, grid: List[List[str]]) -> bool:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                28
            ],
            [
                "Function Body",
                2,
                28
            ],
            [
                "List Comprehension",
                6,
                6
            ],
            [
                "Function Body",
                7,
                12
            ],
            [
                "If Statement Body",
                8,
                12
            ],
            [
                "For Loop Body",
                14,
                27
            ],
            [
                "For Loop Body",
                15,
                27
            ],
            [
                "If Statement Body",
                16,
                21
            ],
            [
                "If Statement Body",
                19,
                20
            ],
            [
                "If Statement Body",
                22,
                27
            ],
            [
                "If Statement Body",
                25,
                26
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n            \"\"\"Given an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference.\n \nExample 1:\nInput: arr = [1,2,3,4], difference = 1\nOutput: 4\nExplanation: The longest arithmetic subsequence is [1,2,3,4].\nExample 2:\nInput: arr = [1,3,5,7], difference = 1\nOutput: 1\nExplanation: The longest arithmetic subsequence is any single element.\n\nExample 3:\nInput: arr = [1,5,7,8,5,3,4,2,1], difference = -2\nOutput: 4\nExplanation: The longest arithmetic subsequence is [7,5,3,1].\n\n \nConstraints:\n\n1 <= arr.length <= 10^5\n-10^4 <= arr[i], difference <= 10^4\n    \"\"\"\n",
        "canonical_solution": "from collections import defaultdict\n\nclass Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        count_dict = defaultdict(int)\n        for num in arr:\n            count_dict[num] = count_dict[num-difference] + 1\n        return max(count_dict.values())\n",
        "inputs": [
            [
                [
                    1,
                    2,
                    3,
                    4
                ],
                1
            ]
        ],
        "outputs": [
            [
                4
            ]
        ],
        "starter_code": "\nclass Solution:\n    def longestSubsequence(self, arr: List[int], difference: int) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                3,
                8
            ],
            [
                "Function Body",
                4,
                8
            ],
            [
                "For Loop Body",
                6,
                7
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def shortestPalindrome(self, s: str) -> str:\n            \"\"\"Given a string s, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.\n\nExample 1:\n\n\nInput: \"aacecaaa\"\nOutput: \"aaacecaaa\"\n\n\nExample 2:\n\n\nInput: \"abcd\"\nOutput: \"dcbabcd\"\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def shortestPalindrome(self, s):\n         if len(s)<2:\n             return s\n         if len(s)==40002:\n             return s[20000:][::-1]+s\n         for i in range(len(s)-1,-1,-1):\n             if s[i]==s[0]:\n                 j=0\n                 while j<(i+1)//2 and s[i-j]==s[j]:\n                     j+=1\n                 if j>=(i+1)//2:\n                     return s[i+1:][::-1]+s",
        "inputs": [
            [
                "\"aacecaaa\""
            ]
        ],
        "outputs": [
            [
                "\"aaacecaaa\""
            ]
        ],
        "starter_code": "\nclass Solution:\n    def shortestPalindrome(self, s: str) -> str:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                13
            ],
            [
                "Function Body",
                2,
                13
            ],
            [
                "If Statement Body",
                3,
                4
            ],
            [
                "If Statement Body",
                5,
                6
            ],
            [
                "For Loop Body",
                7,
                13
            ],
            [
                "If Statement Body",
                8,
                13
            ],
            [
                "While Loop Body",
                10,
                11
            ],
            [
                "If Statement Body",
                12,
                13
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def checkSubarraySum(self, nums: List[int], k: int) -> bool:\n            \"\"\"Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.\n\n\n\nExample 1:\n\nInput: [23, 2, 4, 6, 7],  k=6\nOutput: True\nExplanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.\n\n\n\n\nExample 2:\n\nInput: [23, 2, 6, 4, 7],  k=6\nOutput: True\nExplanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.\n\n\n\nNote:\n\nThe length of the array won't exceed 10,000.\nYou may assume the sum of all the numbers is in the range of a signed 32-bit integer.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def checkSubarraySum(self, nums, k):\n         \"\"\"\n         :type nums: List[int]\n         :type k: int\n         :rtype: bool\n         \"\"\"\n         if k==0:\n             j=0\n             for i in range(0,len(nums)):\n                 if nums[i]==0:\n                     if j<i:\n                         return True\n                 else:\n                     j=i+1\n             return False\n         dic={0:-1}\n         c=0\n         for i in range(0,len(nums)):\n             c=(c+nums[i])%k\n             if c in dic:\n                 if i-dic[c]>1:\n                     return True\n             else:\n                 dic[c]=i\n         return False",
        "inputs": [
            [
                [
                    23,
                    2,
                    4,
                    6,
                    7
                ],
                6
            ]
        ],
        "outputs": [
            [
                true
            ]
        ],
        "starter_code": "\nclass Solution:\n    def checkSubarraySum(self, nums: List[int], k: int) -> bool:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                26
            ],
            [
                "Function Body",
                2,
                26
            ],
            [
                "If Statement Body",
                8,
                16
            ],
            [
                "For Loop Body",
                10,
                15
            ],
            [
                "If Statement Body",
                11,
                15
            ],
            [
                "If Statement Body",
                12,
                13
            ],
            [
                "For Loop Body",
                19,
                25
            ],
            [
                "If Statement Body",
                21,
                25
            ],
            [
                "If Statement Body",
                22,
                23
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n            \"\"\"Given a string S and a string T, count the number of distinct subsequences of S which equals T.\n\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, \"ACE\" is a subsequence of \"ABCDE\" while \"AEC\" is not).\n\nExample 1:\n\n\nInput: S = \"rabbbit\", T = \"rabbit\"\nOutput: 3\nExplanation:\n\nAs shown below, there are 3 ways you can generate \"rabbit\" from S.\n(The caret symbol ^ means the chosen letters)\n\nrabbbit\n^^^^ ^^\nrabbbit\n^^ ^^^^\nrabbbit\n^^^ ^^^\n\n\nExample 2:\n\n\nInput: S = \"babgbag\", T = \"bag\"\nOutput: 5\nExplanation:\n\nAs shown below, there are 5 ways you can generate \"bag\" from S.\n(The caret symbol ^ means the chosen letters)\n\nbabgbag\n^^ ^\nbabgbag\n^^    ^\nbabgbag\n^    ^^\nbabgbag\n  ^  ^^\nbabgbag\n    ^^^\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def numDistinct(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: int\n         \"\"\"\n         setOft=set(t)\n         news=\"\"\n         for ch in s:\n             if ch in setOft:\n                 news+=ch\n         dp=[[1 for i in range(len(news)+1)] for j in range(len(t)+1)]\n         for j in range(1,len(t)+1):\n             dp[j][0]=0\n \n         for i in range(len(t)):\n             for j in range(len(news)):\n                 if t[i]==news[j]:\n                     dp[i+1][j+1]=dp[i][j]+dp[i+1][j]\n                 else:\n                     dp[i+1][j+1]=dp[i+1][j]\n         return dp[len(t)][len(news)]\n",
        "inputs": [
            [
                "\"rabbbit\"",
                "\"rabbit\""
            ]
        ],
        "outputs": [
            [
                3
            ]
        ],
        "starter_code": "\nclass Solution:\n    def numDistinct(self, s: str, t: str) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                23
            ],
            [
                "Function Body",
                2,
                23
            ],
            [
                "For Loop Body",
                10,
                12
            ],
            [
                "If Statement Body",
                11,
                12
            ],
            [
                "List Comprehension",
                13,
                13
            ],
            [
                "List Comprehension",
                13,
                13
            ],
            [
                "For Loop Body",
                14,
                15
            ],
            [
                "For Loop Body",
                17,
                22
            ],
            [
                "For Loop Body",
                18,
                22
            ],
            [
                "If Statement Body",
                19,
                22
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n            \"\"\"There are N rooms and you start in room 0.  Each room has a distinct number in 0, 1, 2, ..., N-1, and each room may have some keys to access the next room. \nFormally, each room i has a list of keys rooms[i], and each key rooms[i][j] is an integer in [0, 1, ..., N-1] where N = rooms.length.  A key rooms[i][j] = v opens the room with number v.\nInitially, all the rooms start locked (except for room 0). \nYou can walk back and forth between rooms freely.\nReturn true if and only if you can enter every room.\n\n\nExample 1:\nInput: [[1],[2],[3],[]]\nOutput: true\nExplanation:  \nWe start in room 0, and pick up key 1.\nWe then go to room 1, and pick up key 2.\nWe then go to room 2, and pick up key 3.\nWe then go to room 3.  Since we were able to go to every room, we return true.\n\nExample 2:\nInput: [[1,3],[3,0,1],[2],[0]]\nOutput: false\nExplanation: We can't enter the room with number 2.\n\nNote:\n\n1 <= rooms.length <= 1000\n0 <= rooms[i].length <= 1000\nThe number of keys in all rooms combined is at most 3000.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        def dfs(node, visited):\n            if node in visited:\n                return\n            visited.add(node)\n            for nei in rooms[node]:\n                if nei in visited:\n                    continue\n                dfs(nei,visited)\n            return\n        visited = set()\n        dfs(0, visited)\n        if len(visited) == len(rooms):\n            return True\n        else: \n            return False\n            \n",
        "inputs": [
            [
                [
                    [
                        1
                    ],
                    [
                        2
                    ],
                    [
                        3
                    ],
                    [],
                    [],
                    []
                ]
            ]
        ],
        "outputs": [
            [
                false
            ]
        ],
        "starter_code": "\nclass Solution:\n    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                17
            ],
            [
                "Function Body",
                2,
                17
            ],
            [
                "Function Body",
                3,
                11
            ],
            [
                "If Statement Body",
                4,
                5
            ],
            [
                "For Loop Body",
                7,
                10
            ],
            [
                "If Statement Body",
                8,
                9
            ],
            [
                "If Statement Body",
                14,
                17
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n            \"\"\"Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.\n\nNote:\n\n\n       All numbers will be positive integers.\n       The solution set must not contain duplicate combinations.\n\n\nExample 1:\n\n\nInput: k = 3, n = 7\nOutput: [[1,2,4]]\n\n\nExample 2:\n\n\nInput: k = 3, n = 9\nOutput: [[1,2,6], [1,3,5], [2,3,4]]\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def combinationSum3(self, k, n):\n         \"\"\"\n         :type k: int\n         :type n: int\n         :rtype: List[List[int]]\n         \"\"\"\n         to_return = []\n         self.backtrack(to_return, [], k, n, 1)\n         return to_return\n     \n     def backtrack(self, to_return, temp, k, n, start):\n         total = sum(temp)\n         \n         if total > n:\n             return\n         if len(temp) == k and total == n:\n             to_return.append(temp[:])\n             return\n         \n         for i in range(start, 10):\n             temp.append(i)\n             self.backtrack(to_return, temp, k, n, i + 1)\n             temp.pop()",
        "inputs": [
            [
                9,
                45
            ],
            [
                3,
                9
            ],
            [
                3,
                7
            ]
        ],
        "outputs": [
            [
                [
                    [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9
                    ]
                ]
            ],
            [
                [
                    [
                        1,
                        2,
                        6
                    ],
                    [
                        1,
                        3,
                        5
                    ],
                    [
                        2,
                        3,
                        4
                    ]
                ]
            ],
            [
                [
                    [
                        1,
                        2,
                        4
                    ]
                ]
            ]
        ],
        "starter_code": "\nclass Solution:\n    def combinationSum3(self, k: int, n: int) -> List[List[int]]:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                24
            ],
            [
                "Function Body",
                2,
                10
            ],
            [
                "Function Body",
                12,
                24
            ],
            [
                "If Statement Body",
                15,
                16
            ],
            [
                "If Statement Body",
                17,
                19
            ],
            [
                "For Loop Body",
                21,
                24
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def maxSubarraySumCircular(self, A: List[int]) -> int:\n            \"\"\"Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.\nHere, a circular array means the end of the array connects to the beginning of the array.  (Formally, C[i] = A[i] when 0 <= i < A.length, and C[i+A.length] = C[i] when i >= 0.)\nAlso, a subarray may only include each element of the fixed buffer A at most once.  (Formally, for a subarray C[i], C[i+1], ..., C[j], there does not exist i <= k1, k2 <= j with k1 % A.length = k2 % A.length.)\n \n\nExample 1:\nInput: [1,-2,3,-2]\nOutput: 3\nExplanation: Subarray [3] has maximum sum 3\n\n\nExample 2:\nInput: [5,-3,5]\nOutput: 10\nExplanation: Subarray [5,5] has maximum sum 5 + 5 = 10\n\n\nExample 3:\nInput: [3,-1,2,-1]\nOutput: 4\nExplanation: Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4\n\n\nExample 4:\nInput: [3,-2,2,-3]\nOutput: 3\nExplanation: Subarray [3] and [3,-2,2] both have maximum sum 3\n\nExample 5:\nInput: [-2,-3,-1]\nOutput: -1\nExplanation: Subarray [-1] has maximum sum -1\n\n \nNote: \n\n-30000 <= A[i] <= 30000\n1 <= A.length <= 30000\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def maxSubarraySumCircular(self, A: List[int]) -> int:\n        N = len(A)\n        if(N==0):\n            return 0\n        curr_max = A[0]\n        global_max = A[0]\n        curr_min = A[0]\n        global_min = A[0]\n        flag = 0 \n        if(A[0]>=0):\n            flag=1\n    \n        for i in range(1, N):\n            if(A[i]>=0):\n                flag=1\n            if(curr_max >= 0):\n                curr_max = curr_max + A[i]    \n            else:\n                curr_max = A[i]\n            \n            if(curr_min >= 0):\n                curr_min = A[i]\n            else:\n                curr_min = curr_min + A[i] \n            \n            if(curr_max > global_max):\n                global_max = curr_max\n            if(curr_min < global_min):\n                global_min = curr_min\n        if(flag==0):\n            return max(A)\n        return max(global_max, sum(A) - global_min)",
        "inputs": [
            [
                [
                    -2,
                    3,
                    -2,
                    1
                ]
            ]
        ],
        "outputs": [
            [
                3
            ]
        ],
        "starter_code": "\nclass Solution:\n    def maxSubarraySumCircular(self, A: List[int]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                33
            ],
            [
                "Function Body",
                2,
                33
            ],
            [
                "If Statement Body",
                4,
                5
            ],
            [
                "If Statement Body",
                11,
                12
            ],
            [
                "For Loop Body",
                14,
                30
            ],
            [
                "If Statement Body",
                15,
                16
            ],
            [
                "If Statement Body",
                17,
                20
            ],
            [
                "If Statement Body",
                22,
                25
            ],
            [
                "If Statement Body",
                27,
                28
            ],
            [
                "If Statement Body",
                29,
                30
            ],
            [
                "If Statement Body",
                31,
                32
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n            \"\"\"You are given an integer array nums. The value of this array is defined as the sum of |nums[i]-nums[i+1]| for all 0 <= i < nums.length-1.\nYou are allowed to select any subarray of the given array and reverse it. You can perform this operation only once.\nFind maximum possible value of the final array.\n \nExample 1:\nInput: nums = [2,3,1,5,4]\nOutput: 10\nExplanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.\n\nExample 2:\nInput: nums = [2,4,9,24,2,1,10]\nOutput: 68\n\n \nConstraints:\n\n1 <= nums.length <= 3*10^4\n-10^5 <= nums[i] <= 10^5\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        n = len(nums)\n        base = sum([abs(nums[i] - nums[i+1]) for i in range(n - 1)])\n        if (n <= 2):\n            return base\n        \n        #best = base\n        #for i in range(n-1):\n        #    for j in range(i+1, n):\n        #        guess = switch(nums, i, j, base)\n        #        if guess > best:\n        #            best = guess\n        \n        inds = sorted(list(range(n)), key=lambda x: nums[x])\n        return base + max(options(inds, nums))\n        \n    \ndef switch(nums, i, j, base=0):\n    i_inc = ((abs(nums[j] - nums[i-1]) - abs(nums[i] - nums[i-1])) if (i > 0) else 0)\n    j_inc = ((abs(nums[j+1] - nums[i]) - abs(nums[j+1] - nums[j])) if (j < len(nums) - 1) else 0)\n    return base + i_inc + j_inc\n    \n    \n\ndef options(inds, nums):\n    a,b = findRange(inds)\n    d,c = findRange(inds[::-1])\n    yield 0\n    yield 2 * (nums[c] - nums[b])\n\n    i = max(a, b)\n    j = max(c, d)\n    n = len(nums)\n    yield switch(nums, i, n-1)\n    yield switch(nums, j, n-1)\n    \n    yield switch(nums, 0, i-1)\n    yield switch(nums, 0, j-1)\n    \n    \n    \n    \n\ndef findRange(inds):\n    seen = set()\n    for i, idx in enumerate(inds):\n        if (idx + 1) in seen or (idx - 1) in seen:\n            return (idx + 1, idx) if (idx + 1) in seen else (idx-1, idx)\n        seen.add(idx)\n        \n",
        "inputs": [
            [
                [
                    2,
                    3,
                    1,
                    5,
                    4
                ]
            ]
        ],
        "outputs": [
            [
                10
            ]
        ],
        "starter_code": "\nclass Solution:\n    def maxValueAfterReverse(self, nums: List[int]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                16
            ],
            [
                "Function Body",
                2,
                16
            ],
            [
                "List Comprehension",
                4,
                4
            ],
            [
                "If Statement Body",
                5,
                6
            ],
            [
                "Lambda Expression",
                15,
                15
            ],
            [
                "Function Body",
                19,
                22
            ],
            [
                "Function Body",
                26,
                39
            ],
            [
                "Function Body",
                45,
                50
            ],
            [
                "For Loop Body",
                47,
                50
            ],
            [
                "If Statement Body",
                48,
                49
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def leastOpsExpressTarget(self, x: int, target: int) -> int:\n            \"\"\"Given a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x ... where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /).  For example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3.\nWhen writing such an expression, we adhere to the following conventions:\n\nThe division operator (/) returns rational numbers.\nThere are no parentheses placed anywhere.\nWe use the usual order of operations: multiplication and division happens before addition and subtraction.\nIt's not allowed to use the unary negation operator (-).  For example, \"x - x\" is a valid expression as it only uses subtraction, but \"-x + x\" is not because it uses negation.\n\nWe would like to write an expression with the least number of operators such that the expression equals the given target.  Return the least number of operators used.\n \n\nExample 1:\nInput: x = 3, target = 19\nOutput: 5\nExplanation: 3 * 3 + 3 * 3 + 3 / 3.  The expression contains 5 operations.\n\nExample 2:\n\nInput: x = 5, target = 501\nOutput: 8\nExplanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.  The expression contains 8 operations.\n\n\nExample 3:\nInput: x = 100, target = 100000000\nOutput: 3\nExplanation: 100 * 100 * 100 * 100.  The expression contains 3 operations.\n \n\n\n\nNote:\n\n2 <= x <= 100\n1 <= target <= 2 * 10^8\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def leastOpsExpressTarget(self, x: int, target: int) -> int:\n        def dp(i, j):\n            if i==0: return 2*j\n            # if j==0: return 0\n            if j==1: return 2\n            if (i, j) in memo: return memo[(i, j)]\n            base = x**i\n            q, r = divmod(j, base)\n            if r==0: return q*i\n            memo[(i, j)]=min(q*i+dp(i-1, r), (q+1)*i+dp(i-1, base-r))\n            return memo[(i, j)]\n        \n        memo = {}\n        return dp(ceil(log(target, x)), target)-1",
        "inputs": [
            [
                3,
                19
            ]
        ],
        "outputs": [
            [
                5
            ]
        ],
        "starter_code": "\nclass Solution:\n    def leastOpsExpressTarget(self, x: int, target: int) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                15
            ],
            [
                "Function Body",
                2,
                15
            ],
            [
                "Function Body",
                3,
                12
            ],
            [
                "If Statement Body",
                4,
                4
            ],
            [
                "If Statement Body",
                6,
                6
            ],
            [
                "If Statement Body",
                7,
                7
            ],
            [
                "If Statement Body",
                10,
                10
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def balancedString(self, s: str) -> int:\n            \"\"\"You are given a string containing only 4 kinds of characters 'Q', 'W', 'E' and 'R'.\nA string is said to be balanced if each of its characters appears n/4 times where n is the length of the string.\nReturn the minimum length of the substring that can be replaced with any other string of the same length to make the original string s balanced.\nReturn 0 if the string is already balanced.\n \nExample 1:\nInput: s = \"QWER\"\nOutput: 0\nExplanation: s is already balanced.\nExample 2:\nInput: s = \"QQWE\"\nOutput: 1\nExplanation: We need to replace a 'Q' to 'R', so that \"RQWE\" (or \"QRWE\") is balanced.\n\nExample 3:\nInput: s = \"QQQW\"\nOutput: 2\nExplanation: We can replace the first \"QQ\" to \"ER\". \n\nExample 4:\nInput: s = \"QQQQ\"\nOutput: 3\nExplanation: We can replace the last 3 'Q' to make s = \"QWER\".\n\n \nConstraints:\n\n1 <= s.length <= 10^5\ns.length is a multiple of 4\ns contains only 'Q', 'W', 'E' and 'R'.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def balancedString(self, s: str) -> int:\n        # minimum window so that outside is possible\n        if len(s) //4 != len(s) / 4: return -1 \n        ans, lb, n_cnt = len(s), 0, collections.Counter(s)\n\n        i = 0\n        while i < len(s): \n            n_cnt[s[i]] -= 1     \n            while lb < len(s) and all(len(s) / 4 >= n_cnt[c] for c in 'QWER'): \n                ans = min(ans, abs(i - lb + 1))\n                if ans == 0: return 0\n                n_cnt[s[lb]] += 1\n                lb += 1\n                # here is actually a swap? \n            if lb > i: \n                i, lb = lb, i\n            i +=1\n\n        return ans\n                \n            \n            \n        \n            \n            \n",
        "inputs": [
            [
                "\"QWER\""
            ]
        ],
        "outputs": [
            [
                0
            ]
        ],
        "starter_code": "\nclass Solution:\n    def balancedString(self, s: str) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                20
            ],
            [
                "Function Body",
                2,
                20
            ],
            [
                "If Statement Body",
                4,
                4
            ],
            [
                "While Loop Body",
                8,
                18
            ],
            [
                "While Loop Body",
                10,
                14
            ],
            [
                "Generator Expression",
                10,
                10
            ],
            [
                "If Statement Body",
                12,
                12
            ],
            [
                "If Statement Body",
                16,
                17
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def angleClock(self, hour: int, minutes: int) -> float:\n            \"\"\"Given two numbers, hour and minutes. Return the smaller angle (in degrees) formed between the hour and the minute hand.\n \nExample 1:\n\nInput: hour = 12, minutes = 30\nOutput: 165\n\nExample 2:\n\nInput: hour = 3, minutes = 30\nOutput: 75\n\nExample 3:\n\nInput: hour = 3, minutes = 15\nOutput: 7.5\n\nExample 4:\nInput: hour = 4, minutes = 50\nOutput: 155\n\nExample 5:\nInput: hour = 12, minutes = 0\nOutput: 0\n\n \nConstraints:\n\n1 <= hour <= 12\n0 <= minutes <= 59\nAnswers within 10^-5 of the actual value will be accepted as correct.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def angleClock(self, hour: int, minutes: int) -> float:\n        hour_angle = hour*30+(minutes/12)*6\n        if hour_angle > 360:\n            hour_angle -= 360\n        min_angle = (minutes/5)*30\n        if min_angle > 360:\n            min_angle -= 360\n            \n        diff = abs(hour_angle-min_angle)\n        return diff if diff <= 360-diff else 360-diff",
        "inputs": [
            [
                12,
                30
            ]
        ],
        "outputs": [
            [
                165.0
            ]
        ],
        "starter_code": "\nclass Solution:\n    def angleClock(self, hour: int, minutes: int) -> float:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                11
            ],
            [
                "Function Body",
                2,
                11
            ],
            [
                "If Statement Body",
                4,
                5
            ],
            [
                "If Statement Body",
                7,
                8
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def longestDupSubstring(self, S: str) -> str:\n            \"\"\"Given a string S, consider all duplicated substrings: (contiguous) substrings of S that occur 2 or more times.  (The occurrences may overlap.)\nReturn any duplicated substring that has the longest possible length.  (If S does not have a duplicated substring, the answer is \"\".)\n \nExample 1:\nInput: \"banana\"\nOutput: \"ana\"\n\nExample 2:\nInput: \"abcd\"\nOutput: \"\"\n\n \nNote:\n\n2 <= S.length <= 10^5\nS consists of lowercase English letters.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def longestDupSubstring(self, S):\n        nums, N = [ord(c) - ord('a') for c in S], len(S)\n        BASE, MOD = 26, 2**32\n        def check(L):\n            cur_hash, seen = 0, set()\n            for val in nums[:L]:\n                cur_hash = (cur_hash * BASE + val) % MOD\n            seen.add(cur_hash)\n            X = pow(BASE, L-1, MOD)\n            for idx, val in enumerate(nums[L:]):\n                cur_hash -= nums[idx] * X\n                cur_hash = (cur_hash * BASE + val) % MOD\n                if cur_hash in seen:\n                    return idx + 1\n                seen.add(cur_hash)\n            return -1\n        low, high = 1, N + 1\n        start = 0\n        while low < high:\n            mid = (low + high)//2\n            idx = check(mid)\n            if idx != -1:\n                low = mid + 1\n                start = idx\n            else:\n                high = mid\n        return S[start: start + low - 1]\n",
        "inputs": [
            [
                "\"banana\""
            ]
        ],
        "outputs": [
            [
                "\"ana\""
            ]
        ],
        "starter_code": "\nclass Solution:\n    def longestDupSubstring(self, S: str) -> str:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                28
            ],
            [
                "Function Body",
                2,
                28
            ],
            [
                "List Comprehension",
                3,
                3
            ],
            [
                "Function Body",
                5,
                17
            ],
            [
                "For Loop Body",
                7,
                8
            ],
            [
                "For Loop Body",
                11,
                16
            ],
            [
                "If Statement Body",
                14,
                15
            ],
            [
                "While Loop Body",
                20,
                27
            ],
            [
                "If Statement Body",
                23,
                27
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:\n            \"\"\"Given an array of digits, you can write numbers using each digits[i] as many times as we want.  For example, if digits = ['1','3','5'], we may write numbers such as '13', '551', and '1351315'.\nReturn the number of positive integers that can be generated that are less than or equal to a given integer n.\n \nExample 1:\nInput: digits = [\"1\",\"3\",\"5\",\"7\"], n = 100\nOutput: 20\nExplanation: \nThe 20 numbers that can be written are:\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\n\nExample 2:\nInput: digits = [\"1\",\"4\",\"9\"], n = 1000000000\nOutput: 29523\nExplanation: \nWe can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\nIn total, this is 29523 integers that can be written using the digits array.\n\nExample 3:\nInput: digits = [\"7\"], n = 8\nOutput: 1\n\n \nConstraints:\n\n1 <= digits.length <= 9\ndigits[i].length == 1\ndigits[i] is a digit from '1' to '9'.\nAll the values in digits are unique.\n1 <= n <= 109\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:\n        \n        count = 0\n        length = 1\n        n_str = str(n)\n        while length < len(n_str):\n            count+= len(digits)**length\n            length+=1\n\n        digits_sorted = sorted(digits)\n\n\n        ## now length should equal to len(n), we compare the number with same length\n        current_digit = 0\n        while current_digit < length:\n            for digit in digits_sorted:\n                next_round = False\n                if digit < n_str[current_digit]:\n                    count+=len(digits)**(length-current_digit-1)\n                elif digit > n_str[current_digit]:\n                    return count\n                else:\n                    if current_digit == length-1:\n                        return count+1\n                    else: \n                        current_digit+=1\n                        next_round = True\n                        break\n            if not next_round:\n                return count\n\n        return count\n        \n",
        "inputs": [
            [
                [
                    "\"1\"",
                    "\"3\"",
                    "\"5\"",
                    "\"7\""
                ],
                100
            ]
        ],
        "outputs": [
            [
                84
            ]
        ],
        "starter_code": "\nclass Solution:\n    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                33
            ],
            [
                "Function Body",
                2,
                33
            ],
            [
                "While Loop Body",
                7,
                9
            ],
            [
                "While Loop Body",
                16,
                31
            ],
            [
                "For Loop Body",
                17,
                29
            ],
            [
                "If Statement Body",
                19,
                29
            ],
            [
                "If Statement Body",
                21,
                29
            ],
            [
                "If Statement Body",
                24,
                29
            ],
            [
                "If Statement Body",
                30,
                31
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def countOrders(self, n: int) -> int:\n            \"\"\"Given n orders, each order consist in pickup and delivery services. \nCount all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i). \nSince the answer may be too large, return it modulo 10^9 + 7.\n \nExample 1:\nInput: n = 1\nOutput: 1\nExplanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.\n\nExample 2:\nInput: n = 2\nOutput: 6\nExplanation: All possible orders: \n(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).\nThis is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.\n\nExample 3:\nInput: n = 3\nOutput: 90\n\n \nConstraints:\n\n1 <= n <= 500\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def countOrders(self, n: int) -> int:\n        \n        if n == 1:\n            return 1\n        \n        \n        p = (n-1)*2+1\n        \n        dp = [0 for i in range(n+1)]\n        dp[1] = 1\n        M= 10**9+7\n        for i in range(2,n+1):\n            \n            p = (i-1)*2+1\n            \n            dp[i] = (dp[i-1]%M * ((p*(p+1))//2)%M)%M\n        \n        return dp[n]\n",
        "inputs": [
            [
                1
            ]
        ],
        "outputs": [
            [
                1
            ]
        ],
        "starter_code": "\nclass Solution:\n    def countOrders(self, n: int) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                19
            ],
            [
                "Function Body",
                2,
                19
            ],
            [
                "If Statement Body",
                4,
                5
            ],
            [
                "List Comprehension",
                10,
                10
            ],
            [
                "For Loop Body",
                13,
                17
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def minScoreTriangulation(self, A: List[int]) -> int:\n            \"\"\"Given N, consider a convex N-sided polygon with vertices labelled A[0], A[i], ..., A[N-1] in clockwise order.\nSuppose you triangulate the polygon into N-2 triangles.  For each triangle, the value of that triangle is the product of the labels of the vertices, and the total score of the triangulation is the sum of these values over all N-2 triangles in the triangulation.\nReturn the smallest possible total score that you can achieve with some triangulation of the polygon.\n \n\n\n\nExample 1:\nInput: [1,2,3]\nOutput: 6\nExplanation: The polygon is already triangulated, and the score of the only triangle is 6.\n\n\nExample 2:\n\nInput: [3,7,4,5]\nOutput: 144\nExplanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.  The minimum score is 144.\n\n\nExample 3:\nInput: [1,3,1,4,1,5]\nOutput: 13\nExplanation: The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.\n\n \nNote:\n\n3 <= A.length <= 50\n1 <= A[i] <= 100\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def minScoreTriangulation(self, A: List[int]) -> int:\n        N = len(A)\n        dp = [[0]*N for _ in range(N)]\n        \n        for i in range(N-2, -1, -1):\n            for j in range(i+2, N):\n                dp[i][j] = min(dp[i][k]+dp[k][j]+A[i]*A[j]*A[k] for k in range(i+1, j))\n                \n        return dp[0][-1]\n                    \n                \n",
        "inputs": [
            [
                [
                    1,
                    2,
                    3
                ]
            ]
        ],
        "outputs": [
            [
                6
            ]
        ],
        "starter_code": "\nclass Solution:\n    def minScoreTriangulation(self, A: List[int]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                10
            ],
            [
                "Function Body",
                2,
                10
            ],
            [
                "List Comprehension",
                4,
                4
            ],
            [
                "For Loop Body",
                6,
                8
            ],
            [
                "For Loop Body",
                7,
                8
            ],
            [
                "Generator Expression",
                8,
                8
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n            \"\"\"Given an unsorted array of integers, find the length of the longest consecutive elements sequence.\n\nYour algorithm should run in O(n) complexity.\n\nExample:\n\n\nInput: [100, 4, 200, 1, 3, 2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def longestConsecutive(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         longest_streak = 0\n         num_set = set(nums)\n         for num in num_set:\n             if num - 1 not in num_set:\n                 current_num = num\n                 current_streak = 1\n                 \n                 while current_num + 1 in num_set:\n                     current_num += 1\n                     current_streak += 1\n                     \n                 longest_streak = max(longest_streak, current_streak)\n         return longest_streak",
        "inputs": [
            [
                [
                    100,
                    4,
                    200,
                    1,
                    3,
                    2
                ]
            ]
        ],
        "outputs": [
            [
                4
            ]
        ],
        "starter_code": "\nclass Solution:\n    def longestConsecutive(self, nums: List[int]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                19
            ],
            [
                "Function Body",
                2,
                19
            ],
            [
                "For Loop Body",
                9,
                18
            ],
            [
                "If Statement Body",
                10,
                18
            ],
            [
                "While Loop Body",
                14,
                16
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def maxArea(self, height: List[int]) -> int:\n            \"\"\"Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n\nNote: You may not slant the container and n is at least 2.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def maxArea(self, height):\n         \"\"\"\n         :type height: List[int]\n         :rtype: int\n         \"\"\"\n         # l = []\n         # maxH = 0\n         # for i in range(len(height)-1, -1, -1):\n         #     if height[i] > maxH:\n         #         maxH = height[i]\n         #         l.append((i, maxH))\n         # maxArea = 0\n         # for i in range(len(height)):\n         #     for jl in l:\n         #         if i >= jl[0]:\n         #             break\n         #         area = (jl[0] - i) * min(height[i], jl[1])\n         #         if area > maxArea:\n         #             maxArea = area\n         # return maxArea\n         \n         left = 0\n         right = len(height) - 1\n         if height[left] > height[right]:\n             minH = height[right]\n             minIndex = right\n         else:\n             minH = height[left]\n             minIndex = left\n         area = (right - left) * minH\n         maxArea = area\n         \n         while left != right:\n             if minIndex == left:\n                 while left != right:\n                     left += 1\n                     if height[left] > minH:\n                         if height[left] > height[right]:\n                             minH = height[right]\n                             minIndex = right\n                         else:\n                             minH = height[left]\n                             minIndex = left\n                         break\n                 area = (right - left) * minH\n             else:\n                 while left != right:\n                     right -= 1\n                     if height[right] > minH:\n                         if height[right] > height[left]:\n                             minH = height[left]\n                             minIndex = left\n                         else:\n                             minH = height[right]\n                             minIndex = right\n                         break\n                 area = (right - left) * minH\n             if area > maxArea:\n                 maxArea = area\n         return maxArea",
        "inputs": [
            [
                [
                    1,
                    8,
                    6,
                    2,
                    5,
                    4,
                    8,
                    3,
                    7
                ]
            ]
        ],
        "outputs": [
            [
                49
            ]
        ],
        "starter_code": "\nclass Solution:\n    def maxArea(self, height: List[int]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                61
            ],
            [
                "Function Body",
                2,
                61
            ],
            [
                "If Statement Body",
                25,
                30
            ],
            [
                "While Loop Body",
                34,
                60
            ],
            [
                "If Statement Body",
                35,
                58
            ],
            [
                "While Loop Body",
                36,
                45
            ],
            [
                "If Statement Body",
                38,
                45
            ],
            [
                "If Statement Body",
                39,
                44
            ],
            [
                "While Loop Body",
                48,
                57
            ],
            [
                "If Statement Body",
                50,
                57
            ],
            [
                "If Statement Body",
                51,
                56
            ],
            [
                "If Statement Body",
                59,
                60
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def decodeAtIndex(self, S: str, K: int) -> str:\n            \"\"\"An encoded string S is given.  To find and write the decoded string to a tape, the encoded string is read one character at a time and the following steps are taken:\n\nIf the character read is a letter, that letter is written onto the tape.\nIf the character read is a digit (say d), the entire current tape is repeatedly written d-1 more times in total.\n\nNow for some encoded string S, and an index K, find and return the K-th letter (1 indexed) in the decoded string.\n \n\nExample 1:\nInput: S = \"leet2code3\", K = 10\nOutput: \"o\"\nExplanation: \nThe decoded string is \"leetleetcodeleetleetcodeleetleetcode\".\nThe 10th letter in the string is \"o\".\n\n\nExample 2:\nInput: S = \"ha22\", K = 5\nOutput: \"h\"\nExplanation: \nThe decoded string is \"hahahaha\".  The 5th letter is \"h\".\n\n\nExample 3:\nInput: S = \"a2345678999999999999999\", K = 1\nOutput: \"a\"\nExplanation: \nThe decoded string is \"a\" repeated 8301530446056247680 times.  The 1st letter is \"a\".\n\n\n\n\n \nConstraints:\n\n2 <= S.length <= 100\nS will only contain lowercase letters and digits 2 through 9.\nS starts with a letter.\n1 <= K <= 10^9\nIt's guaranteed that K is less than or equal to the length of the decoded string.\nThe decoded string is guaranteed to have less than 2^63 letters.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def decodeAtIndex(self, S: str, K: int) -> str:\n        size = 0\n        # Find size = length of decoded string\n        for c in S:\n            if c.isdigit():\n                size *= int(c)\n            else:\n                size += 1\n        for c in reversed(S):\n            K %= size\n            if K == 0 and c.isalpha():\n                return c\n\n            if c.isdigit():\n                size /= int(c)\n            else:\n                size -= 1\n",
        "inputs": [
            [
                "\"leet2code3\"",
                10
            ]
        ],
        "outputs": [
            [
                "\"o\""
            ]
        ],
        "starter_code": "\nclass Solution:\n    def decodeAtIndex(self, S: str, K: int) -> str:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                18
            ],
            [
                "Function Body",
                2,
                18
            ],
            [
                "For Loop Body",
                5,
                9
            ],
            [
                "If Statement Body",
                6,
                9
            ],
            [
                "For Loop Body",
                10,
                18
            ],
            [
                "If Statement Body",
                12,
                13
            ],
            [
                "If Statement Body",
                15,
                18
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n            \"\"\"Given an array of integers A, consider all non-empty subsequences of A.\nFor any sequence S, let the width of S be the difference between the maximum and minimum element of S.\nReturn the sum of the widths of all subsequences of A. \nAs the answer may be very large, return the answer modulo 10^9 + 7.\n\n \nExample 1:\nInput: [2,1,3]\nOutput: 6\nExplanation:\nSubsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\nThe sum of these widths is 6.\n\n \nNote:\n\n1 <= A.length <= 20000\n1 <= A[i] <= 20000\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        A.sort()\n        ret, mod, p = 0, 10 ** 9 + 7, 1\n        for i in range(len(A)): \n            ret += (A[i] - A[len(A) - i - 1]) * p % mod\n            p = (p << 1) % mod\n        return ret % mod",
        "inputs": [
            [
                [
                    1,
                    2,
                    3
                ]
            ]
        ],
        "outputs": [
            [
                6
            ]
        ],
        "starter_code": "\nclass Solution:\n    def sumSubseqWidths(self, A: List[int]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                8
            ],
            [
                "Function Body",
                2,
                8
            ],
            [
                "For Loop Body",
                5,
                7
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def sumSubarrayMins(self, A: List[int]) -> int:\n            \"\"\"Given an array of integers A, find the sum of min(B), where B ranges over every (contiguous) subarray of A.\nSince the answer may be large, return the answer modulo 10^9 + 7.\n \nExample 1:\nInput: [3,1,2,4]\nOutput: 17\nExplanation: Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.  Sum is 17.\n \nNote:\n\n1 <= A.length <= 30000\n1 <= A[i] <= 30000\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def sumSubarrayMins(self, A: List[int]) -> int:\n        stack = []\n        result = 0\n        A = [0] + A + [0]\n\n        for i, x in enumerate(A):\n            while stack and x < A[stack[-1]]:\n                j = stack.pop()\n                result += A[j] * (i - j) * (j - stack[-1])\n            stack.append(i)\n\n        return result % (10**9 + 7)\n",
        "inputs": [
            [
                [
                    3,
                    1,
                    2,
                    4,
                    0
                ]
            ]
        ],
        "outputs": [
            [
                17
            ]
        ],
        "starter_code": "\nclass Solution:\n    def sumSubarrayMins(self, A: List[int]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                13
            ],
            [
                "Function Body",
                2,
                13
            ],
            [
                "For Loop Body",
                7,
                11
            ],
            [
                "While Loop Body",
                8,
                10
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n            \"\"\"Some people will make friend requests. The list of their ages is given and ages[i] is the age of the ith person. \nPerson A will NOT friend request person B (B != A) if any of the following conditions are true:\n\nage[B] <= 0.5 * age[A] + 7\nage[B] > age[A]\nage[B] > 100 && age[A] < 100\n\nOtherwise, A will friend request B.\nNote that if A requests B, B does not necessarily request A.  Also, people will not friend request themselves.\nHow many total friend requests are made?\nExample 1:\nInput: [16,16]\nOutput: 2\nExplanation: 2 people friend request each other.\n\nExample 2:\nInput: [16,17,18]\nOutput: 2\nExplanation: Friend requests are made 17 -> 16, 18 -> 17.\nExample 3:\nInput: [20,30,100,110,120]\nOutput: 3\nExplanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.\n\n \nNotes:\n\n1 <= ages.length <= 20000.\n1 <= ages[i] <= 120.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        count = [0]*121\n        s = [0]*121\n        for a in ages:\n            count[a]+=1\n        for i in range(1,121):\n            s[i] = s[i-1]+count[i]\n        res = 0\n        for i in range(15,121):\n            edge = i//2+7\n            num = s[i]-s[edge]\n            res+=count[i]*num-count[i]\n        return res",
        "inputs": [
            [
                [
                    16,
                    16
                ]
            ]
        ],
        "outputs": [
            [
                2
            ]
        ],
        "starter_code": "\nclass Solution:\n    def numFriendRequests(self, ages: List[int]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                14
            ],
            [
                "Function Body",
                2,
                14
            ],
            [
                "For Loop Body",
                5,
                6
            ],
            [
                "For Loop Body",
                7,
                8
            ],
            [
                "For Loop Body",
                10,
                13
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def largestSumOfAverages(self, A: List[int], K: int) -> float:\n            \"\"\"We partition a row of numbers A into at most K adjacent (non-empty) groups, then our score is the sum of the average of each group. What is the largest score we can achieve?\nNote that our partition must use every number in A, and that scores are not necessarily integers.\nExample:\nInput: \nA = [9,1,2,3,9]\nK = 3\nOutput: 20\nExplanation: \nThe best choice is to partition A into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned A into [9, 1], [2], [3, 9], for example.\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\n\n \nNote: \n\n1 <= A.length <= 100.\n1 <= A[i] <= 10000.\n1 <= K <= A.length.\nAnswers within 10^-6 of the correct answer will be accepted as correct.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def largestSumOfAverages(self, A: List[int], K: int) -> float:\n        #if not A: return 0\n        #if len(A)==1: return A[0]\n        # Real Run Time is a little bit UNSTABLE\n        N = len(A)\n        P = [0] * (N+1)\n        for i in range(1,N+1): P[i] = P[i-1] + A[i-1]\n        \n        # Table[a] = optimal for A[a:] with k subsets, initially k=1\n        Table = [(P[N]-P[i])/(N-i) for i in range(N)]\n        for k in range(2, K+1):\n            for i in range(K-k,N-k+1):\n                Table[i] = max((P[j]-P[i])/(j-i) + Table[j] for j in range(i+1,N-k+2))\n        \n        return Table[0]",
        "inputs": [
            [
                [
                    9,
                    1,
                    2,
                    3,
                    9
                ],
                3
            ]
        ],
        "outputs": [
            [
                20.0
            ]
        ],
        "starter_code": "\nclass Solution:\n    def largestSumOfAverages(self, A: List[int], K: int) -> float:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                16
            ],
            [
                "Function Body",
                2,
                16
            ],
            [
                "For Loop Body",
                8,
                8
            ],
            [
                "List Comprehension",
                11,
                11
            ],
            [
                "For Loop Body",
                12,
                14
            ],
            [
                "For Loop Body",
                13,
                14
            ],
            [
                "Generator Expression",
                14,
                14
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\ndef b91decode(strng):\n\t    \"\"\"[BasE91](http://base91.sourceforge.net/) is a method for encoding binary as ASCII characters. It is more efficient than Base64 and needs 91 characters to represent the encoded data.\n\nThe following ASCII charakters are used:\n\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n    '!#$%&()*+,./:;<=>?@[]^_`{|}~\"'\n    \nCreate two functions that encode strings to basE91 string and decodes the other way round. \n\n    b91encode('test') = 'fPNKd'\n    b91decode('fPNKd') = 'test'\n    \n    b91decode('>OwJh>Io0Tv!8PE') = 'Hello World!'\n    b91encode('Hello World!') = '>OwJh>Io0Tv!8PE'\n    \nInput strings are valid.\n    \"\"\"\n",
        "canonical_solution": "from math import ceil\ndef b91decode(strng):\n    ret = ''\n    base91_alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '!', '#', '$',\n    '%', '&', '(', ')', '*', '+', ',', '.', '/', ':', ';', '<', '=',\n    '>', '?', '@', '[', ']', '^', '_', '`', '{', '|', '}', '~', '\"']\n    strng_arr = [strng[i:i+2] for i in range(0, len(strng), 2)]\n    origin_bin = ''\n    for str in strng_arr:\n        num = 0\n        if len(str) == 1:\n            num += base91_alphabet.index(str[0])\n            origin_bin = bin(num)[2:] + origin_bin\n        else:\n            num += base91_alphabet.index(str[0])\n            num += base91_alphabet.index(str[1])*91\n            if num & 8191 > 88:\n                origin_bin = bin(num)[2:].zfill(13) + origin_bin\n            else:\n                origin_bin = bin(num)[2:].zfill(14) + origin_bin\n    origin_bin = origin_bin.zfill(int(ceil(len(origin_bin)/8.0))*8)\n    ret = [origin_bin[i:i+8] for i in range(0, len(origin_bin), 8)]\n    return ''.join(map(lambda x:chr(int(x, 2)), ret))[::-1]\n        \n            \n            \n    \ndef b91encode(strng):\n    base91_alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '!', '#', '$',\n    '%', '&', '(', ')', '*', '+', ',', '.', '/', ':', ';', '<', '=',\n    '>', '?', '@', '[', ']', '^', '_', '`', '{', '|', '}', '~', '\"']\n    ret = ''\n    strng_bin = map(lambda x:bin(ord(x))[2:].zfill(8), list(strng))\n    strng_bin_r = ''\n    for i in range(len(strng_bin)):\n        strng_bin_r = strng_bin[i] + strng_bin_r\n    strng_bin_r = strng_bin_r[::-1]\n    index = 0\n    while index < len(strng_bin_r):\n        num = int(strng_bin_r[index:index+13][::-1], 2)\n        if num > 88:\n            index += 13\n            ret += base91_alphabet[num%91] + base91_alphabet[num/91]\n        else:\n            num = int(strng_bin_r[index:index+14][::-1], 2)\n            index += 14\n            ret += base91_alphabet[num%91] + base91_alphabet[num/91]\n    ret = ret[0:len(ret)-2]\n    if num > 90:\n        ret += base91_alphabet[num%91] + base91_alphabet[num/91]\n    else:\n        ret += base91_alphabet[num%91]\n    return ret",
        "inputs": [
            [
                "\">OwJh>Io0Tv!8PE\""
            ],
            [
                "\"fPNKd\""
            ]
        ],
        "outputs": [
            [
                "\"Hello World!\""
            ],
            [
                "\"test\""
            ]
        ],
        "starter_code": "\ndef b91decode(strng):\n\t",
        "scope": [
            [
                "Function Body",
                2,
                27
            ],
            [
                "List Comprehension",
                11,
                11
            ],
            [
                "For Loop Body",
                13,
                24
            ],
            [
                "If Statement Body",
                15,
                24
            ],
            [
                "If Statement Body",
                21,
                24
            ],
            [
                "List Comprehension",
                26,
                26
            ],
            [
                "Lambda Expression",
                27,
                27
            ],
            [
                "Function Body",
                32,
                61
            ],
            [
                "Lambda Expression",
                41,
                41
            ],
            [
                "For Loop Body",
                43,
                44
            ],
            [
                "While Loop Body",
                47,
                55
            ],
            [
                "If Statement Body",
                49,
                55
            ],
            [
                "If Statement Body",
                57,
                60
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def minKBitFlips(self, A: List[int], K: int) -> int:\n            \"\"\"In an array A containing only 0s and 1s, a K-bit flip consists of choosing a (contiguous) subarray of length K and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.\nReturn the minimum number of K-bit flips required so that there is no 0 in the array.  If it is not possible, return -1.\n \nExample 1:\nInput: A = [0,1,0], K = 1\nOutput: 2\nExplanation: Flip A[0], then flip A[2].\n\n\nExample 2:\nInput: A = [1,1,0], K = 2\nOutput: -1\nExplanation: No matter how we flip subarrays of size 2, we can't make the array become [1,1,1].\n\n\nExample 3:\nInput: A = [0,0,0,1,0,1,1,0], K = 3\nOutput: 3\nExplanation:\nFlip A[0],A[1],A[2]: A becomes [1,1,1,1,0,1,1,0]\nFlip A[4],A[5],A[6]: A becomes [1,1,1,1,1,0,0,0]\nFlip A[5],A[6],A[7]: A becomes [1,1,1,1,1,1,1,1]\n\n \n\n\nNote:\n\n1 <= A.length <= 30000\n1 <= K <= A.length\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def minKBitFlips(self, A: List[int], K: int) -> int:\n        n = len(A)\n        record = [0] * n\n        flip = 0\n        ans = 0\n        for i in range(n):\n            if i >= K: flip -= record[i-K]\n            if A[i] == (flip % 2):\n                if i > n - K: return -1\n                ans += 1\n                flip += 1\n                record[i] = 1\n        return ans\n",
        "inputs": [
            [
                [
                    0,
                    1,
                    0
                ],
                1
            ]
        ],
        "outputs": [
            [
                2
            ]
        ],
        "starter_code": "\nclass Solution:\n    def minKBitFlips(self, A: List[int], K: int) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                14
            ],
            [
                "Function Body",
                2,
                14
            ],
            [
                "For Loop Body",
                7,
                13
            ],
            [
                "If Statement Body",
                8,
                8
            ],
            [
                "If Statement Body",
                9,
                13
            ],
            [
                "If Statement Body",
                10,
                10
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def arrayNesting(self, nums: List[int]) -> int:\n            \"\"\"A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.\n\nSuppose the first element in S starts with the selection of element A[i] of index = i, the next element in S should be A[A[i]], and then A[A[A[i]]]… By that analogy, we stop adding right before a duplicate element occurs in S.\n\nExample 1:\n\nInput: A = [5,4,0,3,1,6,2]\nOutput: 4\nExplanation: \nA[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.\n\nOne of the longest S[K]:\nS[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}\n\n\nNote:\n\nN is an integer within the range [1, 20,000].\nThe elements of A are all distinct.\nEach element of A is an integer within the range [0, N-1].\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def arrayNesting(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         best = 0\n         n = len(nums)\n         p = []\n         for i in range(len(nums)):\n             j = i\n             current = 0\n             while nums[j] != -1:\n                 current += 1\n                 n -= 1\n                 k = j\n                 j = nums[j]\n                 nums[k] = -1\n             best = max(best,current)\n             if n <= best:\n                 return best\n         return best\n",
        "inputs": [
            [
                [
                    5,
                    4,
                    0,
                    3,
                    1,
                    6,
                    2
                ]
            ]
        ],
        "outputs": [
            [
                4
            ]
        ],
        "starter_code": "\nclass Solution:\n    def arrayNesting(self, nums: List[int]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                22
            ],
            [
                "Function Body",
                2,
                22
            ],
            [
                "For Loop Body",
                10,
                21
            ],
            [
                "While Loop Body",
                13,
                18
            ],
            [
                "If Statement Body",
                20,
                21
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def unhappyFriends(self, n: int, preferences: List[List[int]], pairs: List[List[int]]) -> int:\n            \"\"\"You are given a list of preferences for n friends, where n is always even.\nFor each person i, preferences[i] contains a list of friends sorted in the order of preference. In other words, a friend earlier in the list is more preferred than a friend later in the list. Friends in each list are denoted by integers from 0 to n-1.\nAll the friends are divided into pairs. The pairings are given in a list pairs, where pairs[i] = [xi, yi] denotes xi is paired with yi and yi is paired with xi.\nHowever, this pairing may cause some of the friends to be unhappy. A friend x is unhappy if x is paired with y and there exists a friend u who is paired with v but:\n\nx prefers u over y, and\nu prefers x over v.\n\nReturn the number of unhappy friends.\n \nExample 1:\nInput: n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]\nOutput: 2\nExplanation:\nFriend 1 is unhappy because:\n- 1 is paired with 0 but prefers 3 over 0, and\n- 3 prefers 1 over 2.\nFriend 3 is unhappy because:\n- 3 is paired with 2 but prefers 1 over 2, and\n- 1 prefers 3 over 0.\nFriends 0 and 2 are happy.\n\nExample 2:\nInput: n = 2, preferences = [[1], [0]], pairs = [[1, 0]]\nOutput: 0\nExplanation: Both friends 0 and 1 are happy.\n\nExample 3:\nInput: n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]\nOutput: 4\n\n \nConstraints:\n\n2 <= n <= 500\nn is even.\npreferences.length == n\npreferences[i].length == n - 1\n0 <= preferences[i][j] <= n - 1\npreferences[i] does not contain i.\nAll values in preferences[i] are unique.\npairs.length == n/2\npairs[i].length == 2\nxi != yi\n0 <= xi, yi <= n - 1\nEach person is contained in exactly one pair.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def preferences_to_scores(self, preferences):\n        scores = {}\n        for u, up in enumerate(preferences):\n            for s, v in enumerate(up):\n                scores[(u, v)] = s\n        return scores\n    \n    def unhappy_friends(self, scores, a, b):\n        ret = set()\n        for ai, aa in enumerate(a):\n            af = a[1 - ai]\n            for bi, bb in enumerate(b):\n                bf = b[1 - bi]\n                if scores[(aa, bb)] < scores[(aa, af)] and scores[(bb, aa)] < scores[(bb, bf)]:\n                    ret.add(aa)\n                    ret.add(bb)\n        return ret\n    \n    def unhappyFriends(self, n: int, preferences: List[List[int]], pairs: List[List[int]]) -> int:\n        scores = self.preferences_to_scores(preferences)\n        ret = set()\n        for i, a in enumerate(pairs):\n            for j in range(i):\n                b = pairs[j]\n                ret |= self.unhappy_friends(scores, a, b)\n        return len(ret)\n",
        "inputs": [
            [
                4,
                [
                    [
                        1,
                        2,
                        3
                    ],
                    [
                        3,
                        2,
                        0
                    ],
                    [
                        3,
                        1,
                        0
                    ],
                    [
                        1,
                        2,
                        0
                    ],
                    [],
                    []
                ],
                [
                    [
                        0,
                        1
                    ],
                    [
                        2,
                        3
                    ],
                    [],
                    []
                ]
            ]
        ],
        "outputs": [
            [
                2
            ]
        ],
        "starter_code": "\nclass Solution:\n    def unhappyFriends(self, n: int, preferences: List[List[int]], pairs: List[List[int]]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                27
            ],
            [
                "Function Body",
                2,
                7
            ],
            [
                "For Loop Body",
                4,
                6
            ],
            [
                "For Loop Body",
                5,
                6
            ],
            [
                "Function Body",
                9,
                18
            ],
            [
                "For Loop Body",
                11,
                17
            ],
            [
                "For Loop Body",
                13,
                17
            ],
            [
                "If Statement Body",
                15,
                17
            ],
            [
                "Function Body",
                20,
                27
            ],
            [
                "For Loop Body",
                23,
                26
            ],
            [
                "For Loop Body",
                24,
                26
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n            \"\"\"Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n\n(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).\n\nFind the minimum element.\n\nYou may assume no duplicate exists in the array.\n\nExample 1:\n\n\nInput: [3,4,5,1,2] \nOutput: 1\n\n\nExample 2:\n\n\nInput: [4,5,6,7,0,1,2]\nOutput: 0\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def findMin(self, nums):\n         \"\"\"\n         :type nums: List[int]\n         :rtype: int\n         \"\"\"\n         if len(nums) <= 3:\n             return min(nums)\n         lo = 0\n         hi = len(nums) - 1\n         mid = (hi + lo) // 2\n         if nums[mid] < nums[mid-1] and nums[mid] < nums[mid+1]:\n             return nums[mid]\n         if nums[mid] > nums[lo] and nums[mid] > nums[hi]:\n             # pivot on the right side\n             return self.findMin(nums[mid:])\n         #elif nums[mid] < nums[lo] and nums[mid] < nums[hi]:\n         else:\n             #pivot on the left side\n             return self.findMin(nums[:mid+1])",
        "inputs": [
            [
                [
                    3,
                    4,
                    5,
                    1,
                    2
                ]
            ]
        ],
        "outputs": [
            [
                1
            ]
        ],
        "starter_code": "\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                20
            ],
            [
                "Function Body",
                2,
                20
            ],
            [
                "If Statement Body",
                7,
                8
            ],
            [
                "If Statement Body",
                12,
                13
            ],
            [
                "If Statement Body",
                14,
                20
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def minDifference(self, nums: List[int]) -> int:\n            \"\"\"Given an array nums, you are allowed to choose one element of nums and change it by any value in one move.\nReturn the minimum difference between the largest and smallest value of nums after perfoming at most 3 moves.\n \nExample 1:\nInput: nums = [5,3,2,4]\nOutput: 0\nExplanation: Change the array [5,3,2,4] to [2,2,2,2].\nThe difference between the maximum and minimum is 2-2 = 0.\nExample 2:\nInput: nums = [1,5,0,10,14]\nOutput: 1\nExplanation: Change the array [1,5,0,10,14] to [1,1,0,1,1]. \nThe difference between the maximum and minimum is 1-0 = 1.\n\nExample 3:\nInput: nums = [6,6,0,1,1,4,6]\nOutput: 2\n\nExample 4:\nInput: nums = [1,5,6,14,15]\nOutput: 1\n\n \nConstraints:\n\n1 <= nums.length <= 10^5\n-10^9 <= nums[i] <= 10^9\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        if len(nums) <= 4:\n            return 0\n        else:\n            # nums = sorted(nums)\n            nums.sort()\n            threeZero = nums[-1] - nums[3]\n            twoOne = nums[-2] - nums[2]\n            oneTwo = nums[-3] - nums[1]\n            zeroThree = nums[-4] - nums[0]\n            return min(threeZero,twoOne,oneTwo,zeroThree)",
        "inputs": [
            [
                [
                    2,
                    3,
                    4,
                    5
                ]
            ]
        ],
        "outputs": [
            [
                0
            ]
        ],
        "starter_code": "\nclass Solution:\n    def minDifference(self, nums: List[int]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                12
            ],
            [
                "Function Body",
                2,
                12
            ],
            [
                "If Statement Body",
                3,
                12
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def minSwaps(self, grid: List[List[int]]) -> int:\n            \"\"\"Given an n x n binary grid, in one step you can choose two adjacent rows of the grid and swap them.\nA grid is said to be valid if all the cells above the main diagonal are zeros.\nReturn the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.\nThe main diagonal of a grid is the diagonal that starts at cell (1, 1) and ends at cell (n, n).\n \nExample 1:\n\nInput: grid = [[0,0,1],[1,1,0],[1,0,0]]\nOutput: 3\n\nExample 2:\n\nInput: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]\nOutput: -1\nExplanation: All rows are similar, swaps have no effect on the grid.\n\nExample 3:\n\nInput: grid = [[1,0,0],[1,1,0],[1,1,1]]\nOutput: 0\n\n \nConstraints:\n\nn == grid.length\nn == grid[i].length\n1 <= n <= 200\ngrid[i][j] is 0 or 1\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def minSwaps(self, grid: List[List[int]]) -> int:\n        start=1\n        swap=0\n        n=len(grid)\n        zeros_ingrid=n-1\n        while zeros_ingrid>0:\n            swapped_grid=False\n            for i in range(len(grid)):\n                if sum(grid[i][start:])==0:\n                    swap+=i\n                    grid.remove(grid[i])\n                    swapped_grid=True\n                    zeros_ingrid-=1\n                    start+=1\n                    break\n            if not swapped_grid:\n                return -1\n        return swap\n                \n                    \n                \n                \n",
        "inputs": [
            [
                [
                    [
                        0,
                        0,
                        1
                    ],
                    [
                        1,
                        1,
                        0
                    ],
                    [
                        1,
                        0,
                        0
                    ],
                    [],
                    []
                ]
            ]
        ],
        "outputs": [
            [
                3
            ]
        ],
        "starter_code": "\nclass Solution:\n    def minSwaps(self, grid: List[List[int]]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                19
            ],
            [
                "Function Body",
                2,
                19
            ],
            [
                "While Loop Body",
                7,
                18
            ],
            [
                "For Loop Body",
                9,
                16
            ],
            [
                "If Statement Body",
                10,
                16
            ],
            [
                "If Statement Body",
                17,
                18
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def longestDecomposition(self, text: str) -> int:\n            \"\"\"Return the largest possible k such that there exists a_1, a_2, ..., a_k such that:\n\nEach a_i is a non-empty string;\nTheir concatenation a_1 + a_2 + ... + a_k is equal to text;\nFor all 1 <= i <= k,  a_i = a_{k+1 - i}.\n\n \nExample 1:\nInput: text = \"ghiabcdefhelloadamhelloabcdefghi\"\nOutput: 7\nExplanation: We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\".\n\nExample 2:\nInput: text = \"merchant\"\nOutput: 1\nExplanation: We can split the string on \"(merchant)\".\n\nExample 3:\nInput: text = \"antaprezatepzapreanta\"\nOutput: 11\nExplanation: We can split the string on \"(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)\".\n\nExample 4:\nInput: text = \"aaa\"\nOutput: 3\nExplanation: We can split the string on \"(a)(a)(a)\".\n\n \nConstraints:\n\ntext consists only of lowercase English characters.\n1 <= text.length <= 1000\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def longestDecomposition(self, text: str) -> int:\n        n = len(text)\n        splits = 0\n        leftstart, leftend = 0, 0\n        rightstart, rightend = n-1, n-1\n        while leftend<rightstart:\n            if text[leftstart:leftend+1] == text[rightstart:rightend+1]:\n                leftstart = leftend+1\n                leftend = leftstart\n                rightstart = rightstart-1\n                rightend = rightstart\n                splits+=2\n            else:\n                leftend+=1\n                rightstart-=1\n        return splits+1 if leftstart<=rightend else splits",
        "inputs": [
            [
                "\"ghiabcdefhelloadamhelloabcdefghi\""
            ]
        ],
        "outputs": [
            [
                7
            ]
        ],
        "starter_code": "\nclass Solution:\n    def longestDecomposition(self, text: str) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                17
            ],
            [
                "Function Body",
                2,
                17
            ],
            [
                "While Loop Body",
                7,
                16
            ],
            [
                "If Statement Body",
                8,
                16
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def numberOfArithmeticSlices(self, A: List[int]) -> int:\n            \"\"\"A sequence of number is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\n\nFor example, these are arithmetic sequence:\n1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9\n\nThe following sequence is not arithmetic. 1, 1, 2, 5, 7 \n\n\nA zero-indexed array A consisting of N numbers is given. A slice of that array is any pair of integers (P, Q) such that 0 \n\nA slice (P, Q) of array A is called arithmetic if the sequence:\n    A[P], A[p + 1], ..., A[Q - 1], A[Q] is arithmetic. In particular, this means that P + 1 < Q.\n\nThe function should return the number of arithmetic slices in the array A. \n\n\nExample:\n\nA = [1, 2, 3, 4]\n\nreturn: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def numberOfArithmeticSlices(self, A):\n         curr, sum = 0, 0\n         for i in range(2,len(A)):\n             if A[i]-A[i-1] == A[i-1]-A[i-2]:\n                 curr += 1\n                 sum += curr\n             else:\n                 curr = 0\n         return sum\n #         solution = 0\n #         connected = 1\n #         old_diff = None\n #         sequences = []\n #         if len(A) < 3:\n #             return 0\n         \n #         for index,num in enumerate(A):\n #             if index < len(A) - 1:\n #                 new_diff = num - A[index + 1]\n #             else:\n #                 new_diff = A[index - 1] - num\n #             if old_diff == new_diff:\n #                 if index == len(A) - 1 and connected >= 3:\n #                     connected += 1\n #                     sequences.append(connected)\n #                 connected += 1\n #             else:\n #                 old_diff = new_diff\n #                 if connected > 2:\n #                     sequences.append(connected)\n #                 connected = 1\n #         for sequence in sequences:\n #             prev = 0\n #             while sequence >= 2:\n #                 prev += 1\n #                 solution += prev\n #                 sequence -= 1\n #         return solution\n",
        "inputs": [
            [
                [
                    1,
                    2,
                    3,
                    4
                ]
            ]
        ],
        "outputs": [
            [
                3
            ]
        ],
        "starter_code": "\nclass Solution:\n    def numberOfArithmeticSlices(self, A: List[int]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                10
            ],
            [
                "Function Body",
                2,
                10
            ],
            [
                "For Loop Body",
                4,
                9
            ],
            [
                "If Statement Body",
                5,
                9
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n            \"\"\"Given a string s and a string t, check if s is subsequence of t.\n\n\n\nYou may assume that there is only lower case English letters in both s and t. t is potentially a very long (length ~= 500,000) string, and s is a short string (\n\n\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\n\n\nExample 1:\ns = \"abc\", t = \"ahbgdc\"\n\n\nReturn true.\n\n\nExample 2:\ns = \"axc\", t = \"ahbgdc\"\n\n\nReturn false.\n\n\nFollow up:\nIf there are lots of incoming S, say S1, S2, ... , Sk where k >= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?\n\nCredits:Special thanks to @pbrother for adding this problem and creating all test cases.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def isSubsequence(self, s, t):\n         \"\"\"\n         :type s: str\n         :type t: str\n         :rtype: bool\n         \"\"\"\n         if len(s) > len(t):\n             return False\n         for i in s:\n             if i in t:\n                 index = t.find(i)\n                 t = t[index + 1:]\n             else:\n                 return False\n         return True",
        "inputs": [
            [
                "\"abc\"",
                "\"ahbgdc\""
            ]
        ],
        "outputs": [
            [
                true
            ]
        ],
        "starter_code": "\nclass Solution:\n    def isSubsequence(self, s: str, t: str) -> bool:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                16
            ],
            [
                "Function Body",
                2,
                16
            ],
            [
                "If Statement Body",
                8,
                9
            ],
            [
                "For Loop Body",
                10,
                15
            ],
            [
                "If Statement Body",
                11,
                15
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def stoneGame(self, piles: List[int]) -> bool:\n    \"\"\"Alex and Lee play a game with piles of stones.  There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].\nThe objective of the game is to end with the most stones.  The total number of stones is odd, so there are no ties.\nAlex and Lee take turns, with Alex starting first.  Each turn, a player takes the entire pile of stones from either the beginning or the end of the row.  This continues until there are no more piles left, at which point the person with the most stones wins.\nAssuming Alex and Lee play optimally, return True if and only if Alex wins the game.\n \nExample 1:\nInput: piles = [5,3,4,5]\nOutput: true\nExplanation: \nAlex starts first, and can only take the first 5 or the last 5.\nSay he takes the first 5, so that the row becomes [3, 4, 5].\nIf Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.\nIf Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alex, so we return true.\n\n \nConstraints:\n\n2 <= piles.length <= 500\npiles.length is even.\n1 <= piles[i] <= 500\nsum(piles) is odd.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def stoneGame(self, piles: List[int]) -> bool:\n        return True",
        "inputs": [
            [
                [
                    5,
                    3,
                    4,
                    5
                ]
            ]
        ],
        "outputs": [
            [
                true
            ]
        ],
        "starter_code": "\nclass Solution:\n    def stoneGame(self, piles: List[int]) -> bool:\n",
        "scope": [
            [
                "Class Body",
                1,
                3
            ],
            [
                "Function Body",
                2,
                3
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def findLUSlength(self, strs: List[str]) -> int:\n            \"\"\"Given a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.\n\n\n\nA subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.\n\n\n\nThe input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.\n\n\nExample 1:\n\nInput: \"aba\", \"cdc\", \"eae\"\nOutput: 3\n\n\n\nNote:\n\nAll the given strings' lengths will not exceed 10.\nThe length of the given list will be in the range of [2, 50].\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def findLUSlength(self, strs):\n         \"\"\"\n         :type strs: List[str]\n         :rtype: int\n         \"\"\"\n         def isSubseq(s1, s2):\n             i, m=0, len(s1)\n             for c in s2:\n                 if i==m: return True\n                 if s1[i]==c: i+=1\n             return i==m\n         \n         strs.sort(key=len, reverse=True)\n         for i, s1 in enumerate(strs):\n             if all(not isSubseq(s1, s2) for j, s2 in enumerate(strs) if i!=j):\n                 return len(s1)            \n         return -1",
        "inputs": [
            [
                [
                    "\"aba\"",
                    "\"cdc\"",
                    "\"eae\""
                ]
            ]
        ],
        "outputs": [
            [
                5
            ]
        ],
        "starter_code": "\nclass Solution:\n    def findLUSlength(self, strs: List[str]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                18
            ],
            [
                "Function Body",
                2,
                18
            ],
            [
                "Function Body",
                7,
                12
            ],
            [
                "For Loop Body",
                9,
                11
            ],
            [
                "If Statement Body",
                10,
                10
            ],
            [
                "If Statement Body",
                11,
                11
            ],
            [
                "For Loop Body",
                15,
                17
            ],
            [
                "If Statement Body",
                16,
                17
            ],
            [
                "Generator Expression",
                16,
                16
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def numPermsDISequence(self, S: str) -> int:\n            \"\"\"We are given S, a length n string of characters from the set {'D', 'I'}. (These letters stand for \"decreasing\" and \"increasing\".)\nA valid permutation is a permutation P[0], P[1], ..., P[n] of integers {0, 1, ..., n}, such that for all i:\n\nIf S[i] == 'D', then P[i] > P[i+1], and;\nIf S[i] == 'I', then P[i] < P[i+1].\n\nHow many valid permutations are there?  Since the answer may be large, return your answer modulo 10^9 + 7.\n \nExample 1:\nInput: \"DID\"\nOutput: 5\nExplanation: \nThe 5 valid permutations of (0, 1, 2, 3) are:\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)\n\n \nNote:\n\n1 <= S.length <= 200\nS consists only of characters from the set {'D', 'I'}.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def numPermsDISequence(self, S):\n        dp = [1] * (len(S) + 1)\n        for a, b in zip('I' + S, S):\n            dp = list(itertools.accumulate(dp[:-1] if a == b else dp[-1:0:-1]))\n        return dp[0] % (10**9 + 7)\n",
        "inputs": [
            [
                "\"DID\""
            ]
        ],
        "outputs": [
            [
                5
            ]
        ],
        "starter_code": "\nclass Solution:\n    def numPermsDISequence(self, S: str) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                6
            ],
            [
                "Function Body",
                2,
                6
            ],
            [
                "For Loop Body",
                4,
                5
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\ndef exp_sum(n):\n\t    \"\"\"# How many ways can you make the sum of a number?\n\nFrom wikipedia: https://en.wikipedia.org/wiki/Partition_(number_theory)#\n\n>In number theory and combinatorics, a partition of a positive integer *n*, also called an *integer partition*, is a way of writing n as a sum of positive integers. Two sums that differ only in the order of their summands are considered the same partition. If order matters, the sum becomes a composition. For example, 4 can be partitioned in five distinct ways:\n```\n4\n3 + 1\n2 + 2\n2 + 1 + 1\n1 + 1 + 1 + 1\n```\n\n## Examples\n\n### Basic\n\n```python\nexp_sum(1) # 1\nexp_sum(2) # 2  -> 1+1 , 2\nexp_sum(3) # 3 -> 1+1+1, 1+2, 3\nexp_sum(4) # 5 -> 1+1+1+1, 1+1+2, 1+3, 2+2, 4\nexp_sum(5) # 7 -> 1+1+1+1+1, 1+1+1+2, 1+1+3, 1+2+2, 1+4, 5, 2+3\n\nexp_sum(10) # 42\n```\n\n### Explosive\n\n```python\nexp_sum(50) # 204226\nexp_sum(80) # 15796476\nexp_sum(100) # 190569292\n```\n\nSee [here](http://www.numericana.com/data/partition.htm) for more examples.\n    \"\"\"\n",
        "canonical_solution": "ANSWERS = {\n    0: 1,\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 5,\n    5: 7,\n    6: 11,\n    7: 15,\n    8: 22,\n    9: 30,\n    10: 42,\n    11: 56,\n    12: 77,\n    13: 101,\n    14: 135,\n    15: 176,\n    16: 231,\n    17: 297,\n    18: 385,\n    19: 490,\n    20: 627,\n    21: 792,\n    22: 1002,\n    23: 1255,\n    24: 1575,\n    25: 1958,\n    26: 2436,\n    27: 3010,\n    28: 3718,\n    29: 4565,\n    30: 5604,\n    31: 6842,\n    32: 8349,\n    33: 10143,\n    34: 12310,\n    35: 14883,\n    36: 17977,\n    37: 21637,\n    38: 26015,\n    39: 31185,\n    40: 37338,\n    41: 44583,\n    42: 53174,\n    43: 63261,\n    44: 75175,\n    45: 89134,\n    46: 105558,\n    47: 124754,\n    48: 147273,\n    49: 173525,\n    50: 204226,\n    51: 239943,\n    52: 281589,\n    53: 329931,\n    54: 386155,\n    55: 451276,\n    56: 526823,\n    57: 614154,\n    58: 715220,\n    59: 831820,\n    60: 966467,\n    61: 1121505,\n    62: 1300156,\n    63: 1505499,\n    64: 1741630,\n    65: 2012558,\n    66: 2323520,\n    67: 2679689,\n    68: 3087735,\n    69: 3554345,\n    70: 4087968,\n    71: 4697205,\n    72: 5392783,\n    73: 6185689,\n    74: 7089500,\n    75: 8118264,\n    76: 9289091,\n    77: 10619863,\n    78: 12132164,\n    79: 13848650,\n    80: 15796476,\n    81: 18004327,\n    82: 20506255,\n    83: 23338469,\n    84: 26543660,\n    85: 30167357,\n    86: 34262962,\n    87: 38887673,\n    88: 44108109,\n    89: 49995925,\n    90: 56634173,\n    91: 64112359,\n    92: 72533807,\n    93: 82010177,\n    94: 92669720,\n    95: 104651419,\n    96: 118114304,\n    97: 133230930,\n    98: 150198136,\n    99: 169229875,\n    100: 190569292,\n    101: 214481126,\n    102: 241265379,\n    103: 271248950,\n    104: 304801365,\n    105: 342325709,\n    106: 384276336,\n    107: 431149389,\n    108: 483502844,\n    109: 541946240,\n    110: 607163746,\n    111: 679903203,\n    112: 761002156,\n    113: 851376628,\n    114: 952050665,\n    115: 1064144451,\n    116: 1188908248,\n    117: 1327710076,\n    118: 1482074143,\n    119: 1653668665,\n    120: 1844349560,\n    121: 2056148051,\n    122: 2291320912,\n    123: 2552338241,\n    124: 2841940500,\n    125: 3163127352,\n    126: 3519222692,\n    127: 3913864295,\n    128: 4351078600,\n    129: 4835271870,\n    130: 5371315400,\n    131: 5964539504,\n    132: 6620830889,\n    133: 7346629512,\n    134: 8149040695,\n    135: 9035836076,\n    136: 10015581680,\n    137: 11097645016,\n    138: 12292341831,\n    139: 13610949895,\n    140: 15065878135,\n    141: 16670689208,\n    142: 18440293320,\n    143: 20390982757,\n    144: 22540654445,\n    145: 24908858009,\n    146: 27517052599,\n    147: 30388671978,\n    148: 33549419497,\n    149: 37027355200,\n    150: 40853235313,\n    151: 45060624582,\n    152: 49686288421,\n    153: 54770336324,\n    154: 60356673280,\n    155: 66493182097,\n    156: 73232243759,\n    157: 80630964769,\n    158: 88751778802,\n    159: 97662728555,\n    160: 107438159466,\n    161: 118159068427,\n    162: 129913904637,\n    163: 142798995930,\n    164: 156919475295,\n    165: 172389800255,\n    166: 189334822579,\n    167: 207890420102,\n    168: 228204732751,\n    169: 250438925115,\n    170: 274768617130,\n    171: 301384802048,\n    172: 330495499613,\n    173: 362326859895,\n    174: 397125074750,\n    175: 435157697830,\n    176: 476715857290,\n    177: 522115831195,\n    178: 571701605655,\n    179: 625846753120,\n    180: 684957390936,\n    181: 749474411781,\n    182: 819876908323,\n    183: 896684817527,\n    184: 980462880430,\n    185: 1071823774337,\n    186: 1171432692373,\n    187: 1280011042268,\n    188: 1398341745571,\n    189: 1527273599625,\n    190: 1667727404093,\n    191: 1820701100652,\n    192: 1987276856363,\n    193: 2168627105469,\n    194: 2366022741845,\n    195: 2580840212973,\n    196: 2814570987591,\n    197: 3068829878530,\n    198: 3345365983698,\n    199: 3646072432125,\n    200: 3972999029388,\n    201: 4328363658647,\n    202: 4714566886083,\n    203: 5134205287973,\n    204: 5590088317495,\n    205: 6085253859260,\n    206: 6622987708040,\n    207: 7206841706490,\n    208: 7840656226137,\n    209: 8528581302375,\n    210: 9275102575355,\n    211: 10085065885767,\n    212: 10963707205259,\n    213: 11916681236278,\n    214: 12950095925895,\n    215: 14070545699287,\n    216: 15285151248481,\n    217: 16601598107914,\n    218: 18028182516671,\n    219: 19573856161145,\n    220: 21248279009367,\n    221: 23061871173849,\n    222: 25025873760111,\n    223: 27152408925615,\n    224: 29454549941750,\n    225: 31946390696157,\n    226: 34643126322519,\n    227: 37561133582570,\n    228: 40718063627362,\n    229: 44132934884255,\n    230: 47826239745920,\n    231: 51820051838712,\n    232: 56138148670947,\n    233: 60806135438329,\n    234: 65851585970275,\n    235: 71304185514919,\n    236: 77195892663512,\n    237: 83561103925871,\n    238: 90436839668817,\n    239: 97862933703585,\n    240: 105882246722733,\n    241: 114540884553038,\n    242: 123888443077259,\n    243: 133978259344888,\n    244: 144867692496445,\n    245: 156618412527946,\n    246: 169296722391554,\n    247: 182973889854026,\n    248: 197726516681672,\n    249: 213636919820625,\n    250: 230793554364681,\n    251: 249291451168559,\n    252: 269232701252579,\n    253: 290726957916112,\n    254: 313891991306665,\n    255: 338854264248680,\n    256: 365749566870782,\n    257: 394723676655357,\n    258: 425933084409356,\n    259: 459545750448675,\n    260: 495741934760846,\n    261: 534715062908609,\n    262: 576672674947168,\n    263: 621837416509615,\n    264: 670448123060170,\n    265: 722760953690372,\n    266: 779050629562167,\n    267: 839611730366814,\n    268: 904760108316360,\n    269: 974834369944625,\n    270: 1050197489931117,\n    271: 1131238503938606,\n    272: 1218374349844333,\n    273: 1312051800816215,\n    274: 1412749565173450,\n    275: 1520980492851175,\n    276: 1637293969337171,\n    277: 1762278433057269,\n    278: 1896564103591584,\n    279: 2040825852575075,\n    280: 2195786311682516,\n    281: 2362219145337711,\n    282: 2540952590045698,\n    283: 2732873183547535,\n    284: 2938929793929555,\n    285: 3160137867148997,\n    286: 3397584011986773,\n    287: 3652430836071053,\n    288: 3925922161489422,\n    289: 4219388528587095,\n    290: 4534253126900886,\n    291: 4872038056472084,\n    292: 5234371069753672,\n    293: 5622992691950605,\n    294: 6039763882095515,\n    295: 6486674127079088,\n    296: 6965850144195831,\n    297: 7479565078510584,\n    298: 8030248384943040,\n    299: 8620496275465025,\n    300: 9253082936723602,\n    301: 9930972392403501,\n    302: 10657331232548839,\n    303: 11435542077822104,\n    304: 12269218019229465,\n    305: 13162217895057704,\n    306: 14118662665280005,\n    307: 15142952738857194,\n    308: 16239786535829663,\n    309: 17414180133147295,\n    310: 18671488299600364,\n    311: 20017426762576945,\n    312: 21458096037352891,\n    313: 23000006655487337,\n    314: 24650106150830490,\n    315: 26415807633566326,\n    316: 28305020340996003,\n    317: 30326181989842964,\n    318: 32488293351466654,\n    319: 34800954869440830,\n    320: 37274405776748077,\n    321: 39919565526999991,\n    322: 42748078035954696,\n    323: 45772358543578028,\n    324: 49005643635237875,\n    325: 52462044228828641,\n    326: 56156602112874289,\n    327: 60105349839666544,\n    328: 64325374609114550,\n    329: 68834885946073850,\n    330: 73653287861850339,\n    331: 78801255302666615,\n    332: 84300815636225119,\n    333: 90175434980549623,\n    334: 96450110192202760,\n    335: 103151466321735325,\n    336: 110307860425292772,\n    337: 117949491546113972,\n    338: 126108517833796355,\n    339: 134819180623301520,\n    340: 144117936527873832,\n    341: 154043597379576030,\n    342: 164637479165761044,\n    343: 175943559810422753,\n    344: 188008647052292980,\n    345: 200882556287683159,\n    346: 214618299743286299,\n    347: 229272286871217150,\n    348: 244904537455382406,\n    349: 261578907351144125,\n    350: 279363328483702152,\n    351: 298330063062758076,\n    352: 318555973788329084,\n    353: 340122810048577428,\n    354: 363117512048110005,\n    355: 387632532919029223,\n    356: 413766180933342362,\n    357: 441622981929358437,\n    358: 471314064268398780,\n    359: 502957566506000020,\n    360: 536679070310691121,\n    361: 572612058898037559,\n    362: 610898403751884101,\n    363: 651688879997206959,\n    364: 695143713458946040,\n    365: 741433159884081684,\n    366: 790738119649411319,\n    367: 843250788562528427,\n    368: 899175348396088349,\n    369: 958728697912338045,\n    370: 1022141228367345362,\n    371: 1089657644424399782,\n    372: 1161537834849962850,\n    373: 1238057794119125085,\n    374: 1319510599727473500,\n    375: 1406207446561484054,\n    376: 1498478743590581081,\n    377: 1596675274490756791,\n    378: 1701169427975813525,\n    379: 1812356499739472950,\n    380: 1930656072350465812,\n    381: 2056513475336633805,\n    382: 2190401332423765131,\n    383: 2332821198543892336,\n    384: 2484305294265418180,\n    385: 2645418340688763701,\n    386: 2816759503217942792,\n    387: 2998964447736452194,\n    388: 3192707518433532826,\n    389: 3398704041358160275,\n    390: 3617712763867604423,\n    391: 3850538434667429186,\n    392: 4098034535626594791,\n    393: 4361106170762284114,\n    394: 4640713124699623515,\n    395: 4937873096788191655,\n    396: 5253665124416975163,\n    397: 5589233202595404488,\n    398: 5945790114707874597,\n    399: 6324621482504294325,\n    400: 6727090051741041926,\n    401: 7154640222653942321,\n    402: 7608802843339879269,\n    403: 8091200276484465581,\n    404: 8603551759348655060,\n    405: 9147679068859117602,\n    406: 9725512513742021729,\n    407: 10339097267123947241,\n    408: 10990600063775926994,\n    409: 11682316277192317780,\n    410: 12416677403151190382,\n    411: 13196258966925435702,\n    412: 14023788883518847344,\n    413: 14902156290309948968,\n    414: 15834420884488187770,\n    415: 16823822787139235544,\n    416: 17873792969689876004,\n    417: 18987964267331664557,\n    418: 20170183018805933659,\n    419: 21424521360255636320,\n    420: 22755290216580025259,\n    421: 24167053021441363961,\n    422: 25664640213837714846,\n    423: 27253164546230421739,\n    424: 28938037257084798150,\n    425: 30724985147095051099,\n    426: 32620068617410232189,\n    427: 34629700713903575934,\n    428: 36760667241831527309,\n    429: 39020148000237259665,\n    430: 41415739207102358378,\n    431: 43955477170518116534,\n    432: 46647863284229267991,\n    433: 49501890409405150715,\n    434: 52527070729108240605,\n    435: 55733465144636286656,\n    436: 59131714309169618645,\n    437: 62733071376043079215,\n    438: 66549436566966297367,\n    439: 70593393646562135510,\n    440: 74878248419470886233,\n    441: 79418069346443402240,\n    442: 84227730407729499781,\n    443: 89322956321353645667,\n    444: 94720370257893471820,\n    445: 100437544171752847604,\n    446: 106493051905239118581,\n    447: 112906525199196103354,\n    448: 119698712782720205954,\n    449: 126891542690981418000,\n    450: 134508188001572923840,\n    451: 142573136155347404229,\n    452: 151112262071917313678,\n    453: 160152905244553715585,\n    454: 169723951046458040965,\n    455: 179855916453958267598,\n    456: 190581040442651931034,\n    457: 201933379285114688629,\n    458: 213948907032733069132,\n    459: 226665621435831345565,\n    460: 240123655613925192081,\n    461: 254365395758574199975,\n    462: 269435605212954994471,\n    463: 285381555241961986287,\n    464: 302253162872576636605,\n    465: 320103136152993290544,\n    466: 338987127249525432549,\n    467: 358963893768162876613,\n    468: 380095468763120598477,\n    469: 402447339861711475160,\n    470: 426088638015652413417,\n    471: 451092336355096099864,\n    472: 477535459708164115593,\n    473: 505499305314204629558,\n    474: 535069675351607262125,\n    475: 566337121865805599675,\n    476: 599397204782301852926,\n    477: 634350763653787028583,\n    478: 671304203896731807232,\n    479: 710369798236628238005,\n    480: 751666004194993125591,\n    481: 795317798414758232180,\n    482: 841457028742823649455,\n    483: 890222784951928088294,\n    484: 941761789114997698055,\n    485: 996228806608573411012,\n    486: 1053787078862455346513,\n    487: 1114608778936426484248,\n    488: 1178875491155735802646,\n    489: 1246778716001272919665,\n    490: 1318520401612270233223,\n    491: 1394313503224447816939,\n    492: 1474382572040363953132,\n    493: 1558964374994977806173,\n    494: 1648308547066172438760,\n    495: 1742678277747760981187,\n    496: 1842351033503159891466,\n    497: 1947619317987658064007,\n    498: 2058791472042884901563,\n    499: 2176192515439287461625,\n    500: 2300165032574323995027,\n    501: 2431070104309287327876,\n    502: 2569288288377098289281,\n    503: 2715220650772245313220,\n    504: 2869289850802400662045,\n    505: 3031941282464413132742,\n    506: 3203644275096202070012,\n    507: 3384893356244349844341,\n    508: 3576209579998154653671,\n    509: 3778141924035171537110,\n    510: 3991268758958164118300,\n    511: 4216199393504640098482,\n    512: 4453575699570940947378,\n    513: 4704073821002175842062,\n    514: 4968405970488126319775,\n    515: 5247322318923878793976,\n    516: 5541612982013113936133,\n    517: 5852110108921301661040,\n    518: 6179690078238084808000,\n    519: 6525275806549652788115,\n    520: 6889839175409542385648,\n    521: 7274403582551733377346,\n    522: 7680046623716094332553,\n    523: 8107902911527474124146,\n    524: 8559167038437716736150,\n    525: 9035096690829005915201,\n    526: 9537015921990240021538,\n    527: 10066318591787500106586,\n    528: 10624471981512075020731,\n    529: 11213020592521695111580,\n    530: 11833590138006300416410,\n    531: 12487891737367521803652,\n    532: 13177726323474524612308,\n    533: 13904989273245567335012,\n    534: 14671675272840783232475,\n    535: 15479883428970761068959,\n    536: 16331822638729701493803,\n    537: 17229817230617210720599,\n    538: 18176312890390861435034,\n    539: 19173882885687454484110,\n    540: 20225234604409151266221,\n    541: 21333216422211708570598,\n    542: 22500824915577356165493,\n    543: 23731212437346370138355,\n    544: 25027695072821279146420,\n    545: 26393760995005382968154,\n    546: 27833079238879849385687,\n    547: 29349508915133986374841,\n    548: 30947108885217475101876,\n    549: 32630147920163234060900,\n    550: 34403115367205050943160,\n    551: 36270732348871285128752,\n    552: 38237963520943177237554,\n    553: 40310029416409244587122,\n    554: 42492419404397720872600,\n    555: 44790905293907018009131,\n    556: 47211555614160398040338,\n    557: 49760750604354432757376,\n    558: 52445197947746313627407,\n    559: 55271949286085137715955,\n    560: 58248417552751868050007,\n    561: 61382395164161775318496,\n    562: 64682073111542943380454,\n    563: 68156060996536236172174,\n    564: 71813408056839596203570,\n    565: 75663625229609055443637,\n    566: 79716708303343130521599,\n    567: 83983162210640880002321,\n    568: 88474026517495817981253,\n    569: 93200902166643654187580,\n    570: 98175979536033971312388,\n    571: 103412067875563710992446,\n    572: 108922626189067392956037,\n    573: 114721795630860408658491,\n    574: 120824433490320564237125,\n    575: 127246148840551966562301,\n    576: 134003339931725153597473,\n    577: 141113233412529912746558,\n    578: 148593925468119890197615,\n    579: 156464424966082817448060,\n    580: 164744698707340387584240,\n    581: 173455718882380096095248,\n    582: 182619512839056823919887,\n    583: 192259215272078129526277,\n    584: 202399122950629095580175,\n    585: 213064752104884207160129,\n    586: 224282898599046831034631,\n    587: 236081701023305130945921,\n    588: 248490706844586261413858,\n    589: 261540941761240642265710,\n    590: 275264982414934173206642,\n    591: 289697032618827122974972,\n    592: 304873003269975366031783,\n    593: 320830596120295386610807,\n    594: 337609391590065169560935,\n    595: 355250940815002702558187,\n    596: 373798862128436852709430,\n    597: 393298942187883251157044,\n    598: 413799241966727832978027,\n    599: 435350207840317348270000,\n    600: 458004788008144308553622,\n    601: 481818554503286362923739,\n    602: 506849831053734861481872,\n    603: 533159827070679866278987,\n    604: 560812778053476538349420,\n    605: 589876092712502332463864,\n    606: 620420507127059714307352,\n    607: 652520246268116112057164,\n    608: 686253193233019826880477,\n    609: 721701066553229757379480,\n    610: 758949605954969709105721,\n    611: 798088766967999186006767,\n    612: 839212924798226411060795,\n    613: 882421087896683264554175,\n    614: 927817121679723721849795,\n    615: 975509982873756796925504,\n    616: 1025613964982134990453294,\n    617: 1078248955392080004474789,\n    618: 1133540704665979618906662,\n    619: 1191621108583631746910145,\n    620: 1252628503530795506440909,\n    621: 1316707975853817969920561,\n    622: 1384011685831426958558879,\n    623: 1454699206941558115141676,\n    624: 1528937881135168275063375,\n    625: 1606903190858354689128371,\n    626: 1688779148601189609516729,\n    627: 1774758704783877366657989,\n    628: 1865044174831202682776536,\n    629: 1959847686321528964669495,\n    630: 2059391647140527228529479,\n    631: 2163909235608484556362424,\n    632: 2273644913597837330081136,\n    633: 2388854963699932382735982,\n    634: 2509808051552031608082535,\n    635: 2636785814481962651219075,\n    636: 2770083477684418110395121,\n    637: 2910010499193691843303014,\n    638: 3056891244979232231862474,\n    639: 3211065695545980277248740,\n    640: 3372890185488482409685019,\n    641: 3542738177508596708707874,\n    642: 3721001072479541451508397,\n    643: 3908089057205582486668934,\n    644: 4104431991606013700457110,\n    645: 4310480337124871462076948,\n    646: 4526706128254173781044298,\n    647: 4753603989138067267826945,\n    648: 4991692197319220372390544,\n    649: 5241513796775816319683700,\n    650: 5503637762499727151307095,\n    651: 5778660218961559003723580,\n    652: 6067205714919484306343541,\n    653: 6369928557132709817142929,\n    654: 6687514205661440172553650,\n    655: 7020680733548749464953877,\n    656: 7370180353811425547662139,\n    657: 7736801016790889035132284,\n    658: 8121368081058512888507057,\n    659: 8524746061205131302394950,\n    660: 8947840456000332817673697,\n    661: 9391599660555044587641517,\n    662: 9857016966290401433259592,\n    663: 10345132652677367520056676,\n    664: 10857036174895938656583295,\n    665: 11393868451739000294452939,\n    666: 11956824258286445517629485,\n    667: 12547154728067493595502055,\n    668: 13166169969647255482980383,\n    669: 13815241802783448943206160,\n    670: 14495806619536377005379418,\n    671: 15209368375944215483241988,\n    672: 15957501720133631304230773,\n    673: 16741855262985451980947171,\n    674: 17564154997755650263621500,\n    675: 18426207875324210441995136,\n    676: 19329905542049511423199336,\n    677: 20277228247502764885900784,\n    678: 21270248929688765106878025,\n    679: 22311137485682880566295780,\n    680: 23402165235974892374954302,\n    681: 24545709591163085124246501,\n    682: 25744258930034131533263392,\n    683: 27000417698448800353553865,\n    684: 28316911738879831363625420,\n    685: 29696593860867277871605321,\n    686: 31142449663120060247020395,\n    687: 32657603618448918933404658,\n    688: 34245325433219728719773420,\n    689: 35909036693513349075724695,\n    690: 37652317810725762600765183,\n    691: 39478915279883795756623331,\n    692: 41392749264546866860893416,\n    693: 43397921522754943172592795,\n    694: 45498723689129703063649450,\n    695: 47699645928878027716139269,\n    696: 50005385980149860746062163,\n    697: 52420858601901549459658530,\n    698: 54951205445179608281719072,\n    699: 57601805366500810491219000,\n    700: 60378285202834474611028659,\n    701: 63286531028521032840985510,\n    702: 66332699915362724119980694,\n    703: 69523232218023552371152320,\n    704: 72864864407855341219969825,\n    705: 76364642479247406973532354,\n    706: 80029935953661656574123574,\n    707: 83868452507581852374822598,\n    708: 87888253251761884175130183,\n    709: 92097768690318501305952845,\n    710: 96505815389469697877049934,\n    711: 101121613386982294887579670,\n    712: 105954804374756131323439197,\n    713: 111015470688345108146850290,\n    714: 116314155138696524440183805,\n    715: 121861881722882938654960142,\n    716: 127670177252209281782740521,\n    717: 133751093937700984130081285,\n    718: 140117232974725477106760252,\n    719: 146781769170263852819573505,\n    720: 153758476658245881594406593,\n    721: 161061755750279477635534762,\n    722: 168706660971164630122439117,\n    723: 176708930330666271859881567,\n    724: 185085015885255746880625875,\n    725: 193852115645795752984189381,\n    726: 203028206889569986197651315,\n    727: 212632080937520072186590492,\n    728: 222683379460186024851577401,\n    729: 233202632378520643600875145,\n    730: 244211297428606706709925517,\n    731: 255731801462210865865001525,\n    732: 267787583558210323920375877,\n    733: 280403140023083872114273884,\n    734: 293604071362025285843562670,\n    735: 307417131305664218954016427,\n    736: 321870277981032622582593573,\n    737: 336992727319136467572139095,\n    738: 352815008795455957133215652,\n    739: 369369023603738655757458075,\n    740: 386688105367749941220651375,\n    741: 404807083500032850651734059,\n    742: 423762349321394151918928481,\n    743: 443591925059596733749014862,\n    744: 464335535850798483634138280,\n    745: 486034684872448271784326296,\n    746: 508732731741838107613602755,\n    747: 532474974320122372524707631,\n    748: 557308734067567635805394638,\n    749: 583283445101886813536239875,\n    750: 610450747117966916191771809,\n    751: 638864582333908382360557376,\n    752: 668581296635294279311393900,\n    753: 699659745096778286894322787,\n    754: 732161402067670820574405230,\n    755: 766150476015982127183457373,\n    756: 801694029333610862568750951,\n    757: 838862103313805798709299373,\n    758: 877727848520950325159242658,\n    759: 918367660781873199488134935,\n    760: 960861323037560814483873080,\n    761: 1005292153304074193879898920,\n    762: 1051747159001957690209588887,\n    763: 1100317197924192833923669753,\n    764: 1151097146124113726578727360,\n    765: 1204186073016375022219516992,\n    766: 1259687423996378387111229150,\n    767: 1317709210896221493178043552,\n    768: 1378364210608578997366598385,\n    769: 1441770172223648126550509165,\n    770: 1508050033038752490738311726,\n    771: 1577332143815074048889599022,\n    772: 1649750503671651735806603894,\n    773: 1725445005022910006140645612,\n    774: 1804561688982956164492944650,\n    775: 1887253011677361609828822380,\n    776: 1973678121921532286407950000,\n    777: 2064003150743712843868729636,\n    778: 2158401513250589964731360493,\n    779: 2257054223353982965849642005,\n    780: 2360150221898687182164777966,\n    781: 2467886718753771981901721670,\n    782: 2580469549453004933593920862,\n    783: 2698113546994164480174756373,\n    784: 2821042929432312216467202070,\n    785: 2949491703928193388274450292,\n    786: 3083704087940340693022764503,\n    787: 3223934948277725160271634798,\n    788: 3370450258759473520427114109,\n    789: 3523527577258789108163787100,\n    790: 3683456542940343404363084600,\n    791: 3850539394533563994343413787,\n    792: 4025091510519029370421431033,\n    793: 4207441972141088280734057870,\n    794: 4397934150197476827913759850,\n    795: 4596926316595586652827474186,\n    796: 4804792281705797515062559743,\n    797: 5021922058584382849328869242,\n    798: 5248722555182613689484387822,\n    799: 5485618295704258477069984050,\n    800: 5733052172321422504456911979,\n    801: 5991486228508002426815719537,\n    802: 6261402475301701333080509487,\n    803: 6543303741858946450905285538,\n    804: 6837714561722963378455094385,\n    805: 7145182096283051986707103605,\n    806: 7466277096963606051213804496,\n    807: 7801594907743960700949000443,\n    808: 8151756509675604512522473567,\n    809: 8517409609130970421571757565,\n    810: 8899229771588828461969917962,\n    811: 9297921602834531195851268718,\n    812: 9714219979529959777862768265,\n    813: 10148891331187245215547993864,\n    814: 10602734975663191221223594155,\n    815: 11076584510377034355391142064,\n    816: 11571309261543787320061392679,\n    817: 12087815793808125625662163707,\n    818: 12627049482760689878061744701,\n    819: 13189996152918959195978870030,\n    820: 13777683783859651786576215682,\n    821: 14391184287298069419105856949,\n    822: 15031615358023124634594092724,\n    823: 15700142401714084441377203063,\n    824: 16397980542787591098996821750,\n    825: 17126396715550358417594267021,\n    826: 17886711842065410771034749979,\n    827: 18680303100276877491522988120,\n    828: 19508606286081561360311437674,\n    829: 20373118273183778133458320225,\n    830: 21275399574724765449983360003,\n    831: 22217077010838260632179411313,\n    832: 23199846486451169343993151122,\n    833: 24225475883821531494697782922,\n    834: 25295808074486832813101046425,\n    835: 26412764055483014097178757689,\n    836: 27578346214889968804237171486,\n    837: 28794641731961759722351371983,\n    838: 30063826117310982372086476080,\n    839: 31388166898835484452139885750,\n    840: 32770027459303858556350798600,\n    841: 34211871031752548278772284453,\n    842: 35716264859093977687647313415,\n    843: 37285884524590579748861394570,\n    844: 38923518460115987806848673270,\n    845: 40632072639400673752129300324,\n    846: 42414575463747094337180792099,\n    847: 44274182847997609942310578598,\n    848: 46214183514849300594196193732,\n    849: 48238004505931946889525421000,\n    850: 50349216918401212177548479675,\n    851: 52551541876147039010384562987,\n    852: 54848856745079917639394818823,\n    853: 57245201602333536237114022805,\n    854: 59744785969613964515539259105,\n    855: 62351995821331449988466091712,\n    856: 65071400878573831543609957267,\n    857: 67907762200418949875852866531,\n    858: 70866040084540107092698343096,\n    859: 73951402289532005957331751320,\n    860: 77169232591877674590168543277,\n    861: 80525139690988018278755885205,\n    862: 84024966476277979232856334449,\n    863: 87674799670795146675673859587,\n    864: 91480979866491345649258758095,\n    865: 95450111966823518214883921610,\n    866: 99589076052990565170686659417,\n    867: 103905038690755971019484297576,\n    868: 108405464695475636367939373595,\n    869: 113098129373644577851404473535,\n    870: 117991131259998859170817958839,\n    871: 123092905369958432777075796052,\n    872: 128412236987976529870072690275,\n    873: 133958276013169939669531019316,\n    874: 139740551884446204479331411000,\n    875: 145768989108216487062234772851,\n    876: 152053923412691097170490155923,\n    877: 158606118553696417431847045996,\n    878: 165436783797931931934295220337,\n    879: 172557592110602218633091543840,\n    880: 179980699075416049556058362840,\n    881: 187718762576041099642814429720,\n    882: 195784963269243383580949581161,\n    883: 204193025881123335512830178821,\n    884: 212957241359090878236182734445,\n    885: 222092489913497780851227603386,\n    886: 231614264984172822820073009257,\n    887: 241538698168481624527315178361,\n    888: 251882585148964518765460484674,\n    889: 262663412660090356154504995095,\n    890: 273899386535208029575034561337,\n    891: 285609460876378579895067651923,\n    892: 297813368391435715163322531331,\n    893: 310531651944349233813920512829,\n    894: 323785697366761254448562966675,\n    895: 337597767580427105501057917306,\n    896: 351991038082228660789452118410,\n    897: 366989633845435601723754690835,\n    898: 382618667692977386826261193199,\n    899: 398904280200653395819254517900,\n    900: 415873681190459054784114365430,\n    901: 433555192876539531087229255477,\n    902: 451978294728708525214023001725,\n    903: 471173670120985588372050797999,\n    904: 491173254835220446432862090800,\n    905: 512010287492584845146484412308,\n    906: 533719361988531136324395159455,\n    907: 556336482009740068071399064008,\n    908: 579899117714618242279047917300,\n    909: 604446264662056374189988834755,\n    910: 630018505076433611630379753807,\n    911: 656658071540248718776792346785,\n    912: 684408913209287275550344075013,\n    913: 713316764648893234122621625751,\n    914: 743429217393715213042975617565,\n    915: 774795794337240928934816284899,\n    916: 807468027061529837515792402675,\n    917: 841499536221802614337232047468,\n    918: 876946115104959930393838357571,\n    919: 913865816485680423486405066750,\n    920: 952319042908502961911588247808,\n    921: 992368640529229737341624411924,\n    922: 1034079996654109332431762911842,\n    923: 1077521141120571341397403386532,\n    924: 1122762851668802145076610697775,\n    925: 1169878763459173895733432737528,\n    926: 1218945482896482311379736998403,\n    927: 1270042705928112564209840426896,\n    928: 1323253340989653981276400185806,\n    929: 1378663636778122744608506419570,\n    930: 1436363315039845896899358328033,\n    931: 1496445708567209282036578487803,\n    932: 1559007904605896258842021462474,\n    933: 1624150893881942976244820893255,\n    934: 1691979725465930503404211099660,\n    935: 1762603667699924360130192603237,\n    936: 1836136375421380008668856717532,\n    937: 1912696063727159213943851080855,\n    938: 1992405688530070149968413761596,\n    939: 2075393134169954709485716047155,\n    940: 2161791408351324312330912522447,\n    941: 2251738844689892053427982289844,\n    942: 2345379313161090374436414551558,\n    943: 2442862438754801545567295092897,\n    944: 2544343828652090726779455860435,\n    945: 2649985308251720770267133439311,\n    946: 2759955166386673475403099789409,\n    947: 2874428410083806869907819978392,\n    948: 2993587029233173241168779714732,\n    949: 3117620271547411926979127053250,\n    950: 3246724928206047105940972859506,\n    951: 3381105630594468612010288127863,\n    952: 3520975158562887897616477410546,\n    953: 3666554760646647127956344306190,\n    954: 3818074486705953843294627812035,\n    955: 3975773533460423034845675035419,\n    956: 4139900603411771887815710365915,\n    957: 4310714277666637214536144927329,\n    958: 4488483403190813123215639907302,\n    959: 4673487495046245204241629451110,\n    960: 4866017154182911354694265206413,\n    961: 5066374501379277964399166419563,\n    962: 5274873627947390097986152243705,\n    963: 5491841063841846500452896053582,\n    964: 5717616263835974099255567733750,\n    965: 5952552112453464578853008309794,\n    966: 6197015448369619941842104648894,\n    967: 6451387609023188709970129910797,\n    968: 6716064996207615136996693074302,\n    969: 6991459663439386169435859778910,\n    970: 7277999925931103886207676505429,\n    971: 7576130994027952290703815097177,\n    972: 7886315630998429231248733036419,\n    973: 8209034836103596418058528755338,\n    974: 8544788553903729460741526714750,\n    975: 8894096410797147287955714755082,\n    976: 9257498479823236816318777820416,\n    977: 9635556074800288403768986034253,\n    978: 10028852574908795418824727341746,\n    979: 10437994280872373856676062879735,\n    980: 10863611303931504965592652844878,\n    981: 11306358488849924787366667765407,\n    982: 11766916372239763961801564990016,\n    983: 12245992177539511607834487453052,\n    984: 12744320848028628464246059627690,\n    985: 13262666119314202551196742822008,\n    986: 13801821632778520931079437719552,\n    987: 14362612091531863067120268402228,\n    988: 14945894460472306341153073892017,\n    989: 15552559212113915719970799358900,\n    990: 16183531619906475296861224625027,\n    991: 16839773100833956878604913215477,\n    992: 17522282609145324707635966077022,\n    993: 18232098083140097717852712346115,\n    994: 18970297947002453464660671155990,\n    995: 19738002669751617842096992232436,\n    996: 20536376383452971700767593594021,\n    997: 21366628562913781584556907794729,\n    998: 22230015769169865076825741905555,\n    999: 23127843459154899464880444632250,\n    1000: 24061467864032622473692149727991,\n    1001: 25032297938763929621013218349796,\n    1002: 26041797385576000582369625213281,\n    1003: 27091486754099167408984061096127,\n    1004: 28182945621039436811282417218990,\n    1005: 29317814852360484763188469380980,\n    1006: 30497798951058731380716134731126,\n    1007: 31724668493728872881006491578226,\n    1008: 33000262659235183814081519827753,\n    1009: 34326491852926110526276105821510,\n    1010: 35705340429956356495500048880518,\n    1011: 37138869521411924622451440267117,\n    1012: 38629219967069644267226780200798,\n    1013: 40178615358763694337831877170404,\n    1014: 41789365198477765393682507986660,\n    1015: 43463868175432916528376380161993,\n    1016: 45204615566598118821992112719830,\n    1017: 47014194765213080671467587361162,\n    1018: 48895292942081479136595740785155,\n    1019: 50850700844567331975836762416180,\n    1020: 52883316738408211899530127054215,\n    1021: 54996150497646497195116039121846,\n    1022: 57192327848174163803231700285962,\n    1023: 59475094770587936660132803278445,\n    1024: 61847822068260244309086870983975,\n    1025: 64314010106747559065438412709786,\n    1026: 66877293730881687431325192921834,\n    1027: 69541447366121616918816177545634,\n    1028: 72310390310983979753319152713934,\n    1029: 75188192227619293524858181464065,\n    1030: 78179078837859260757658669457252,\n    1031: 81287437832327804842152878336251,\n    1032: 84517825000485590628268677129623,\n    1033: 87874970589764795726619149717517,\n    1034: 91363785902248291467082481888195,\n    1035: 94989370137655453801161398756590,\n    1036: 98757017491716010698603869808070,\n    1037: 102672224519343960454073227246547,\n    1038: 106740697772366151410092496101554,\n    1039: 110968361721914939732387042839470,\n    1040: 115361366975961956826368092270559,\n    1041: 119926098802850790583643914139778,\n    1042: 124669185972080868004022654618279,\n    1043: 129597509924003418690815024769614,\n    1044: 134718214280513689012974236132740,\n    1045: 140038714709261994367964528304147,\n    1046: 145566709154360370820516947589011,\n    1047: 151310188447031979898125505211430,\n    1048: 157277447310137702096803724432844,\n    1049: 163477095771019024080265786609550,\n    1050: 169918070997619096807349078318498,\n    1051: 176609649573385253852206425342508,\n    1052: 183561460227017093724267411668558,\n    1053: 190783497033705025399011223174627,\n    1054: 198286133105105766051740791002035,\n    1055: 206080134785924286913455951259466,\n    1056: 214176676375616994965530422655441,\n    1057: 222587355394399185288134561600051,\n    1058: 231324208413431926871476886628488,\n    1059: 240399727469780275150398352541295,\n    1060: 249826877087477024806306436682550,\n    1061: 259619111926794902903903858282467,\n    1062: 269790395084626208521306859330203,\n    1063: 280355217069693265922512204254601,\n    1064: 291328615477166797747643128851965,\n    1065: 302726195388153340970512449363108,\n    1066: 314564150520428320398942429589829,\n    1067: 326859285157739328217944658021195,\n    1068: 339629036885985812650521091739503,\n    1069: 352891500165597792693064105229860,\n    1070: 366665450770488753893927654278831,\n    1071: 380970371125047658469252263285168,\n    1072: 395826476571763477972460354798893,\n    1073: 411254742603244027745802489871124,\n    1074: 427276933093600703409672633110750,\n    1075: 443915629565423279460548833975619,\n    1076: 461194261529865886819548193737883,\n    1077: 479137137938708024340405275972933,\n    1078: 497769479788644748304553495300446,\n    1079: 517117453919499510741582247311995,\n    1080: 537208208049543370281513128274546,\n    1081: 558069907092647074919064078269009,\n    1082: 579731770803589829653889090465310,\n    1083: 602224112799502127836867703068534,\n    1084: 625578381007131993715400129218655,\n    1085: 649827199587396195485096741151797,\n    1086: 675004412390512738195023734124239,\n    1087: 701145127996910209394091171983043,\n    1088: 728285766401075776846633724874013,\n    1089: 756464107397538946738052845597325,\n    1090: 785719340730295196686468011045384,\n    1091: 816092118069154575020287144949660,\n    1092: 847624606878758096201928227674051,\n    1093: 880360546248341702038727418718373,\n    1094: 914345304752746677204951178080640,\n    1095: 949625940417679322961779585842763,\n    1096: 986251262864814583017230902369159,\n    1097: 1024271897715020987348060381346241,\n    1098: 1063740353330761125682320075116819,\n    1099: 1104711089981595892462307006170625,\n    1100: 1147240591519695580043346988281283,\n    1101: 1191387439655339764253910592315288,\n    1102: 1237212390925574690626025966996290,\n    1103: 1284778456452494990829233226377379,\n    1104: 1334150984591030161739618104847170,\n    1105: 1385397746569649033264079085023363,\n    1106: 1438589025231051837956193683375282,\n    1107: 1493797706983703451005350179037500,\n    1108: 1551099377078977592324977502565855,\n    1109: 1610572418332734533482318570551190,\n    1110: 1672298113414349146588255526290127,\n    1111: 1736360750830546535004742869861557,\n    1112: 1802847734735894350158767668809929,\n    1113: 1871849698706449115822481531031302,\n    1114: 1943460623617864164855763103650900,\n    1115: 2017777959774244383161311335135412,\n    1116: 2094902753439183950276117590000925,\n    1117: 2174939777925753277977786731439319,\n    1118: 2257997669407716887103312005936867,\n    1119: 2344189067619971039484826726136835,\n    1120: 2433630761622095504505007624351926,\n    1121: 2526443840805024325560621670846260,\n    1122: 2622753851327163276606626468293628,\n    1123: 2722690958172823755991785784326387,\n    1124: 2826390113032612069265970456163500,\n    1125: 2933991228212416784843441604124699,\n    1126: 3045639356784883554548008634432380,\n    1127: 3161484879204764376319516386806829,\n    1128: 3281683696617285755657387337131749,\n    1129: 3406397431096706053660787897070925,\n    1130: 3535793633060536116646611744883745,\n    1131: 3670045996113488118329838058723628,\n    1132: 3809334579584105681944821254585338,\n    1133: 3953846039026223475533484851711932,\n    1134: 4103773864966917551549475742004630,\n    1135: 4259318630192449100691154502765975,\n    1136: 4420688245873885709566584952625897,\n    1137: 4588098226844616747507844508037264,\n    1138: 4761771966352875646576237849731855,\n    1139: 4941941020623653451737160975884815,\n    1140: 5128845403576048431946742302750170,\n    1141: 5322733892054158457915227866236060,\n    1142: 5523864341942100491068450472029219,\n    1143: 5732504015546648477080676455520535,\n    1144: 5948929920644332374606657683899745,\n    1145: 6173429161603651508297858791951031,\n    1146: 6406299303007341112943259722223788,\n    1147: 6647848746214407376439536432805536,\n    1148: 6898397119316930779355317551024978,\n    1149: 7158275680962446691834888697663475,\n    1150: 7427827738529064471293660118664110,\n    1151: 7707409081157399483953096394984678,\n    1152: 7997388428160886234821473483000555,\n    1153: 8298147893354134143293856722998488,\n    1154: 8610083465857701451154337181278065,\n    1155: 8933605507957017621037375468973282,\n    1156: 9269139270613202791504126859283685,\n    1157: 9617125427244236129299819591578718,\n    1158: 9978020626416337178370164768812546,\n    1159: 10352298064107568778430054733760345,\n    1160: 10740448076228572334937735566562385,\n    1161: 11142978752109030998555590333304243,\n    1162: 11560416569682950887414131083801684,\n    1163: 11993307053131181401163436777097233,\n    1164: 12442215453765791987839842332792770,\n    1165: 12907727454968012800119940123354311,\n    1166: 13390449902019461518054086533162960,\n    1167: 13891011557695348536983250121102793,\n    1168: 14410063884518310798493113995825913,\n    1169: 14948281854602503175542820411276425,\n    1170: 15506364788049610799716682308517542,\n    1171: 16085037220891570656183958875514689,\n    1172: 16685049803609043819824168449851071,\n    1173: 17307180231290097851615771678718278,\n    1174: 17952234206530182283975172821446800,\n    1175: 18621046436212348314484589328413725,\n    1176: 19314481663345819649385158162679300,\n    1177: 20033435735181507108244024178275807,\n    1178: 20778836708864920831259413450679734,\n    1179: 21551645995930215818617016034137500,\n    1180: 22352859546983857840754489692613399,\n    1181: 23183509077972665661421886007454584,\n    1182: 24044663339478824029548767493555588,\n    1183: 24937429430533921473492651656959612,\n    1184: 25862954158495203059166455452470495,\n    1185: 26822425446580095904068198565803164,\n    1186: 27817073790709723558345700246365971,\n    1187: 28848173767368633057992125893483779,\n    1188: 29917045594246378653834785571179351,\n    1189: 31025056745487001593014803461929555,\n    1190: 32173623623434883211416744742294747,\n    1191: 33364213288829995905464566634140396,\n    1192: 34598345251472305106432161856883007,\n    1193: 35877593323444056632515580254383154,\n    1194: 37203587537049994338271609307035630,\n    1195: 38578016129709269105524749061283955,\n    1196: 40002627598109003613035027587346239,\n    1197: 41479232824008249429294178038617951,\n    1198: 43009707274162500911950054844789890,\n    1199: 44595993276923101114218051405894000,\n    1200: 46240102378152881298913555099661657,\n    1201: 47944117779189310556261099429006223,\n    1202: 49710196859679394486867802358932901,\n    1203: 51540573788206651013836802198036893,\n    1204: 53437562223729812777303406841914935,\n    1205: 55403558110955564979344325681437822,\n    1206: 57441042572873737644094937785113022,\n    1207: 59552584903793044889004529388335732,\n    1208: 61740845666328821093587961517238033,\n    1209: 64008579895911365238424857597692590,\n    1210: 66358640416504598253672231293216761,\n    1211: 68793981271349892486345394543503614,\n    1212: 71317661272679283934970057444157431,\n    1213: 73932847674475963853859804733408932,\n    1214: 76642819972498112301511348487927130,\n    1215: 79450973835924928534740056571220837,\n    1216: 82360825175131287067719845184002304,\n    1217: 85376014350249959857626768802856615,\n    1218: 88500310525337959944194241004565748,\n    1219: 91737616173126446538485123122674660,\n    1220: 95091971735501962459496140992085663,\n    1221: 98567560445040729668418191983592407,\n    1222: 102168713313097495533124764187939944,\n    1223: 105899914290136190948927875636615483,\n    1224: 109765805604181632042444034426405625,\n    1225: 113771193283469872120310539095739833,\n    1226: 117921052869579803514689801523449638,\n    1227: 122220535327540435729044764084697099,\n    1228: 126674973159627164610485151798391797,\n    1229: 131289886729786527240095013237443045,\n    1230: 136070990805862651658706033366694460,\n    1231: 141024201327040104811696041691045190,\n    1232: 146155642404167375009402954907061316,\n    1233: 151471653560883058451095421311451141,\n    1234: 156978797223733228787865722354959930,\n    1235: 162683866469743733376335192519362494,\n    1236: 168593893040195573779320686453020964,\n    1237: 174716155629645388794651866300906835,\n    1238: 181058188459536679140275000227478496,\n    1239: 187627790146061111217741961494883890,\n    1240: 194433032872253346998515292619988830,\n    1241: 201482271874637706375741021005730181,\n    1242: 208784155255090933098578892158986338,\n    1243: 216347634128942766400406396453655835,\n    1244: 224181973120705296790445342451587490,\n    1245: 232296761219203590802475861123264133,\n    1246: 240701923004274209788971782007579802,\n    1247: 249407730257605432130910077287592727,\n    1248: 258424813970713646981839124047488243,\n    1249: 267764176763484957967824140618533500,\n    1250: 277437205727159975794000686688315348,\n    1251: 287455685706103555386947650491244181,\n    1252: 297831813033180334721514504126791124,\n    1253: 308578209734051855476222280888835192,\n    1254: 319707938216222310789920115620477565,\n    1255: 331234516459188101998422700026723439,\n    1256: 343171933722591949005782567849433641,\n    1257: 355534666789845852070090701405470932,\n    1258: 368337696765269337188595637416276068,\n    1259: 381596526443390734228095202493032600,\n    1260: 395327198269680365975835178420652411,\n    1261: 409546312912626108164576640399383898,\n    1262: 424271048467724485839916892830607059,\n    1263: 439519180314644983035319377172158032,\n    1264: 455309101649532274915393819410766690,\n    1265: 471659844715141371979173526935980437,\n    1266: 488591102752254955447569352295355812,\n    1267: 506123252696611256922641286254645760,\n    1268: 524277378646375504218896129395592376,\n    1269: 543075296126019045035073055561928520,\n    1270: 562539577173328634024088141916141596,\n    1271: 582693576277154906994867051360796655,\n    1272: 603561457194424687753064451343608383,\n    1273: 625168220675887416175494833282535136,\n    1274: 647539733131042629585359752478706350,\n    1275: 670702756263704072335812679441391888,\n    1276: 694684977710697693392039019806832594,\n    1277: 719515042717266582828863521396088515,\n    1278: 745222586883866905899271646915240282,\n    1279: 771838270020186251303063741763018130,\n    1280: 799393811143400700904158178331205389,\n    1281: 827922024658910558926936487548336568,\n    1282: 857456857763058308684876665745077292,\n    1283: 888033429108637280324653641355847207,\n    1284: 919688068775347054572190680423598070,\n    1285: 952458359588743164917093657911776850,\n    1286: 986383179832665621554422059019604497,\n    1287: 1021502747401614623677846147487591813,\n    1288: 1057858665441074072255055670604124719,\n    1289: 1095493969525365696982675003469664810,\n    1290: 1134453176424250386882487822532585142,\n    1291: 1174782334511180318623311370757902964,\n    1292: 1216529075867847432892383159101984374,\n    1293: 1259742670141472479018316728428818781,\n    1294: 1304474080213136065603158197122179375,\n    1295: 1350776019737370796417180820702333527,\n    1296: 1398703012615213588677365804960180341,\n    1297: 1448311454464961662889458094993182194,\n    1298: 1499659676156986538068572255824972432,\n    1299: 1552808009481139790520320395733292300,\n    1300: 1607818855017534550841511230454411672,\n    1301: 1664756752283809987147800849591201736,\n    1302: 1723688452234384707674372422071320679,\n    1303: 1784682992189681523983975379146100758,\n    1304: 1847811773275862853601073393199008865,\n    1305: 1913148640458255774876416600453369682,\n    1306: 1980769965254371045106648307068906619,\n    1307: 2050754731215233987976941410834180457,\n    1308: 2123184622266649887649796215921782211,\n    1309: 2198144114005025303125952328225613580,\n    1310: 2275720568045462559712283145467243327,\n    1311: 2356004329523040680859896842728890474,\n    1312: 2439088827851495409213115816339495726,\n    1313: 2525070680846917026164254568053937634,\n    1314: 2614049802327600836872111661056230165,\n    1315: 2706129513304814950403979441635984290,\n    1316: 2801416656882996994241981980679918559,\n    1317: 2900021716991759392273170147031719072,\n    1318: 3002058941076075680836616507226015622,\n    1319: 3107646466875142011769945929778234485,\n    1320: 3216906453424662618200536823961141148,\n    1321: 3329965216421699826558324552595808770,\n    1322: 3446953368095762574438358199469775528,\n    1323: 3568005961734486838351757966808790919,\n    1324: 3693262641017091556254336031236632750,\n    1325: 3822867794313779335421691039194332368,\n    1326: 3956970714114397433384120384166003416,\n    1327: 4095725761754986283464866437718755283,\n    1328: 4239292537616325490949332681096528358,\n    1329: 4387836056974246172531213471126988170,\n    1330: 4541526931687319371792477450694975225,\n    1331: 4700541557913558825461268913956492487,\n    1332: 4865062310053998559115610911870100035,\n    1333: 5035277741127427794082646196764289585,\n    1334: 5211382789787193810929017395424321210,\n    1335: 5393578994197824268512706677957552625,\n    1336: 5582074712996280787878705083147454523,\n    1337: 5777085353569942323599828874448120571,\n    1338: 5978833607890937159258923653545207827,\n    1339: 6187549696154203668120613167259109435,\n    1340: 6403471618474669930531089742522848797,\n    1341: 6626845414907208756853259936695984136,\n    1342: 6857925434061555771629308454994509373,\n    1343: 7096974610593182332652154711768629954,\n    1344: 7344264751860200848154682253520601870,\n    1345: 7600076834045756410267481267000412856,\n    1346: 7864701308055034793828023244287340980,\n    1347: 8138438415506002236313232141990462682,\n    1348: 8421598515143296812402544776496284973,\n    1349: 8714502420015324706702901500511538625,\n    1350: 9017481745765587687202719206979752339,\n    1351: 9330879270400591290587334955958115107,\n    1352: 9655049305908367725798746534773552348,\n    1353: 9990358082113704664098849646925432237,\n    1354: 10337184143168612691406936474627379320,\n    1355: 10695918757089402353832391602114778863,\n    1356: 11066966338764988954966020552846311185,\n    1357: 11450744886874712432979257653673465667,\n    1358: 11847686435168064074325478460954986607,\n    1359: 12258237518573265193633495987026371935,\n    1360: 12682859654616659385819889316805008574,\n    1361: 13122029840650374087829702479479965035,\n    1362: 13576241067401694028191547060980833568,\n    1363: 14046002849374084164798517831067165046,\n    1364: 14531841772646818920248481411605550560,\n    1365: 15034302060637734370093170532411179780,\n    1366: 15553946158411737537905952886830918329,\n    1367: 16091355336136399592075372322853441977,\n    1368: 16647130312305245611392419213169232605,\n    1369: 17221891897369251284144496300865473815,\n    1370: 17816281658437585657529146257903261665,\n    1371: 18430962605729818628447970674590396131,\n    1372: 19066619901483662703451906966061889217,\n    1373: 19723961592044861669045607586672623550,\n    1374: 20403719363889095930868650315257219250,\n    1375: 21106649324349767740001100592550916016,\n    1376: 21833532807850282420908580590825862986,\n    1377: 22585177208464977793681819296712788065,\n    1378: 23362416839659197789401547387242312544,\n    1379: 24166113822086183031380235679888630795,\n    1380: 24997159000346486985219767235597236100,\n    1381: 25856472889644547994140059803514309099,\n    1382: 26745006653306882839626895694957692242,\n    1383: 27663743112157144914230446319916689190,\n    1384: 28613697786775039130057416743650633105,\n    1385: 29595919973698836617070193875375888205,\n    1386: 30611493856665016404478212802210021309,\n    1387: 31661539654013410832232951778996345076,\n    1388: 32747214803422179685312303680676279243,\n    1389: 33869715185174019207110095647396061120,\n    1390: 35030276385193261591559928994266853030,\n    1391: 36230174999132974647956742131787699078,\n    1392: 37470729978831867653000833781535492047,\n    1393: 38753304022502786601002774984625192104,\n    1394: 40079305010057880061198034072619085310,\n    1395: 41450187485020176719746625583516317963,\n    1396: 42867454184517379844972195257339462150,\n    1397: 44332657618901196005888853882051385939,\n    1398: 45847401702584520468158717245312104000,\n    1399: 47413343437739346154537960139775251600,\n    1400: 49032194652550394774839040691532998261,\n    1401: 50705723795773236966373450556265512689,\n    1402: 52435757789401123913939450130086135644,\n    1403: 54224183941301948277230817879517159495,\n    1404: 56072951919745741389655873424027752720,\n    1405: 57984075791803952210030966295696158116,\n    1406: 59959636127664498822125654803605200455,\n    1407: 62001782172971294457628166694777458740,\n    1408: 64112734091363688056165357762141754716,\n    1409: 66294785279460087023332346767177823090,\n    1410: 68550304756601011890673498202891728627,\n    1411: 70881739631740035679525259959146526016,\n    1412: 73291617649946553739726907624791770380,\n    1413: 75782549821062183481895201583751205263,\n    1414: 78357233133132880842076215608511229415,\n    1415: 81018453353321656721019131504035339537,\n    1416: 83769087919092159661630333467319344902,\n    1417: 86612108922541440552472192615179632742,\n    1418: 89550586190851013626818983550558814889,\n    1419: 92587690465918960312381724727166445110,\n    1420: 95726696686332376146505918443171660625,\n    1421: 98970987374939026118276437676742560264,\n    1422: 102324056135379743432459471263142178485,\n    1423: 105789511261048976512902596439531532566,\n    1424: 109371079460060057837671640558228717300,\n    1425: 113072609699904337559514844445146843472,\n    1426: 116898077175609399692092533607036637857,\n    1427: 120851587405321266865514819340648620862,\n    1428: 124937380457358912643772141796859437854,\n    1429: 129159835312916652764103424563956670300,\n    1430: 133523474368721196662101633251149823925,\n    1431: 138032968084085429989744342641002104875,\n    1432: 142693139776940493084095678732486636969,\n    1433: 147508970573571548730224671300676243591,\n    1434: 152485604516930928407097683383484266510,\n    1435: 157628353838555246722760639034336216136,\n    1436: 162942704399270720489853224525723269795,\n    1437: 168434321304033467550147269349447360294,\n    1438: 174109054696419141315515890296286539118,\n    1439: 179972945738449034728553750103340839325,\n    1440: 186032232781617921513478910563182232444,\n    1441: 192293357735172557401982780429019456969,\n    1442: 198762972637879108865432799270626669004,\n    1443: 205447946439712986100137659510287259781,\n    1444: 212355372000105810413242676805207816705,\n    1445: 219492573309591728816879034317080350983,\n    1446: 226867112941909191440813277312570747145,\n    1447: 234486799743834826784604048875528356971,\n    1448: 242359696770253388472695000770509170206,\n    1449: 250494129472202113601016657658116885375,\n    1450: 258898694145869442049569648660373941152,\n    1451: 267582266650777119653998333871688332247,\n    1452: 276554011405631474170238269248906446792,\n    1453: 285823390670594346502222808229127105074,\n    1454: 295400174124997022998049389765214784995,\n    1455: 305294448749801797154111873648107967492,\n    1456: 315516629024405747970164359073870491229,\n    1457: 326077467447680222173319384811207626600,\n    1458: 336988065393447621514574974879775699372,\n    1459: 348259884310914705271679879631949049780,\n    1460: 359904757280909011630794460361074410538,\n    1461: 371934900939102477916959218389244857418,\n    1462: 384362927777754206102413138268506970021,\n    1463: 397201858837862893052822862772992037235,\n    1464: 410465136803989050790556876831592919085,\n    1465: 424166639514388116438037562729473373486,\n    1466: 438320693899488240621648045435196959242,\n    1467: 452942090362151303283202948578566379295,\n    1468: 468046097613572904390385124958730619192,\n    1469: 483648477979107092056857426409232236010,\n    1470: 499765503188744811845488653259134061244,\n    1471: 516413970667431889729975411863080081224,\n    1472: 533611220340883210895592492267492392503,\n    1473: 551375151973035052959106187501778547015,\n    1474: 569724243051777714078869714336553502625,\n    1475: 588677567240126095472954965375170347997,\n    1476: 608254813410517219620274841577537789254,\n    1477: 628476305280471269092869681239382035111,\n    1478: 649363021668417110482089106581996800736,\n    1479: 670936617389064931646215631627734512060,\n    1480: 693219444808308092528746108408911793239,\n    1481: 716234576078254109447577888083725273959,\n    1482: 740005826073621415936329176309708825539,\n    1483: 764557776051394742131574284792974302805,\n    1484: 789915798056308219059157433980611758115,\n    1485: 816106080095422250986408555099636706156,\n    1486: 843155652105778433840074131252109568468,\n    1487: 871092412739856974449839116812405949463,\n    1488: 899945156994323847635597208986502059289,\n    1489: 929743604708340998940330812008055415670,\n    1490: 960518429958522963981451968247615571768,\n    1491: 992301291378458055449596203783102865285,\n    1492: 1025124863431572512298240504372933893698,\n    1493: 1059022868667002481099668362066093137208,\n    1494: 1094030110989052198741424671895432081910,\n    1495: 1130182509971758083662737515471154158801,\n    1496: 1167517136251048459523457118438435734632,\n    1497: 1206072248027988195015615498189010425646,\n    1498: 1245887328717627537181110407053143579875,\n    1499: 1287003125779035759903231323132670516000,\n    1500: 1329461690763193888825263136701886891117,\n    1501: 1373306420616547671126845059808771245199,\n    1502: 1418582100279183135137313919163744611210,\n    1503: 1465334946617783561814630036179107930696,\n    1504: 1513612653734759530017526259861629678205,\n    1505: 1563464439696213993716384678301014319431,\n    1506: 1614941094722713228367155822930278965324,\n    1507: 1668095030888183105149797247519563263487,\n    1508: 1722980333373639710221714255936544610213,\n    1509: 1779652813323895051112691937493275900640,\n    1510: 1838170062356853750560836014387165897751,\n    1511: 1898591508776536523215092101916644734126,\n    1512: 1960978475542532205781057345396110080746,\n    1513: 2025394240050193548750246784190116959083,\n    1514: 2091904095777554301862779830720186765825,\n    1515: 2160575415856657801620130127396601613839,\n    1516: 2231477718628751807313395954393627156678,\n    1517: 2304682735244622286166458817442330457493,\n    1518: 2380264479373211819043135033180865953593,\n    1519: 2458299319083597933290739975588639913960,\n    1520: 2538866050967394665741511337736337646822,\n    1521: 2622045976570688763353306228619701197220,\n    1522: 2707922981206731940550655607258234921458,\n    1523: 2796583615222784382740474040856321114152,\n    1524: 2888117177796744121961996863481080757250,\n    1525: 2982615803341503976179051696005120224577,\n    1526: 3080174550597354460133578989992600710402,\n    1527: 3180891494495199523837557418419727460583,\n    1528: 3284867820875874297854866890890114734440,\n    1529: 3392207924153452428300151849140308700620,\n    1530: 3503019508013107340706503153715459439135,\n    1531: 3617413689236849218690486699230663550120,\n    1532: 3735505104753300028632631618647052984126,\n    1533: 3857412022010595043668172932897782160438,\n    1534: 3983256452774513571402317362452698824910,\n    1535: 4113164270457046596687344259862579939532,\n    1536: 4247265331083807518632379721321456268679,\n    1537: 4385693598011986873811172464601561040968,\n    1538: 4528587270513945762405321738705440092603,\n    1539: 4676088916345038581429933773569294261235,\n    1540: 4828345608417856657751813260670405103571,\n    1541: 4985509065708793590462102906287902242693,\n    1542: 5147735798526653777473353718656776051935,\n    1543: 5315187258276961029029844229698454778001,\n    1544: 5488029991859677773715074283837789258005,\n    1545: 5666435800842220652541448314024017081118,\n    1546: 5850581905553958890153341953182905874297,\n    1547: 6040651114252811450773802339294340809537,\n    1548: 6236831997519121462431059121804263835744,\n    1549: 6439319068036685669987130768251283335700,\n    1550: 6648312965925656816271400679772663779731,\n    1551: 6864020649797022030147590897007762961557,\n    1552: 7086655593703494823378002063833638733692,\n    1553: 7316437990166946592699616833531354911573,\n    1554: 7553594959467950148686513765206276332400,\n    1555: 7798360765388617440490476800142578927168,\n    1556: 8050977037605691145961262617379106893607,\n    1557: 8311693000936800120986617647413681760089,\n    1558: 8580765711648916968128569908862807858077,\n    1559: 8858460301044367459544239649173485609090,\n    1560: 9145050226546241655095435675456471213374,\n    1561: 9440817530511750873400887128525102883050,\n    1562: 9746053107008968945969854946579275550253,\n    1563: 10061056976799496323982724378320247274070,\n    1564: 10386138570776897699583240005533846228720,\n    1565: 10721617022118294111300879958656795681727,\n    1566: 11067821467414245473548388055474400555521,\n    1567: 11425091357050045737330444087123696839842,\n    1568: 11793776775119777282986614097061549565288,\n    1569: 12174238769162940693809364157051309012420,\n    1570: 12566849690022197996332017608789608083314,\n    1571: 12971993542129749223451407990577313551957,\n    1572: 13390066344539111423681390555352209300441,\n    1573: 13821476503028593889295382128265725457026,\n    1574: 14266645193612571525140101316505187638875,\n    1575: 14726006757806758281011522810861817647486,\n    1576: 15200009110004083021400239371051767831673,\n    1577: 15689114157328479953978540694207577474781,\n    1578: 16193798232344933888778097136641377589301,\n    1579: 16714552539015476523707617004948193446275,\n    1580: 17251883612302523293667801378616630723938,\n    1581: 17806313791832981004049940595952236488989,\n    1582: 18378381710048954709565959117356034045626,\n    1583: 18968642795283648606471174187975250526914,\n    1584: 19577669790214200898277149916663590160135,\n    1585: 20206053286156727802917377116665528100452,\n    1586: 20854402273682788549513827814948445887987,\n    1587: 21523344710050833153156141436233019518750,\n    1588: 22213528103960970088758743797991090055558,\n    1589: 22925620118156604193077050587843661667620,\n    1590: 23660309190412159054931489112539937306848,\n    1591: 24418305173462226026373553546995875617627,\n    1592: 25200339994444087406536213435901662689794,\n    1593: 26007168334442658312725535116810982082161,\n    1594: 26839568328744494665699148030346372021260,\n    1595: 27698342288425638399643940633635778570228,\n    1596: 28584317443916730715736989648170031498488,\n    1597: 29498346711208035625096160181520548669694,\n    1598: 30441309481376795323275876211869020871017,\n    1599: 31414112434139702720919278494304352579875,\n    1600: 32417690376154241824102577250721959572183,\n    1601: 33453007104814231206634568834252067530087,\n    1602: 34521056298307127650200260789840693447039,\n    1603: 35622862432723524773564047600591620474611,\n    1604: 36759481727032834297334619181982868193810,\n    1605: 37932003116763385216396036596083684144149,\n    1606: 39141549257250138871243034824146893141432,\n    1607: 40389277557338916599575631087245664105779,\n    1608: 41676381244462492794128018619459154745923,\n    1609: 43004090462031141893576046232131339283625,\n    1610: 44373673400108265833414174147846823131033,\n    1611: 45786437460370592180018097454654125762209,\n    1612: 47243730456382146639125256475201485557926,\n    1613: 48746941850241791637271332996842921594539,\n    1614: 50297504026695610706485495279896144769485,\n    1615: 51896893605837832676324724372468638684687,\n    1616: 53546632795557357169752166455397628534844,\n    1617: 55248290784921291361962286829338022618145,\n    1618: 57003485179722265948521834701738678421349,\n    1619: 58813883481452695155464304054870553436360,\n    1620: 60681204611006611632952513664174735563434,\n    1621: 62607220478448273296879161314388228250413,\n    1622: 64593757600226437608809675150800761682315,\n    1623: 66642698765254062321100804776702438717922,\n    1624: 68755984751315254218264566880232672144875,\n    1625: 70935616093304583685847007991159666098679,\n    1626: 73183654904848448867540438473174344075670,\n    1627: 75502226754904045590148716826986516533057,\n    1628: 77893522600978716067675261669847531834806,\n    1629: 80359800780661049649804576562965921695475,\n    1630: 82903389063205132690374405132401276101050,\n    1631: 85526686762960833261150746165714536727005,\n    1632: 88232166916496002397533755182876654157205,\n    1633: 91022378525311020523414800627504843113662,\n    1634: 93899948866102260607570160618726171594330,\n    1635: 96867585870588824684642587049077568806146,\n    1636: 99928080576976385190854302771818195507418,\n    1637: 103084309655193176038845274579543287624753,\n    1638: 106339238008096180814672350296895542938848,\n    1639: 109695921450910408688484641855278054316360,\n    1640: 113157509471230885841519620824589853318260,\n    1641: 116727248071985676199747488789041121983568,\n    1642: 120408482699828936375465082551662467674163,\n    1643: 124204661261505763907840490901149694071182,\n    1644: 128119337230805474780434782661196752002675,\n    1645: 132156172848797007097973143732608413596901,\n    1646: 136318942420119455804633282594364118870621,\n    1647: 140611535708182363299559887896839185406573,\n    1648: 145037961432214389489427685180617331098024,\n    1649: 149602350869185430852497209043356597608875,\n    1650: 154308961563716222079735293780517268790662,\n    1651: 159162181149181008424137378091161149008138,\n    1652: 164166531283303096726173462843072095335410,\n    1653: 169326671701640055015539018518705699850330,\n    1654: 174647404392455113639317800019372440640580,\n    1655: 180133677896574006306024799468201257241780,\n    1656: 185790591735932160859341593488427864239206,\n    1657: 191623400974625892978847721669762887224010,\n    1658: 197637520916393159778610138707329017740693,\n    1659: 203838531942564585384018857484505756167480,\n    1660: 210232184494643970555920434333513855824223,\n    1661: 216824404205799439501151597527348613503086,\n    1662: 223621297185671858108005694276757667011704,\n    1663: 230629155463036280733315769829856728366831,\n    1664: 237854462590985052006674013310829555807395,\n    1665: 245303899419437913541037116166052239846061,\n    1666: 252984350039925153650180418719145316631826,\n    1667: 260902907907734605017003921684746498516403,\n    1668: 269066882146662257820916698151184555362272,\n    1669: 277483804041759534527674431707495428212025,\n    1670: 286161433725627991209904771339900788624872,\n    1671: 295107767063974496251592243518106809957385,\n    1672: 304331042746306921569506210339059205494747,\n    1673: 313839749587822198745641666552447374489321,\n    1674: 323642634048715381224461508374001874352425,\n    1675: 333748707977320256428395802157949938763484,\n    1676: 344167256583679214774724367914264615318981,\n    1677: 354907846650332656774577448740278805781989,\n    1678: 365980334987316359577499492665661423156220,\n    1679: 377394877138559089794329589034333523822720,\n    1680: 389161936347082504011271085636055422264324,\n    1681: 401292292786621190557291178310378056588836,\n    1682: 413797053067502749043669672231562125696658,\n    1683: 426687660024856256094871226711613620285845,\n    1684: 439975902797452509721828685778957458838000,\n    1685: 453673927205721269316833783775783610703320,\n    1686: 467794246437739506976775111608393022209053,\n    1687: 482349752052240657962887540925835136720740,\n    1688: 497353725307958208396664918548576500570384,\n    1689: 512819848828887897371554062220903289550130,\n    1690: 528762218615331555088826226879544901167527,\n    1691: 545195356410872371074704272735369048924689,\n    1692: 562134222435726415975597022642148002675881,\n    1693: 579594228497218762288102882601473336765100,\n    1694: 597591251488444805746508999799665944566660,\n    1695: 616141647286498628873307956507246249662412,\n    1696: 635262265061980727342758633558885467930686,\n    1697: 654970462011837401470060834112028353314761,\n    1698: 675284118527933869908522234215965152162520,\n    1699: 696221653814122968723573796976021441661750,\n    1700: 717802041964941442478681516751205185010007,\n    1701: 740044828519446608929091853958115568986164,\n    1702: 762970147504097887787893822256219849371554,\n    1703: 786598738978990637725956554797278124357808,\n    1704: 810951967102164263980984405643613443347625,\n    1705: 836051838727132970358751925465426223753244,\n    1706: 861921022549226171951777077723669881527186,\n    1707: 888582868816776806015468170319304987709289,\n    1708: 916061429623659935353293704664261165680563,\n    1709: 944381479800161498529884419450242134471605,\n    1710: 973568538419648201851756811932637866236071,\n    1711: 1003648890939014757529114525804772812444576,\n    1712: 1034649611991404349880377024889805948451966,\n    1713: 1066598588850232767185892564930056790115492,\n    1714: 1099524545584096492698787529446425808960485,\n    1715: 1133457067922710638072138797746330685194571,\n    1716: 1168426628854604371943988173648061076656356,\n    1717: 1204464614977899904017040550277724793430409,\n    1718: 1241603353626116601935133531509635427501801,\n    1719: 1279876140791574929056038110412443745546155,\n    1720: 1319317269869626093912245397158785002901753,\n    1721: 1359962061247603108750056330533001022811146,\n    1722: 1401846892763077891420050435782921418973709,\n    1723: 1445009231056717653171633051674494164837538,\n    1724: 1489487663845762650867366119648959070605125,\n    1725: 1535321933144897017630429081796659362863565,\n    1726: 1582552969462055408849028210050341395113316,\n    1727: 1631222926997501215103529967929557707274660,\n    1728: 1681375219875327721201833943152266777825092,\n    1729: 1733054559437372469717283290044275542482740,\n    1730: 1786306992630397874710969065930279993530728,\n    1731: 1841179941518278501517284167616876198477309,\n    1732: 1897722243951848075290887164802970670035779,\n    1733: 1955984195429997917538913727371549522655006,\n    1734: 2016017592186583869120124322228807307858970,\n    1735: 2077875775538691593667272042037771337062872,\n    1736: 2141613677532831241625032098057988491948517,\n    1737: 2207287867926682588244859017849269988676029,\n    1738: 2274956602545091757332316519809900057062533,\n    1739: 2344679873050131347512524469147852330603290,\n    1740: 2416519458166178053962910323080826683013954,\n    1741: 2490538976402136614754617183069000726495038,\n    1742: 2566803940314147020741857199436825485292885,\n    1743: 2645381812353354350387072647528700656565179,\n    1744: 2726342062344598291243970336667065409029860,\n    1745: 2809756226643193380147979076327264594704745,\n    1746: 2895697969018322254247325865029474629995508,\n    1747: 2984243143312953802987213049129995837626487,\n    1748: 3075469857931627124375487934417729522202013,\n    1749: 3169458542208911724615579730356050273697000,\n    1750: 3266292014712865596629588272103919719684547,\n    1751: 3366055553539366839888542445766361166135204,\n    1752: 3468836968654792543650918885868953010691040,\n    1753: 3574726676346161983924385238571158169261725,\n    1754: 3683817775839551051322373817401051497424420,\n    1755: 3796206128149322537872121900182662159228241,\n    1756: 3911990437222503807420937006192549828899684,\n    1757: 4031272333444480835500888704164496363681686,\n    1758: 4154156459574067047582172896269352052007031,\n    1759: 4280750559177948266124532321685590709003370,\n    1760: 4411165567636502893727652799725970383582718,\n    1761: 4545515705795050750500358651870382988186314,\n    1762: 4683918576336696329734155119529513589827658,\n    1763: 4826495262955104262123827190438060829061153,\n    1764: 4973370432407778155253526316242844344573385,\n    1765: 5124672439532710418254508515826522600609941,\n    1766: 5280533435313631955425559713040649796775465,\n    1767: 5441089478081518530016413892489308199319929,\n    1768: 5606480647942507023374562583725669127988521,\n    1769: 5776851164524941659873115036048663114937695,\n    1770: 5952349508140909502130662763236950728528684,\n    1771: 6133128544460338166089749412557583307068767,\n    1772: 6319345652798518839604562697210438023241550,\n    1773: 6511162858120786446819766577778364926946013,\n    1774: 6708746966871038378408979787060247103179750,\n    1775: 6912269706733805859936155115580770892194054,\n    1776: 7121907870442710074828422368434553047727682,\n    1777: 7337843463751340976339671250105665526337260,\n    1778: 7560263857685892761905455418833343917244062,\n    1779: 7789361945202278758472065509114228369126600,\n    1780: 8025336302373932563237571980294779250756300,\n    1781: 8268391354240084356595173268406241855198176,\n    1782: 8518737545447984082077112629884273268761094,\n    1783: 8776591515826329476185591848477738781761689,\n    1784: 9042176281031049610986292577509011838783245,\n    1785: 9315721418408596645489064435708989370524469,\n    1786: 9597463258226012911089716132158337004512929,\n    1787: 9887645080421270408475092400425112950304770,\n    1788: 10186517317031728481382143156507032880864866,\n    1789: 10494337760463026157910800552509870425432010,\n    1790: 10811371777765321805152346144711499265489879,\n    1791: 11137892531088517813516189325593809889812108,\n    1792: 11474181204492965595127263976240658672733891,\n    1793: 11820527237297139926370474832027317722017807,\n    1794: 12177228564148905369732416163985994571309670,\n    1795: 12544591862012275060173347722472359244046903,\n    1796: 12922932804266987528897386291108558284524280,\n    1797: 13312576322123804564848753689176255125112158,\n    1798: 13713856873564166596625513497299706749207160,\n    1799: 14127118720018736045636750699617456881311725,\n    1800: 14552716211005418005132948684850541312590849,\n    1801: 14991014076953676011289439394970540421861988,\n    1802: 15442387730448363289492676946827168544596921,\n    1803: 15907223576132871507960364168750022280398562,\n    1804: 16385919329518164710931105850817769087241385,\n    1805: 16878884344951220830025131180984215659580858,\n    1806: 17386539953003552219964871974446413826117272,\n    1807: 17909319807547825412134603270711842061393357,\n    1808: 18447670242798154252456532648116438246904907,\n    1809: 19002050640597405466197703977606842321053540,\n    1810: 19572933808242837304672225027800498209481360,\n    1811: 20160806367149596270203427106156960870472824,\n    1812: 20766169152660030143204019897118002904900168,\n    1813: 21389537625315443974415368124511782893607123,\n    1814: 22031442293915835855052489509763576677617505,\n    1815: 22692429150702307814484325155610270148732358,\n    1816: 23373060119006260978552660565770602425866730,\n    1817: 24073913513719160198707702330267411589158084,\n    1818: 24795584514946598972622146485353975132184526,\n    1819: 25538685655220618058549873928821959736691905,\n    1820: 26303847320654738379516399526912590943781620,\n    1821: 27091718266436968469332058999564180929593866,\n    1822: 27902966147067146894819024985472934375689121,\n    1823: 28738278061756389082181003004910619210874204,\n    1824: 29598361115418134291077518460315335403586750,\n    1825: 30483942995692340860959609721949330792795099,\n    1826: 31395772566456765282571775715588003409132613,\n    1827: 32334620478291992350263579043602637456626234,\n    1828: 33301279796379969106727880491661424703794769,\n    1829: 34296566646329244238310747147664839490574535,\n    1830: 35321320878433937019039707727760782467717785,\n    1831: 36376406750887666110543978036746824592455791,\n    1832: 37462713632488269058784695792011875893039111,\n    1833: 38581156725384149030225659607573893303383795,\n    1834: 39732677808428507338475836002967756141425565,\n    1835: 40918246001723570069537718918088365292496141,\n    1836: 42138858552953206373244111655326855421732185,\n    1837: 43395541646119076823784928057386091817027588,\n    1838: 44689351233312655065605577356497222364030752,\n    1839: 46021373890173147491957400810472661489846635,\n    1840: 47392727695699507038180086415408337440470086,\n    1841: 48804563137103411752378288723762455918172986,\n    1842: 50258064040409270440055764682612968116562013,\n    1843: 51754448527527040549257397842950059733038281,\n    1844: 53294970000543912137117431914902281880953875,\n    1845: 54880918154001741201408795026747551723720527,\n    1846: 56513620015948521242261975310131861303268895,\n    1847: 58194441018574179427502571579696887885537742,\n    1848: 59924786099263589386584792985885004002385100,\n    1849: 61706100832922923109471297093651456522575000,\n    1850: 63539872596459336786702846316806859551222764,\n    1851: 65427631766318517268030842666066129833124679,\n    1852: 67370952950009825188774721810114716943378422,\n    1853: 69371456252574676254257996014226320491002233,\n    1854: 71430808578980422724679205565325409535341535,\n    1855: 73550724973449352362958820460243849915161295,\n    1856: 75732969996760532083864127998517020593740791,\n    1857: 77979359142591108905489195759391328910134418,\n    1858: 80291760293993362744249170815935430293952943,\n    1859: 82672095221134305875868191384112819286758200,\n    1860: 85122341121455964860570648618210990142492639,\n    1861: 87644532203446685358824902714882088097498633,\n    1862: 90240761315246892123800470058435668367783935,\n    1863: 92913181619346739765141403639335218061558813,\n    1864: 95664008314668029507699782676107535163671365,\n    1865: 98495520407358668662814112828386043342039288,\n    1866: 101410062531664839123433827120996801871554118,\n    1867: 104410046822283945831589672011997862390810762,\n    1868: 107497954839640363519148716631132136446924023,\n    1869: 110676339549566018509524250906452596245408440,\n    1870: 113947827358908961175629034752466582068886470,\n    1871: 117315120208635333752283890034504840221064086,\n    1872: 120780997726033548383095326244127836720276225,\n    1873: 124348319437674093156601079636921240241787962,\n    1874: 128020027044824211921357710559027384266649000,\n    1875: 131799146763063790207250005304405120478900361,\n    1876: 135688791727897158862480183289001251910301886,\n    1877: 139692164468205234207238255169848532611147557,\n    1878: 143812559449433484718637448310794816419480218,\n    1879: 148053365688463686582704780998822076298210405,\n    1880: 152418069442171341962802939167993644252844977,\n    1881: 156910256971726023650131079907915129924767174,\n    1882: 161533617384748818044426030157299715901448409,\n    1883: 166291945557499506406187783344043042314534878,\n    1884: 171189145139326194380356742395417581059236130,\n    1885: 176229231641671815409487530302217850452007387,\n    1886: 181416335613995339496338175675291780004357523,\n    1887: 186754705909030660706666553292223320927706878,\n    1888: 192248713039873061921465120214608474899151280,\n    1889: 197902852631451912018290889751846175017276700,\n    1890: 203721748969018888548080806839085873409222663,\n    1891: 209710158646353589075380551065506324110555541,\n    1892: 215872974316462949034790068311792114803360768,\n    1893: 222215228547627476999327377660931337519227930,\n    1894: 228742097787726004875938672290676073251112495,\n    1895: 235458906439851487440117948662414751746035425,\n    1896: 242371131052313431017875037233367567350390976,\n    1897: 249484404626207844803286441041017222801266718,\n    1898: 256804521043823251651497040551112296246458295,\n    1899: 264337439621241331244215401011574782781334700,\n    1900: 272089289788583262011466359201428623427767364,\n    1901: 280066375901447845568248481717977121765830398,\n    1902: 288275182187185106927480861934498895209154826,\n    1903: 296722377829749335448869068867067104949579464,\n    1904: 305414822196978537321624475491324386207138350,\n    1905: 314359570214253084228181897886953506729950270,\n    1906: 323563877888595040544848710079341268243350278,\n    1907: 333035207987381310882223234930566921371066351,\n    1908: 342781235875958450915909855966319285240611144,\n    1909: 352809855518564809408156722848357746339640390,\n    1910: 363129185647086702371268910149149152584766993,\n    1911: 373747576102299648025575523786476989131026713,\n    1912: 384673614352373402423945044973430693054218643,\n    1913: 395916132193550721591800039752382776657876433,\n    1914: 407484212638044530444951338680763930621994820,\n    1915: 419387196994336597778328640988515637140928750,\n    1916: 431634692145202999016827948773519398239274548,\n    1917: 444236578028937695571550278721551746219224713,\n    1918: 457203015329395575643972370763403591173830810,\n    1919: 470544453380630393038248327984084169870052370,\n    1920: 484271638292061317700921219995285769876393805,\n    1921: 498395621300264386957594139661914904785275330,\n    1922: 512927767353652135411965358701027725220931707,\n    1923: 527879763936476202951968110645920036905758794,\n    1924: 543263630138763896173977941441058199308011100,\n    1925: 559091725978980633941148481298313317618632967,\n    1926: 575376761986396071222827176058084413124270202,\n    1927: 592131809050322598728023510231907577504041350,\n    1928: 609370308543590994569721078158344505753246979,\n    1929: 627106082727829397306582084065079630894972195,\n    1930: 645353345448318619933615779058934561872409372,\n    1931: 664126713126409278261223804893870154281524038,\n    1932: 683441216057704415059243252710086070145621992,\n    1933: 703312310024435417776917212697059694728111811,\n    1934: 723755888230689211116144545349876787252027480,\n    1935: 744788293569381118983800284897623329523811384,\n    1936: 766426331230110600455862693324715237997598939,\n    1937: 788687281657286442867926694461098498097562065,\n    1938: 811588913868164118077309502293768840003949925,\n    1939: 835149499140701056072067990291237777551833530,\n    1940: 859387825081405748983159033075649135425638325,\n    1941: 884323210083634058665255574996164926064666511,\n    1942: 909975518187071057883524303147934812769277935,\n    1943: 936365174349429389500998978473009079907862954,\n    1944: 963513180141695685953126594506747030515761180,\n    1945: 991441129878565264237073831290682236831192947,\n    1946: 1020171227196022316757683410004293870517496706,\n    1947: 1049726302088348378540247976304143049122065214,\n    1948: 1080129828417176195331669321286587690711167057,\n    1949: 1111405941905549479818145590739116367242780000,\n    1950: 1143579458630301665664240006110545368915059329,\n    1951: 1176675894026428898785508782184245465533665048,\n    1952: 1210721482417504396219216523662601652136179376,\n    1953: 1245743197086563215894590527223118960072913202,\n    1954: 1281768770902278683167516719540860443130307320,\n    1955: 1318826717515654486899160825985211020969456836,\n    1956: 1356946353142870071117550937780046987060960843,\n    1957: 1396157818950341697358512735475562356104045295,\n    1958: 1436492104058497734745724852296636956267964954,\n    1959: 1477981069181214654702422049514025480619599210,\n    1960: 1520657470918320177914639277247113472181645153,\n    1961: 1564554986719042364085227429425894281463674979,\n    1962: 1609708240534768479916261201915809290266567989,\n    1963: 1656152829179975566133060952832169077820577902,\n    1964: 1703925349420706097654088225457498186848567210,\n    1965: 1753063425810487348828764073209783931216955698,\n    1966: 1803605739294132404035202382553315081341190088,\n    1967: 1855592056600414568536728473961840601327835478,\n    1968: 1909063260445175620937659060948648856259756235,\n    1969: 1964061380567012302624155966071951926644451875,\n    1970: 2020629625618285067432170725261207144994992239,\n    1971: 2078812415934808833368620144510853807585221613,\n    1972: 2138655417208217715431844885515291279369574680,\n    1973: 2200205575085644913617857845505033592721522553,\n    1974: 2263511150722025533817142690940119270064496250,\n    1975: 2328621757311014594133664064174539456980750339,\n    1976: 2395588397621215290008835331658621643021314292,\n    1977: 2464463502565134245725579502592034085209328984,\n    1978: 2535300970829021467547395315846813198183591546,\n    1979: 2608156209592513548223075037746157905702847505,\n    1980: 2683086176367779880674969950590007819202341357,\n    1981: 2760149421988673761061033114268064448054050548,\n    1982: 2839406134781213852952373747778159055380262422,\n    1983: 2920918185947567114582770377976676661508796149,\n    1984: 3004749176196572544459946686955919368234128060,\n    1985: 3090964483654736576896042159262866214940589314,\n    1986: 3179631313092546273793802882159493889001969611,\n    1987: 3270818746501886244063493400323024051287288941,\n    1988: 3364597795061310125684361619251416376860936489,\n    1989: 3461041452526908153028282986522280729367368365,\n    1990: 3560224750087529486464584716859554522268776125,\n    1991: 3662224812724162303217742306542356590926722479,\n    1992: 3767120917114346857096063738777247515406335526,\n    1993: 3874994551123597548057533501867770741416429535,\n    1994: 3985929474926940257994009093217001343955328335,\n    1995: 4100011783804831583821441379839563991285227198,\n    1996: 4217329972658917930562969936711305445974785514,\n    1997: 4337975002294315534109569503386742455494341143,\n    1998: 4462040367516348205694592687945941817364967127,\n    1999: 4589622167090968789784046573687400867942870250,\n    2000: 4720819175619413888601432406799959512200344166,\n    2001: 4855732917379000237574365609687488912697273143,\n    2002: 4994467742183366148074839035447416380393781644,\n    2003: 5137130903316893622770745464235084139384928426,\n    2004: 5283832637599517075572081746564260420858901705,\n    2005: 5434686247639634059061258993904042430607990074,\n    2006: 5589808186334383050291570992756471405633041387,\n    2007: 5749318143678144230778676663789672984169195116,\n    2008: 5913339135941752405965378691599572441324623941,\n    2009: 6081997597286587859405678030809218670282246785,\n    2010: 6255423473879432172551153347179787953125682826,\n    2011: 6433750320575743037411316728215679204642749660,\n    2012: 6617115400240816052275556661314890288999332009,\n    2013: 6805659785780163657391920602286596663406217911,\n    2014: 6999528464952353007567067145415164276505069670,\n    2015: 7198870448039506994791503590601126801607534137,\n    2016: 7403838878452687162912842119176262318542314409,\n    2017: 7614591146351445269661694564912786246445478891,\n    2018: 7831289005358953156344654888013498638339711692,\n    2019: 8054098692456299826324570548607480763080403880,\n    2020: 8283191051141781691732068101840743191755759916,\n    2021: 8518741657943308344041302580996941768179250799,\n    2022: 8760930952374403498169602637389577451855415964,\n    2023: 9009944370426700552244228695797096011740585251,\n    2024: 9265972481694316138437595284729122693073711400,\n    2025: 9529211130228034799395854632912272457677896880,\n    2026: 9799861579219855238744997642818047729388291567,\n    2027: 10078130659621135236933601810787303619515113811,\n    2028: 10364230922800330115415428619787879783434758914,\n    2029: 10658380797349150440403847607713189208549844510,\n    2030: 10960804750148870398245267228037581609577682339,\n    2031: 11271733451811500913798689538973402825112404379,\n    2032: 11591403946613603138135282386492611425148475178,\n    2033: 11920059827043660471886625110700606109457615243,\n    2034: 12257951413087152938966999455842406831025654415,\n    2035: 12605335936376788660643906067688568691477294599,\n    2036: 12962477729338745637101954446070534143126297085,\n    2037: 13329648419469265315863347103932314055721954884,\n    2038: 13707127128879519866370496154104287110788727040,\n    2039: 14095200679250350101462435045670967566714006190,\n    2040: 14494163802342243065803242497250145705564482929,\n    2041: 14904319356209789989230727462504226498494263931,\n    2042: 15325978547273839186092526952960232758544597811,\n    2043: 15759461158408637244144834830819680263402565217,\n    2044: 16205095783205438232082764786847977319531548455,\n    2045: 16663220066578357477963673318612506891057322162,\n    2046: 17134180951882656619355889974597586372298980947,\n    2047: 17618334934720173062514849536736413843694654543,\n    2048: 18116048323611252751541173214616030020513022685,\n    2049: 18627697507717313357328883548487129542980353125,\n    2050: 19153669231803058848943059805108758933859747374,\n    2051: 19694360878632389188479682121479772827588278091,\n    2052: 20250180758997203961018562965051517467373563574,\n    2053: 20821548409583589567679943310731809893410960813,\n    2054: 21408894898885309715106534167513145969112337635,\n    2055: 22012663141380091963647773040348591535494857021,\n    2056: 22633308220189922777870335143856096247251187948,\n    2057: 23271297718452433681930253947266040250043569734,\n    2058: 23927112059636485682887466272819725468557276242,\n    2059: 24601244857041242112722641487525252331485884885,\n    2060: 25294203272724365584159904646608138971697036406,\n    2061: 26006508386111487092631615069752229687889047419,\n    2062: 26738695572545778772495897103306702147812265676,\n    2063: 27491314892043320887814631666080168776331811888,\n    2064: 28264931488526992879603605279805458570836160570,\n    2065: 29060125999818842393508123538658855855869573724,\n    2066: 29877494978678299986437859187588252356283557915,\n    2067: 30717651325181215594079225685922159612710890246,\n    2068: 31581224730742500897001026737587458361246031363,\n    2069: 32468862134093174645484430948409904593113694670,\n    2070: 33381228189530831120385246576357623531476650368,\n    2071: 34319005747770990684777087747947525376490393829,\n    2072: 35282896349735451425203004555804514075824949148,\n    2073: 36273620733622647942922713748119798292462316154,\n    2074: 37291919355614143333586997222803939193763027250,\n    2075: 38338552924580739339245889549713324449360541521,\n    2076: 39414302951161293776274047281093717842584188891,\n    2077: 40519972311597190003244878215733219997449415843,\n    2078: 41656385826715516924455731088372893657996361228,\n    2079: 42824390856464396526209228476474575762774879465,\n    2080: 44024857910414546084950481401735302373848095782,\n    2081: 45258681274652091016547586287700221970008068755,\n    2082: 46526779655498859083237494859206365034702358134,\n    2083: 47830096840507894753763929606166424148960110424,\n    2084: 49169602377193741528342591922356853935149504975,\n    2085: 50546292269969157794099110029993948769746687671,\n    2086: 51961189695772366269783089381199090558960547606,\n    2087: 53415345738881696537662435419712492307334180478,\n    2088: 54909840145427572963129830596638040418770704515,\n    2089: 56445782098125235102442269204682620745124030885,\n    2090: 58024311011765363351557172881384457469348901699,\n    2091: 59646597350013928176910703744766844433767270677,\n    2092: 61313843464087096107973721257849778294625405081,\n    2093: 63027284453881919316292784641070835053831354052,\n    2094: 64788189052158817856342546799691255570877518150,\n    2095: 66597860532387544551063529093372826237515675728,\n    2096: 68457637640884412378329010378860869685804024262,\n    2097: 70368895553885073626926030071097479233359907864,\n    2098: 72333046860214079886074787715712944920415424984,\n    2099: 74351542570229833233029956235268391407949627875,\n    2100: 76425873151741373195807749021080021459080291165,\n    2101: 78557569593611742891613633197716231871513782517,\n    2102: 80748204497781453174729297053600127492388932998,\n    2103: 82999393200464827976246067679320326020971457938,\n    2104: 85312794923291779902869927934730036659721510375,\n    2105: 87690113955187845526792666366851401712801134274,\n    2106: 90133100865806117918203480753613859038381596324,\n    2107: 92643553751346063460833585063932351673594098859,\n    2108: 95223319513616114811576859302283546424619314506,\n    2109: 97874295173219406337291510865301717288885200445,\n    2110: 100598429217765077170980775830078597915978709260,\n    2111: 103397722986031225236603653787203378188231402292,\n    2112: 106274232089029868642533106912359104776603150690,\n    2113: 109230067868949174578477633685673008965957469120,\n    2114: 112267398896973766514395710229044460157179222920,\n    2115: 115388452511010134752244464747991318862444784689,\n    2116: 118595516394371070307305070689995677519803374830,\n    2117: 121890940196500635216372474879596908517840948778,\n    2118: 125277137196849491653446187682001921308870438795,\n    2119: 128756586013039456106279781429309224204637155235,\n    2120: 132331832354485942225817194731144948296095338913,\n    2121: 136005490822677526183628341619662696228169437779,\n    2122: 139780246759343231332496879136294914183920566235,\n    2123: 143658858143770305041408732118198629930850140819,\n    2124: 147644157540568270666807354340091712330909224000,\n    2125: 151739054099208903158067016467162544501125246216,\n    2126: 155946535606706519753573960842521384418556790909,\n    2127: 160269670594838620141199867367375227901178121673,\n    2128: 164711610503343476443764262455655533446463188624,\n    2129: 169275591900568786145109713871008667212574145360,\n    2130: 173964938763083984897646967444489323060065487907,\n    2131: 178783064815808295968062329270497666350416021621,\n    2132: 183733475934247094438727208707795835845879643176,\n    2133: 188819772610470713392617031395550078686410106988,\n    2134: 194045652484512443040038057363040342445733893240,\n    2135: 199414912942906199650168544999618866932966543484,\n    2136: 204931453786129197483756438132982529754356479553,\n    2137: 210599279966760972657750340621024569609658319243,\n    2138: 216422504400217312716806872498425178952708753752,\n    2139: 222405350849966070103844047835296998593257719870,\n    2140: 228552156889181512949138540918848061266047740791,\n    2141: 234867376940844824665120188180587152072518199582,\n    2142: 241355585398350637585388084310633650150819331465,\n    2143: 248021479828733108998565670865001643954560554353,\n    2144: 254869884260680054932039940494913967190530868955,\n    2145: 261905752559560083345100350260758248905652921875,\n    2146: 269134171891745550301357546978902318483150550307,\n    2147: 276560366280573537433149830945908221546675684073,\n    2148: 284189700256347954756384460822072399114186994724,\n    2149: 292027682602848348780952829894171946286185196525,\n    2150: 300079970202875082019467410865495625479979094694,\n    2151: 308352371985426287572392634796034918345831989966,\n    2152: 316850852977169433649870812195036854291507911207,\n    2153: 325581538460939500937426146405250734530774231825,\n    2154: 334550718244066724977417207615678241114465752975,\n    2155: 343764851039409631696645200323540686552303329604,\n    2156: 353230568962043743490045985418104968175497835998,\n    2157: 362954682144632903677995273534058279957414924705,\n    2158: 372944183474588707707117294510467908715140736065,\n    2159: 383206253456204090418195791785818308423831594945,\n    2160: 393748265201029751587449904786884268416346918520,\n    2161: 404577789549846859589538794509144411672022826612,\n    2162: 415702600329676409598230534926593885982499170401,\n    2163: 427130679749354783768755297437892949499654467597,\n    2164: 438870223937296523272831771890659665602286473475,\n    2165: 450929648625159134260052749493609306300370136632,\n    2166: 463317594981220971649101966934064855005088490212,\n    2167: 476042935597381937471938911243959272191670950572,\n    2168: 489114780633797957215706040263930987465371910798,\n    2169: 502542484125264022730810437527574105649622691760,\n    2170: 516335650453567079927347553251246871212620557984,\n    2171: 530504140990139261462232960508189648909724886170,\n    2172: 545058080913453988432836606455557467047353067377,\n    2173: 560007866205722361999363584087410496745060913524,\n    2174: 575364170833565108914383039346175332072363129225,\n    2175: 591137954117456209042263051672264094963902965317,\n    2176: 607340468294858294890172396576637459876728673686,\n    2177: 623983266282097051667127111749751355541610352255,\n    2178: 641078209640152242143041148426227499209194350336,\n    2179: 658637476749676716333547258428298949880301221655,\n    2180: 676673571200691926609848235322274189175428592431,\n    2181: 695199330402549141183113024435698489390907024630,\n    2182: 714227934419889822186067591088150189762713935508,\n    2183: 733772915040486600160233205517764582904605949651,\n    2184: 753848165080998028345195047409661205734061410010,\n    2185: 774467947936825933802831039011913166290856798904,\n    2186: 795646907382423796556925927113569848920749045025,\n    2187: 817400077628568283525440629036885986580578161120,\n    2188: 839742893643273944545131128461036809985928936965,\n    2189: 862691201743203249313515607587263855592485446510,\n    2190: 886261270462600715344592984957682094231262687955,\n    2191: 910469801706960959527768615813845716032362752763,\n    2192: 935333942198826213870111109341848015258586306792,\n    2193: 960871295223299296636466125655717340185883228697,\n    2194: 987099932681053343467853379878084516482176109430,\n    2195: 1014038407456819902258601282188003020164821077713,\n    2196: 1041705766111542406799393149921058024912789843193,\n    2197: 1070121561906592696806185003711836723976318646033,\n    2198: 1099305868168664278558814578725663660095230751347,\n    2199: 1129279292004177556899411779284367814322107068750,\n    2200: 1160062988372259455129906418328374912794875140516,\n    2201: 1191678674525592817234330378465180518007035567938,\n    2202: 1224148644828669903250292851179037002332204681842,\n    2203: 1257495785963229293609758350537517985043490101070,\n    2204: 1291743592530906765707814604565428064732892610835,\n    2205: 1326916183063388353539586696826007823016666575690,\n    2206: 1363038316450618010620081932775702626766948267742,\n    2207: 1400135408797883233268006240578157606704308520406,\n    2208: 1438233550722879835539717164127729784341377881813,\n    2209: 1477359525104141972742451850876428128946776467300,\n    2210: 1517540825292515665993072463432902551892845533240,\n    2211: 1558805673797653668641491334803497135876242089678,\n    2212: 1601183041461816724044580259727354612842328867083,\n    2213: 1644702667133581285344348736857245137869671730074,\n    2214: 1689395077854376798567156661483099222514277324220,\n    2215: 1735291609571106892437555774714449031725527460139,\n    2216: 1782424428388448478757191595009703327418571383436,\n    2217: 1830826552374771058174587388568897962322872702465,\n    2218: 1880531873935975665104704330318867749822093808655,\n    2219: 1931575182771919095318938056959674511017686068185,\n    2220: 1983992189430464568754141912398798172706580941262,\n    2221: 2037819549474585022525115674537508812727151594151,\n    2222: 2093094888278340044956073813211683523416074682898,\n    2223: 2149856826467952296650447653773869417501164619869,\n    2224: 2208145006024624371311040214176565237134381870625,\n    2225: 2268000117066162685610486257867691977952149636083,\n    2226: 2329463925324911418747662088887963091854286975547,\n    2227: 2392579300339947019867081675868949317697298397221,\n    2228: 2457390244381942643492189138307718097264928854677,\n    2229: 2523941922129582344692758164350149756471869195790,\n    2230: 2592280691116887259141942758496845583141659899537,\n    2231: 2662454132971310608073787558386111506684369385813,\n    2232: 2734511085462965511444391934177140596906494183587,\n    2233: 2808501675385869578994261445169376899379754972068,\n    2234: 2884477352292623400907075579322579400861330771315,\n    2235: 2962490923104486707892612022451087039141493329190,\n    2236: 3042596587619376453548710860694923114675620792521,\n    2237: 3124849974940885736970186673957557524827120772983,\n    2238: 3209308180852011686602310843936272621314792055526,\n    2239: 3296029806157884531966398832249411659082252110525,\n    2240: 3385074996022409471869790373849802994298808805690,\n    2241: 3476505480324367989101580130555189921672623462046,\n    2242: 3570384615059176354982401320439389024740905215964,\n    2243: 3666777424813166614813801947045518673161561892966,\n    2244: 3765750646337939759592154130429553527537766985115,\n    2245: 3867372773253042492891322334008521298830352179629,\n    2246: 3971714101905938427653556222571377434088646307540,\n    2247: 4078846778418982139592272233327190495676444439866,\n    2248: 4188844846953860716858469962505733762730156946697,\n    2249: 4301784299224742745702713528067084946594634381000,\n    2250: 4417743125292169536796493320206228992803910550343,\n    2251: 4536801365670538316236136117174461033288094273661,\n    2252: 4659041164782862580763013973003868359053553220232,\n    2253: 4784546825797351362566231731168417844332785838733,\n    2254: 4913404866881227292111965728061869527659853830530,\n    2255: 5045704078908103627757617096847635981526636026359,\n    2256: 5181535584656163391837451036356625290841516214407,\n    2257: 5320992899535329981545125277691916180855473998805,\n    2258: 5464171993882588690437588095807084889323827738187,\n    2259: 5611171356865613078294130300389571289206397311350,\n    2260: 5762092062035869673687412904560243239930531635515,\n    2261: 5917037834573419710379575999541430738890622626340,\n    2262: 6076115120266708126452900640242923623341866228338,\n    2263: 6239433156271728550695355451490575993085942292134,\n    2264: 6407104043696079137218319509378718229702705761905,\n    2265: 6579242822054578576274630855578948789533455298734,\n    2266: 6755967545644295113522674510292835122483775946206,\n    2267: 6937399361888054675782970897485983723264323011797,\n    2268: 7123662591696737970806754341094737575112103730614,\n    2269: 7314884811901951462222340761939935289641834289395,\n    2270: 7511196939811964197947649707463044206175866380723,\n    2271: 7712733319945142389521924617582058172801542180874,\n    2272: 7919631812996487219317452100595913257543028088576,\n    2273: 8132033887094289430962576814720449927838393960827,\n    2274: 8350084711405357694774361105408889911972402015300,\n    2275: 8573933252148757415018198504928925593185861873742,\n    2276: 8803732371079513461579268567498022304249933730391,\n    2277: 9039638926505285189617314422998964084970595438542,\n    2278: 9281813876900616004271298745383250743059729594527,\n    2279: 9530422387184993604151073155371828079705355168950,\n    2280: 9785633937732631891816046069641124632254214557235,\n    2281: 10047622436183602390848394841406802515973193043806,\n    2282: 10316566332127702901769041143039403233989122380996,\n    2283: 10592648734734255132957468343310308444321456043571,\n    2284: 10876057533402872254341014560334244700946683620780,\n    2285: 11166985521512132864360358955503173717957792328653,\n    2286: 11465630523345040885726361109312137419668093929920,\n    2287: 11772195524272142592252579142228927699835475405262,\n    2288: 12086888804275213526126666074714236379441857513978,\n    2289: 12409924074896520730686758323108856061617655222490,\n    2290: 12741520619700810766902679602920740106349316265795,\n    2291: 13081903438339372702369995825105861818651826992639,\n    2292: 13431303394307778991751050067148151893379620506077,\n    2293: 13789957366491217272065156663906255405414311071587,\n    2294: 14158108404593693973445004415760318309772932242370,\n    2295: 14536005888549817728742960090051403934327801222156,\n    2296: 14923905692020358321733692442892587286459907678047,\n    2297: 15322070350075326847761463298913968554265401515217,\n    2298: 15730769231170936413643835624649288938501733002618,\n    2299: 16150278713529481654471379166675899361510665760775,\n    2300: 16580882366033921211442301450921091904365926280416,\n    2301: 17022871133751761754598643267756804218108498650480,\n    2302: 17476543528205726845562009156571175360531579106807,\n    2303: 17942205822511650658087298129211531345495818175057,\n    2304: 18420172251507067091174412069974707159021665744880,\n    2305: 18910765216997070947078996545777114475682919623589,\n    2306: 19414315498247211476154846356983916621521411447697,\n    2307: 19931162467856441629277246980513463599759674413041,\n    2308: 20461654313146490770914182133145338856645809727187,\n    2309: 21006148263207456404192932627622104852595304280970,\n    2310: 21565010821742923705373368869534441911701199887419,\n    2311: 22138618005861522471365237940368652982888104075000,\n    2312: 22727355590965521614482418924663783733921186781149,\n    2313: 23331619361890843810727406215610806254135308857160,\n    2314: 23951815370456759593096244705083096637451017834880,\n    2315: 24588360199587493406897494649744406335205727290057,\n    2316: 25241681234172046294108468111219387029991510514102,\n    2317: 25912216938832713390963025920891990759428674050912,\n    2318: 26600417142777051809706408361950504454660772072685,\n    2319: 27306743331912438295458811467722364839525869129400,\n    2320: 28031668948406848928849481174161195141360108410956,\n    2321: 28775679697884097775242882020060349688803476984805,\n    2322: 29539273864446490518541231137563989837057604952179,\n    2323: 30322962633722685585711432023667002655631855893969,\n    2324: 31127270424143511960418282768032077800615961592375,\n    2325: 31952735226653572764265207581869821725011637243487,\n    2326: 32799908953071669788426324706615644528794262188810,\n    2327: 33669357793318419597396187557448074241909961160527,\n    2328: 34561662581734899786701292837993789078148269659948,\n    2329: 35477419172721767722086620675579581559062365395875,\n    2330: 36417238825934036963035091771377814636876895938849,\n    2331: 37381748601272582004301821355152191840543933044480,\n    2332: 38371591763919473464910961559285225914454949449279,\n    2333: 39387428199670427009917909560877277324279071654230,\n    2334: 40429934840823983789090419362572880622618841036000,\n    2335: 41499806102893531791299424581039874366426784160676,\n    2336: 42597754332414930108684698464207986438238414531147,\n    2337: 43724510266129315639709919648795164529190983190550,\n    2338: 44880823501827658290753362113015735891775860228025,\n    2339: 46067462981150790416506320013365490407603364278280,\n    2340: 47285217484645973326080769865489605746387338228688,\n    2341: 48534896139388582534016509015707084448606794509814,\n    2342: 49817328939485198519236927086579980055136752412153,\n    2343: 51133367279782285645165745517535680609133370052296,\n    2344: 52483884503112733276871946748564813602003527319855,\n    2345: 53869776461420824806590383880147822175719204551469,\n    2346: 55291962091114697184508819760614991511857392669436,\n    2347: 56751384003004060684283391440819878903446789803099,\n    2348: 58249009087189871171927544609837628960380623034142,\n    2349: 59785829133281790377677305788784327434428364970750,\n    2350: 61362861466328639006942053695686748622617850877171,\n    2351: 62981149598856648513992946515066172932792511110884,\n    2352: 64641763899420155681002068750650481144652897951882,\n    2353: 66345802278079465613952539750862814246981008871159,\n    2354: 68094390889230939345801166300675543634997580023495,\n    2355: 69888684852224948030989898005576415781403878920995,\n    2356: 71729868990218182977254525351745038902483193889528,\n    2357: 73619158587717925895914811729724245783180985354842,\n    2358: 75557800167287273321320320811040130784252221919060,\n    2359: 77547072285891979874115998945868567670402747044445,\n    2360: 79588286351381543804941144999617740627898062871643,\n    2361: 81682787459609412105690788920445375282931841060492,\n    2362: 83831955252709738636327407566454519669269037443061,\n    2363: 86037204799060994583504133500298291142599767525961,\n    2364: 88299987495479913719532319572840702828357104994815,\n    2365: 90621791992202763126914659986946872015595738278003,\n    2366: 93004145141224771243446359569837640488487305606833,\n    2367: 95448612968582727407224954007027627693270062216153,\n    2368: 97956801671180298878693599735216669857785613237715,\n    2369: 100530358638770501129135789786132580428696541463525,\n    2370: 103170973501725013759939661850158896906366983382795,\n    2371: 105880379205235666714568162057607929186246674835477,\n    2372: 108660353110609438642727243903401536959027659486124,\n    2373: 111512718124334720773264584058717478384571245088082,\n    2374: 114439343855613415076071522953096149591716910973500,\n    2375: 117442147803070664704054798350668120890654926300513,\n    2376: 120523096571371667803183996442776155815729810091602,\n    2377: 123684207118493113105268436573489685721321552781151,\n    2378: 126927548034415307868377394917913546501247383867613,\n    2379: 130255240852020056553944404306572055559539047530145,\n    2380: 133669461390998803240347188535274022509125836065110,\n    2381: 137172441135595483551688849972013947996581871778170,\n    2382: 140766468647028954484433593096055372616292751308832,\n    2383: 144453891011460794882135190497537058556764977948995,\n    2384: 148237115324395707667015292482470242745754168289775,\n    2385: 152118610212423719809411357105042520067307779240520,\n    2386: 156100907393235880227548485941067592747534460439448,\n    2387: 160186603274868212495995174730244824826286924759060,\n    2388: 164378360595152301854136694694118079266206458932708,\n    2389: 168678910102375098323537690529566365095195830119715,\n    2390: 173091052278175313875346442702502205694341724313429,\n    2391: 177617659103729195986746184184236646145304254737028,\n    2392: 182261675870304487388520687355584130250935690880972,\n    2393: 187026123035288047490867195922886699634867141186408,\n    2394: 191914098124819930404162679326110679178204492902970,\n    2395: 196928777684194703542432119373410255613845416290627,\n    2396: 202073419277219465790162920942761564437025278844409,\n    2397: 207351363535747401800832745531222095970123079470866,\n    2398: 212766036260635806253027202800291886071043511130893,\n    2399: 218320950575408346303872686615815518603736687265550,\n    2400: 224019709133932919957689061390552862746031758458304,\n    2401: 229866006383458830949778967121025947053151071434926,\n    2402: 235863630884390155812442175854014517889393984836232,\n    2403: 242016467688206145276344061824939391497289921344319,\n    2404: 248328500774974299762177021852107412058234599633660,\n    2405: 254803815551937407606287486346848530864431251682411,\n    2406: 261446601414692355496335282873363983668020889836360,\n    2407: 268261154372515934523018586706764224652758295238166,\n    2408: 275251879739431193944393927980843975448015734231456,\n    2409: 282423294892647160394499527988292633580813431968720,\n    2410: 289780032100044965565638185282633831588088504297253,\n    2411: 297326841418424633617945474627449518623223932967198,\n    2412: 305068593664268994544312629723329236676843814611957,\n    2413: 313010283458824435839645487672681448751536128120719,\n    2414: 321157032349342507073515697424466804962980378707300,\n    2415: 329514092008371775927573078641257544141430283832310,\n    2416: 338086847513035826131406156272669425469096435441169,\n    2417: 346880820706280914339971199061511110032851886967137,\n    2418: 355901673642125591813707043622534952223283339280101,\n    2419: 365155212116994575920151188842851740380508864908970,\n    2420: 374647389289270354779812696943359199223073776527524,\n    2421: 384384309389248455327267290257609074709972871788879,\n    2422: 394372231521736030856900123129107963761511852907062,\n    2423: 404617573563588459702218138566029837845857058362469,\n    2424: 415126916158535023731030449746058156911457360217500,\n    2425: 425907006811702486258611691435747829051036619210903,\n    2426: 436964764086304546997571902667823798077679571339689,\n    2427: 448307281905025750783203518734071850525930124835870,\n    2428: 459941833958690501858441260833172834575927050017497,\n    2429: 471875878224871422129752689802003581309719671216145,\n    2430: 484117061599156426525236728117223720907832020184888,\n    2431: 496673224641860608784678055946833883950031191035725,\n    2432: 509552406443037374969583492229383313416835733059701,\n    2433: 522762849608713268897451362983651906277382721179854,\n    2434: 536313005371342643715460083111040042096768651944785,\n    2435: 550211538827551788032090316191702467148009553891765,\n    2436: 564467334306317355502338280181042531694130943361929,\n    2437: 579089500870801016601654991798984624538203584674550,\n    2438: 594087377957141194645081615027313378657219091976058,\n    2439: 609470541153583610086244251156702088407546864564250,\n    2440: 625248808123415184021445170239142357065496320226974,\n    2441: 641432244675250690988723453000798446534275367015717,\n    2442: 658031170984308451084537723836848917759126780943929,\n    2443: 675056167968400361774985057979390540476824195499264,\n    2444: 692518083822452741394297527894579793217444427279865,\n    2445: 710428040715467841255717203419691810125435835218542,\n    2446: 728797441653931534847387578562876222605215306007682,\n    2447: 747637977515770665320414243823232108546943571791584,\n    2448: 766961634259063882272862309538971496456501841189299,\n    2449: 786780700309812582901493233837104883069651992252500,\n    2450: 807107774133183849507621375104362485942528919417094,\n    2451: 827955771992745105077858611205558631300937454362243,\n    2452: 849337935902320652619232737317794449777545949179711,\n    2453: 871267841775213384980863950063063429886904651528812,\n    2454: 893759407775650814410526929963928966861696330836200,\n    2455: 916826902877433240978780331677009554236212353692084,\n    2456: 940484955634883423732306479679700600136395142799772,\n    2457: 964748563171321607096873785043308907920748393645865,\n    2458: 989633100390417258370972350733200785584553946028102,\n    2459: 1015154329415899462551538855668088513315200292902465,\n    2460: 1041328409265241672356796753836476758668568608962817,\n    2461: 1068171905763073500068056689718618672673472054705623,\n    2462: 1095701801700212541420510934836771894810436524644206,\n    2463: 1123935507244352919801698227500042488236652668362464,\n    2464: 1152890870608594412929146690100187865796230009117415,\n    2465: 1182586188984146757378861272237745685156851393567877,\n    2466: 1213040219743698104212153283094735988868458164856735,\n    2467: 1244272191922094708920237946746471334658921810675089,\n    2468: 1276301817981140870474529866246359687648227775992726,\n    2469: 1309149305865493979065272921268867078953610074980355,\n    2470: 1342835371356799383941072744632607586619060990003342,\n    2471: 1377381250733383747666895193431311551421473834674537,\n    2472: 1412808713743003709421434478836269410607157240633931,\n    2473: 1449140076896329138317020116671377802568526770518725,\n    2474: 1486398217089027121199419785627770438512228407175000,\n    2475: 1524606585560504203472825372845600976263733665501642,\n    2476: 1563789222197560394205351099996482830581156974888244,\n    2477: 1603970770191409168676519057930382172908445935119463,\n    2478: 1645176491056723265830534175841536314124424257900655,\n    2479: 1687432280021576600685684487181671811367617087501755,\n    2480: 1730764681797368211260238937556940484156749101230455,\n    2481: 1775200906738034957464112810216480762332001678674799,\n    2482: 1820768847398085810011063048337611865735620543349686,\n    2483: 1867497095499222138016227017428624557231848665351291,\n    2484: 1915414959315545554866069359053268627009894091487255,\n    2485: 1964552481487597746580633524928622127514294053468578,\n    2486: 2014940457275725421793253569605575859047900517862975,\n    2487: 2066610453263518227450300026070406061787487374956619,\n    2488: 2119594826522328312496888837397949369108992226003579,\n    2489: 2173926744248147339669532102906132397617461595649235,\n    2490: 2229640203882390293040946390903966696602633829194840,\n    2491: 2286770053728415559686499093247615980043870048333375,\n    2492: 2345352014075897634933772608434944801289607520822444,\n    2493: 2405422698845462573006497019894423614036351120521629,\n    2494: 2467019637766297143181469675691820929552138013921170,\n    2495: 2530181299099750724441152937967329319658147447405249,\n    2496: 2594947112922264451615392923126900249342712365881980,\n    2497: 2661357494981285189837685277991457183899724929972336,\n    2498: 2729453871138152742649660700418835108908145695065284,\n    2499: 2799278702412287477405614444445747930301938442180000,\n    2500: 2870875510641352469269629800993561138276373608937244,\n    2501: 2944288904772419516055596903431635682611440388817684,\n    2502: 3019564607799532159016586951616642980389816614848623,\n    2503: 3096749484363431362720513648966835225350796839944705,\n    2504: 3175891569029590968434327113853291229809825601961265,\n    2505: 3257040095261100652976951554528119114719453404725007,\n    2506: 3340245525103334116822171147466786507458445890183988,\n    2507: 3425559579597749814517587789768024144026745140376550,\n    2508: 3513035269942590955686749126214187667970579050845937,\n    2509: 3602726929418680979845445364711401806180203650663725,\n    2510: 3694690246098950482357992748748848483474524052004611,\n    2511: 3788982296360781887103496312666448565688651771156677,\n    2512: 3885661579220719274616818998490729558629719751838590,\n    2513: 3984788051511562939333648375836061468352863107532895,\n    2514: 4086423163922351728879727101483809741806177963555690,\n    2515: 4190629897922231281075551233411026977189480304097898,\n    2516: 4297472803589713195797719954967455347047259565521535,\n    2517: 4407018038369349240856665212333154882125704077589469,\n    2518: 4519333406778376182071537408268876717047377660539309,\n    2519: 4634488401086431042999613202320599056013666269808095,\n    2520: 4752554242991993841520963249414089899868727306156151\n}\n\ndef exp_sum(number):\n    if number < 0: return 0\n    return ANSWERS[number]",
        "inputs": [
            [
                5
            ],
            [
                200
            ],
            [
                3
            ]
        ],
        "outputs": [
            [
                7
            ],
            [
                3972999029388
            ],
            [
                3
            ]
        ],
        "starter_code": "\ndef exp_sum(n):\n\t",
        "scope": [
            [
                "Function Body",
                2525,
                2527
            ],
            [
                "If Statement Body",
                2526,
                2526
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\ndef string_func(s, n):\n\t    \"\"\"This kata is  blatantly copied from  inspired by This Kata\nWelcome\n\nthis is the second in the series of the string iterations kata!\n\nHere we go!\n\n---------------------------------------------------------------------------------\n\nWe have a string s\n\nLet's say you start with this: \"String\"\n\nThe first thing you do is reverse it: \"gnirtS\"\n\nThen you will take the string from the 1st position and reverse it again: \"gStrin\"\n\nThen you will take the string from the 2nd position and reverse it again: \"gSnirt\"\n\nThen you will take the string from the 3rd position and reverse it again: \"gSntri\"\n\nContinue this pattern until you have done every single position, and then you will return the string you have created. For this particular string, you would return: \n\"gSntir\"\n\nnow,\n\nThe Task:\n\nIn this kata, we also have a number x\n\ntake that reversal function, and apply it to the string x times.\n\n\nreturn the result of the string after applying the reversal function to it x times.\n\n    example where s = \"String\" and x = 3:\n\n    after 0 iteration  s = \"String\"\n    after 1 iteration  s = \"gSntir\"\n    after 2 iterations s = \"rgiStn\"\n    after 3 iterations s = \"nrtgSi\"\n    \n    so you would return \"nrtgSi\".\n\n Note \n\nString lengths may exceed 2 million\n\n\nx exceeds a billion\n\n\nbe read to optimize\n\n\n\nif this is too hard, go here https://www.codewars.com/kata/string-%3E-n-iterations-%3E-string/java\n    \"\"\"\n",
        "canonical_solution": "def string_func(s, n):\n    l, s = [s], list(s)\n    while True:\n        s[::2], s[1::2] = s[:len(s)//2-1:-1], s[:len(s)//2]\n        l.append(''.join(s))\n        if l[0] == l[-1]: del l[-1]; break\n    return l[n % len(l)]",
        "inputs": [
            [
                "\"Ohh Man God Damn\"",
                7
            ],
            [
                "\"this_test_will_hurt_you\"",
                12345678987654321
            ],
            [
                "\"codingisfornerdsyounerd\"",
                10101010
            ]
        ],
        "outputs": [
            [
                "\" nGOnmohaadhMD  \""
            ],
            [
                "\"tt_rt_swuhyeihiotl_su_l\""
            ],
            [
                "\"fonroisreinrddgdneyscou\""
            ]
        ],
        "starter_code": "\ndef string_func(s, n):\n\t",
        "scope": [
            [
                "Function Body",
                1,
                7
            ],
            [
                "While Loop Body",
                3,
                6
            ],
            [
                "If Statement Body",
                6,
                6
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def minDeletionSize(self, A: List[str]) -> int:\n            \"\"\"We are given an array A of N lowercase letter strings, all of the same length.\nNow, we may choose any set of deletion indices, and for each string, we delete all the characters in those indices.\nFor example, if we have an array A = [\"abcdef\",\"uvwxyz\"] and deletion indices {0, 2, 3}, then the final array after deletions is [\"bef\",\"vyz\"].\nSuppose we chose a set of deletion indices D such that after deletions, the final array has its elements in lexicographic order (A[0] <= A[1] <= A[2] ... <= A[A.length - 1]).\nReturn the minimum possible value of D.length.\n \n\n\n\n\n\n\n\nExample 1:\nInput: [\"ca\",\"bb\",\"ac\"]\nOutput: 1\nExplanation: \nAfter deleting the first column, A = [\"a\", \"b\", \"c\"].\nNow A is in lexicographic order (ie. A[0] <= A[1] <= A[2]).\nWe require at least 1 deletion since initially A was not in lexicographic order, so the answer is 1.\n\n\nExample 2:\nInput: [\"xc\",\"yb\",\"za\"]\nOutput: 0\nExplanation: \nA is already in lexicographic order, so we don't need to delete anything.\nNote that the rows of A are not necessarily in lexicographic order:\nie. it is NOT necessarily true that (A[0][0] <= A[0][1] <= ...)\n\n\nExample 3:\nInput: [\"zyx\",\"wvu\",\"tsr\"]\nOutput: 3\nExplanation: \nWe have to delete every column.\n\n \n\n\nNote:\n\n1 <= A.length <= 100\n1 <= A[i].length <= 100\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def minDeletionSize(self, A: List[str]) -> int:\n        def isSorted(arr, i, j):\n            return all(arr[k] <= arr[k+1] for k in range(i, j))\n        ans = 0\n        ranges = [[0, len(A)-1]]\n        for col in zip(*A):\n            if not ranges:\n                break\n            if all(isSorted(col, i, j) for i, j in ranges):\n                tmp = []\n                for i, j in ranges:\n                    start = i\n                    for k in range(i, j+1):\n                        if col[k] != col[start]:\n                            if k - start > 1:\n                                tmp.append([start, k-1])\n                            start = k   \n                    if j + 1 - start > 1:\n                        tmp.append([start, j])\n                    start = k   \n                ranges[:] = tmp\n            else:    \n                ans += 1\n        return ans\n            \n",
        "inputs": [
            [
                [
                    "\"ca\"",
                    "\"bb\"",
                    "\"ac\""
                ]
            ]
        ],
        "outputs": [
            [
                1
            ]
        ],
        "starter_code": "\nclass Solution:\n    def minDeletionSize(self, A: List[str]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                25
            ],
            [
                "Function Body",
                2,
                25
            ],
            [
                "Function Body",
                3,
                4
            ],
            [
                "Generator Expression",
                4,
                4
            ],
            [
                "For Loop Body",
                7,
                24
            ],
            [
                "If Statement Body",
                8,
                9
            ],
            [
                "If Statement Body",
                10,
                24
            ],
            [
                "Generator Expression",
                10,
                10
            ],
            [
                "For Loop Body",
                12,
                21
            ],
            [
                "For Loop Body",
                14,
                18
            ],
            [
                "If Statement Body",
                15,
                18
            ],
            [
                "If Statement Body",
                16,
                17
            ],
            [
                "If Statement Body",
                19,
                20
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def minSteps(self, n: int) -> int:\n            \"\"\"Initially on a notepad only one character 'A' is present. You can perform two operations on this notepad for each step: \n\nCopy All: You can copy all the characters present on the notepad (partial copy is not allowed).\nPaste: You can paste the characters which are copied last time.\n\n\n\n\nGiven a number n. You have to get exactly n 'A' on the notepad by performing the minimum number of steps permitted. Output the minimum number of steps to get n 'A'. \n\n\nExample 1:\n\nInput: 3\nOutput: 3\nExplanation:\nIntitally, we have one character 'A'.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get 'AA'.\nIn step 3, we use Paste operation to get 'AAA'.\n\n\n\n\nNote:\n\nThe n will be in the range [1, 1000].\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def minSteps(self, n):\n         \"\"\"\n         :type n: int\n         :rtype: int\n         \"\"\"\n         primeFactors=[]\n         for i in range(2,int(n**.5)+1):\n             while n%i==0:\n                 primeFactors.append(i)\n                 n=n//i\n         if n>1:\n             primeFactors.append(n)\n         return sum(primeFactors)",
        "inputs": [
            [
                3
            ]
        ],
        "outputs": [
            [
                3
            ]
        ],
        "starter_code": "\nclass Solution:\n    def minSteps(self, n: int) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                14
            ],
            [
                "Function Body",
                2,
                14
            ],
            [
                "For Loop Body",
                8,
                11
            ],
            [
                "While Loop Body",
                9,
                11
            ],
            [
                "If Statement Body",
                12,
                13
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n            \"\"\"Given two strings text1 and text2, return the length of their longest common subsequence.\nA subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, \"ace\" is a subsequence of \"abcde\" while \"aec\" is not). A common subsequence of two strings is a subsequence that is common to both strings.\n \nIf there is no common subsequence, return 0.\n \nExample 1:\nInput: text1 = \"abcde\", text2 = \"ace\" \nOutput: 3  \nExplanation: The longest common subsequence is \"ace\" and its length is 3.\n\nExample 2:\nInput: text1 = \"abc\", text2 = \"abc\"\nOutput: 3\nExplanation: The longest common subsequence is \"abc\" and its length is 3.\n\nExample 3:\nInput: text1 = \"abc\", text2 = \"def\"\nOutput: 0\nExplanation: There is no such common subsequence, so the result is 0.\n\n \nConstraints:\n\n1 <= text1.length <= 1000\n1 <= text2.length <= 1000\nThe input strings consist of lowercase English characters only.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def longestCommonSubsequence(self, a: str, b: str) -> int:\n        last, current = [0] * (len(b) + 1), [0] * (len(b) + 1)\n        \n        for i in range(len(a) - 1, -1, -1):\n            for j in range(len(b) - 1, -1, -1):\n                if a[i] == b[j]:\n                    current[j] = 1 + last[j + 1]\n                else:\n                    current[j] = max(last[j], current[j + 1])\n            last = current\n            current = [0] * (len(b) + 1)\n        return last[0]",
        "inputs": [
            [
                "\"abcde\"",
                "\"ace\""
            ]
        ],
        "outputs": [
            [
                3
            ]
        ],
        "starter_code": "\nclass Solution:\n    def longestCommonSubsequence(self, text1: str, text2: str) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                13
            ],
            [
                "Function Body",
                2,
                13
            ],
            [
                "For Loop Body",
                5,
                12
            ],
            [
                "For Loop Body",
                6,
                10
            ],
            [
                "If Statement Body",
                7,
                10
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def minPatches(self, nums: List[int], n: int) -> int:\n            \"\"\"Given a sorted positive integer array nums and an integer n, add/patch elements to the array such that any number in range [1, n] inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.\n\nExample 1:\n\n\nInput: nums = [1,3], n = 6\nOutput: 1 \nExplanation:\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\nSo we only need 1 patch.\n\nExample 2:\n\n\nInput: nums = [1,5,10], n = 20\nOutput: 2\nExplanation: The two patches can be [2, 4].\n\n\nExample 3:\n\n\nInput: nums = [1,2,2], n = 5\nOutput: 0\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def minPatches(self, nums, n):\n         \"\"\"\n         :type nums: List[int]\n         :type n: int\n         :rtype: int\n         \"\"\"\n         res, cur, i = 0, 1, 0\n         while cur <= n:\n             if i < len(nums) and nums[i] <= cur:\n                 cur += nums[i]\n                 i += 1\n             else:\n                 cur *= 2\n                 res += 1\n         return res",
        "inputs": [
            [
                [
                    1,
                    3
                ],
                6
            ]
        ],
        "outputs": [
            [
                1
            ]
        ],
        "starter_code": "\nclass Solution:\n    def minPatches(self, nums: List[int], n: int) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                16
            ],
            [
                "Function Body",
                2,
                16
            ],
            [
                "While Loop Body",
                9,
                15
            ],
            [
                "If Statement Body",
                10,
                15
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n            \"\"\"A message containing letters from A-Z is being encoded to numbers using the following mapping:\n\n\n'A' -> 1\n'B' -> 2\n...\n'Z' -> 26\n\n\nGiven a non-empty string containing only digits, determine the total number of ways to decode it.\n\nExample 1:\n\n\nInput: \"12\"\nOutput: 2\nExplanation: It could be decoded as \"AB\" (1 2) or \"L\" (12).\n\n\nExample 2:\n\n\nInput: \"226\"\nOutput: 3\nExplanation: It could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def numDecodings(self, s):\n         \"\"\"\n         :type s: str\n         :rtype: int\n         \"\"\"\n         if not s:\n             return 0\n         \n         def num_decode(i):\n             # Number of ways to decode s[i:]\n             if i == len(s):\n                 return 1\n \n                 \n             if i not in memo:                \n                 num_ways = 0\n                 \n                 if s[i] in single_digit_codes:\n                     num_ways += num_decode(i + 1)\n \n                 if s[i:i+2] in double_digit_codes:\n                     num_ways += num_decode(i + 2)\n             \n                 memo[i] = num_ways\n             return memo[i]\n         single_digit_codes = set(str(x) for x in range(1, 10))\n         double_digit_codes = set(str(x) for x in range(10, 27))\n         memo = {}\n         return num_decode(0)",
        "inputs": [
            [
                "\"12\""
            ]
        ],
        "outputs": [
            [
                2
            ]
        ],
        "starter_code": "\nclass Solution:\n    def numDecodings(self, s: str) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                30
            ],
            [
                "Function Body",
                2,
                30
            ],
            [
                "If Statement Body",
                7,
                8
            ],
            [
                "Function Body",
                10,
                26
            ],
            [
                "If Statement Body",
                12,
                13
            ],
            [
                "If Statement Body",
                16,
                25
            ],
            [
                "If Statement Body",
                19,
                20
            ],
            [
                "If Statement Body",
                22,
                23
            ],
            [
                "Generator Expression",
                27,
                27
            ],
            [
                "Generator Expression",
                28,
                28
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def shipWithinDays(self, weights: List[int], D: int) -> int:\n            \"\"\"A conveyor belt has packages that must be shipped from one port to another within D days.\nThe i-th package on the conveyor belt has a weight of weights[i].  Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.\nReturn the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within D days.\n \nExample 1:\nInput: weights = [1,2,3,4,5,6,7,8,9,10], D = 5\nOutput: 15\nExplanation: \nA ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed. \n\nExample 2:\nInput: weights = [3,2,2,4,1,4], D = 3\nOutput: 6\nExplanation: \nA ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4\n\nExample 3:\nInput: weights = [1,2,3,1,1], D = 4\nOutput: 3\nExplanation: \n1st day: 1\n2nd day: 2\n3rd day: 3\n4th day: 1, 1\n\n \nConstraints:\n\n1 <= D <= weights.length <= 50000\n1 <= weights[i] <= 500\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def shipWithinDays(self, weights: List[int], D: int) -> int:\n        left = max(weights)\n        right = left * len(weights) // D\n        while left < right: \n            mid = left + (right - left) // 2\n            c = 0 \n            d = 1 \n            for w in weights:\n                if c + w <= mid:\n                    c += w\n                else:\n                    d += 1\n                    c = w\n            if d > D:\n                left = mid + 1\n            else:\n                right = mid\n        return left",
        "inputs": [
            [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10
                ],
                5
            ]
        ],
        "outputs": [
            [
                15
            ]
        ],
        "starter_code": "\nclass Solution:\n    def shipWithinDays(self, weights: List[int], D: int) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                19
            ],
            [
                "Function Body",
                2,
                19
            ],
            [
                "While Loop Body",
                5,
                18
            ],
            [
                "For Loop Body",
                9,
                14
            ],
            [
                "If Statement Body",
                10,
                14
            ],
            [
                "If Statement Body",
                15,
                18
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\ndef exchange_sort(sequence):\n\t    \"\"\"# Task\n Sorting is one of the most basic computational devices used in Computer Science. \n \n Given a sequence (length ≤ 1000) of 3 different key values (7, 8, 9), your task is to find the minimum number of exchange operations necessary to make the sequence sorted. \n\n One operation is the switching of 2 key values in the sequence.\n\n# Example\n\n For `sequence = [7, 7, 8, 8, 9, 9]`, the result should be `0`.\n \n It's already a sorted sequence.\n\n For `sequence = [9, 7, 8, 8, 9, 7]`, the result should be `1`.\n \n We can switching `sequence[0]` and `sequence[5]`.\n \n For `sequence = [8, 8, 7, 9, 9, 9, 8, 9, 7]`, the result should be `4`.\n \n We can:\n```\n [8, 8, 7, 9, 9, 9, 8, 9, 7] \n switching sequence[0] and sequence[3]\n --> [9, 8, 7, 8, 9, 9, 8, 9, 7]\n switching sequence[0] and sequence[8]\n --> [7, 8, 7, 8, 9, 9, 8, 9, 9]\n switching sequence[1] and sequence[2]\n --> [7, 7, 8, 8, 9, 9, 8, 9, 9]\n switching sequence[5] and sequence[7]\n --> [7, 7, 8, 8, 8, 9, 9, 9, 9] \n```\nSo `4` is the minimum number of operations for the sequence to become sorted.\n\n# Input/Output\n\n\n - `[input]` integer array `sequence`\n\n  The Sequence.\n\n\n - `[output]` an integer\n\n  the minimum number of operations.\n    \"\"\"\n",
        "canonical_solution": "from collections import Counter\n\ndef exchange_sort(sequence):\n    \"\"\"Greedy algorithm based on permutation cycle decomposition:\n    1. Search for transposition placing TWO elements correctly.\n    2. Search iteratively for transposition placing ONE elements correctly.\"\"\"\n    swaps, cnt = 0, Counter()\n    for a, b in zip(sequence, sorted(sequence)):\n        if cnt[b,a] > 0:\n            cnt[b,a] -= 1\n            swaps += 1\n        elif a != b:\n            cnt[a,b] += 1\n    # Special case: as there are only three keys at most,\n    # all remaining cycles will be 3-length cycles that\n    # need 2 transpositions to place 3 elements correctly.\n    return swaps + sum(cnt.values()) // 3 * 2",
        "inputs": [
            [
                [
                    9,
                    9,
                    7,
                    7,
                    8,
                    8
                ]
            ],
            [
                [
                    8,
                    8,
                    7,
                    8
                ]
            ],
            [
                [
                    9,
                    7,
                    9
                ]
            ]
        ],
        "outputs": [
            [
                4
            ],
            [
                1
            ],
            [
                1
            ]
        ],
        "starter_code": "\ndef exchange_sort(sequence):\n\t",
        "scope": [
            [
                "Function Body",
                3,
                17
            ],
            [
                "For Loop Body",
                8,
                13
            ],
            [
                "If Statement Body",
                9,
                13
            ],
            [
                "If Statement Body",
                12,
                13
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n            \"\"\"Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.\n\nFor example, given the following triangle\n\n\n[\n     [2],\n    [3,4],\n   [6,5,7],\n  [4,1,8,3]\n]\n\n\nThe minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).\n\nNote:\n\nBonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     def minimumTotal(self, triangle):\n         \"\"\"\n         :type triangle: List[List[int]]\n         :rtype: int\n         \"\"\"\n         length = len(triangle)\n         for i in range(length - 1, 0, -1):\n             for j in range(1, len(triangle[i])):\n                 if triangle[i][j] < triangle[i][j-1]:\n                     triangle[i-1][j-1] += triangle[i][j]\n                 else:\n                     triangle[i-1][j-1] += triangle[i][j - 1]\n         return triangle[0][0]",
        "inputs": [
            [
                [
                    [
                        -10
                    ]
                ]
            ],
            [
                [
                    [
                        2
                    ],
                    [
                        3,
                        4
                    ],
                    [
                        6,
                        5,
                        7
                    ],
                    [
                        4,
                        1,
                        8,
                        3
                    ]
                ]
            ]
        ],
        "outputs": [
            [
                -10
            ],
            [
                11
            ]
        ],
        "starter_code": "\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                14
            ],
            [
                "Function Body",
                2,
                14
            ],
            [
                "For Loop Body",
                8,
                13
            ],
            [
                "For Loop Body",
                9,
                13
            ],
            [
                "If Statement Body",
                10,
                13
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:\n            \"\"\"To some string S, we will perform some replacement operations that replace groups of letters with new ones (not necessarily the same size).\nEach replacement operation has 3 parameters: a starting index i, a source word x and a target word y.  The rule is that if x starts at position i in the original string S, then we will replace that occurrence of x with y.  If not, we do nothing.\nFor example, if we have S = \"abcd\" and we have some replacement operation i = 2, x = \"cd\", y = \"ffff\", then because \"cd\" starts at position 2 in the original string S, we will replace it with \"ffff\".\nUsing another example on S = \"abcd\", if we have both the replacement operation i = 0, x = \"ab\", y = \"eee\", as well as another replacement operation i = 2, x = \"ec\", y = \"ffff\", this second operation does nothing because in the original string S[2] = 'c', which doesn't match x[0] = 'e'.\nAll these operations occur simultaneously.  It's guaranteed that there won't be any overlap in replacement: for example, S = \"abc\", indexes = [0, 1], sources = [\"ab\",\"bc\"] is not a valid test case.\nExample 1:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"a\",\"cd\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeebffff\"\nExplanation: \"a\" starts at index 0 in S, so it's replaced by \"eee\".\n\"cd\" starts at index 2 in S, so it's replaced by \"ffff\".\n\nExample 2:\nInput: S = \"abcd\", indexes = [0,2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeecd\"\nExplanation: \"ab\" starts at index 0 in S, so it's replaced by \"eee\". \n\"ec\" doesn't starts at index 2 in the original S, so we do nothing.\n\nNotes:\n\n0 <= indexes.length = sources.length = targets.length <= 100\n0 < indexes[i] < S.length <= 1000\nAll characters in given inputs are lowercase letters.\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n    def findReplaceString(self, s: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:\n        l = []\n        for i, tgt, rpl in zip(indexes, sources, targets):\n            if s[i:i + len(tgt)] == tgt:\n                l.append((i, tgt, rpl))\n        l.sort()\n        j = 0\n        s = list(s)\n        for i, tgt, rpl in l:\n            s[i + j:i + j + len(tgt)] = rpl\n            j += len(rpl) - len(tgt)\n        return ''.join(s)",
        "inputs": [
            [
                "\"abcd\"",
                [
                    0,
                    2
                ],
                [
                    "\"a\"",
                    " \"cd\""
                ],
                [
                    "\"eee\"",
                    " \"ffff\""
                ]
            ]
        ],
        "outputs": [
            [
                "\"abcd\""
            ]
        ],
        "starter_code": "\nclass Solution:\n    def findReplaceString(self, S: str, indexes: List[int], sources: List[str], targets: List[str]) -> str:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                13
            ],
            [
                "Function Body",
                2,
                13
            ],
            [
                "For Loop Body",
                4,
                6
            ],
            [
                "If Statement Body",
                5,
                6
            ],
            [
                "For Loop Body",
                10,
                12
            ]
        ],
        "difficulty": "interview"
    },
    {
        "prompt": "\nclass Solution:\n    def numberToWords(self, num: int) -> str:\n            \"\"\"Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than 231 - 1.\n\nExample 1:\n\n\nInput: 123\nOutput: \"One Hundred Twenty Three\"\n\n\nExample 2:\n\n\nInput: 12345\nOutput: \"Twelve Thousand Three Hundred Forty Five\"\n\nExample 3:\n\n\nInput: 1234567\nOutput: \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\n\n\nExample 4:\n\n\nInput: 1234567891\nOutput: \"One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One\"\n    \"\"\"\n",
        "canonical_solution": "class Solution:\n     V1 = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\",\n           \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n     V2 = [\"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n     V3 = [\"Thousand\", \"Million\", \"Billion\"]\n \n     def numberToWords(self, num):\n         \"\"\"\n         :type num: int\n         :rtype: str\n         \"\"\"\n         if num == 0:\n             return \"Zero\"\n         \n         answer = self.convert_hundred(num % 1000)\n         for i in range(3):\n             num //= 1000\n             \n             if num % 1000 > 0:\n                 following = \" \" + answer if answer else \"\"\n                 answer = self.convert_hundred(num % 1000) + \" \" + self.V3[i] + following\n \n         return answer\n \n     def convert_hundred(self, num):\n         answer = \"\"\n         \n         a = num // 100\n         b = num % 100\n         c = num % 10\n         \n         if b < 20:\n             answer = self.V1[b]\n         else:\n             following = \" \" + self.V1[c] if c > 0 else \"\"\n             answer = self.V2[b // 10] + following\n         \n         if a > 0:\n             following = \" \" + answer if answer else \"\"\n             answer = self.V1[a] + \" Hundred\" + following\n         \n         return answer\n",
        "inputs": [
            [
                123
            ]
        ],
        "outputs": [
            [
                "\"One Hundred Twenty Three\""
            ]
        ],
        "starter_code": "\nclass Solution:\n    def numberToWords(self, num: int) -> str:\n        ",
        "scope": [
            [
                "Class Body",
                1,
                42
            ],
            [
                "Function Body",
                7,
                23
            ],
            [
                "If Statement Body",
                12,
                13
            ],
            [
                "For Loop Body",
                16,
                21
            ],
            [
                "If Statement Body",
                19,
                21
            ],
            [
                "Function Body",
                25,
                42
            ],
            [
                "If Statement Body",
                32,
                36
            ],
            [
                "If Statement Body",
                38,
                40
            ]
        ],
        "difficulty": "interview"
    }
]